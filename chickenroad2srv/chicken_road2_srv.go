// Code generated by goctl. DO NOT EDIT.
// Source: chickenroad2_srv.proto

package chickenroad2srv

import (
	"context"

	"cocogame-max/chickenroad2_srv/pb_chickenroad2"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Action                = pb_chickenroad2.Action
	ActionPayload         = pb_chickenroad2.ActionPayload
	ChickenRoad2Role      = pb_chickenroad2.ChickenRoad2Role
	ChickenRoad2_Auth     = pb_chickenroad2.ChickenRoad2_Auth
	ChickenRoad2_AuthResp = pb_chickenroad2.ChickenRoad2_AuthResp
	Coefficients          = pb_chickenroad2.Coefficients
	Empty                 = pb_chickenroad2.Empty
	Fairness              = pb_chickenroad2.Fairness
	GameConfig            = pb_chickenroad2.GameConfig
	GameMeta              = pb_chickenroad2.GameMeta
	GameStep              = pb_chickenroad2.GameStep
	LastWin               = pb_chickenroad2.LastWin
	ReceiveRequest        = pb_chickenroad2.ReceiveRequest
	Record                = pb_chickenroad2.Record
	UserInfo              = pb_chickenroad2.UserInfo

	ChickenRoad2Srv interface {
		Auth(ctx context.Context, in *ChickenRoad2_Auth, opts ...grpc.CallOption) (*ChickenRoad2_AuthResp, error)
		Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultChickenRoad2Srv struct {
		cli zrpc.Client
	}
)

func NewChickenRoad2Srv(cli zrpc.Client) ChickenRoad2Srv {
	return &defaultChickenRoad2Srv{
		cli: cli,
	}
}

func (m *defaultChickenRoad2Srv) Auth(ctx context.Context, in *ChickenRoad2_Auth, opts ...grpc.CallOption) (*ChickenRoad2_AuthResp, error) {
	client := pb_chickenroad2.NewChickenRoad2SrvClient(m.cli.Conn())
	return client.Auth(ctx, in, opts...)
}

func (m *defaultChickenRoad2Srv) Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := pb_chickenroad2.NewChickenRoad2SrvClient(m.cli.Conn())
	return client.Receive(ctx, in, opts...)
}
