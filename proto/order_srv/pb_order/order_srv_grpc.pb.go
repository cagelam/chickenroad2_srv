// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: order_srv.proto

package pb_order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderSrvClient is the client API for OrderSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderSrvClient interface {
	GetHistory(ctx context.Context, in *Req_GetHisotry, opts ...grpc.CallOption) (*Res_HistoryList, error)
	GenerationOrderNo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GenerateResult, error)
	ProduceOrderNo(ctx context.Context, in *Req_OrderNo, opts ...grpc.CallOption) (*Res_OrderNo, error)
	ConsumeOrderNo(ctx context.Context, in *Req_OrderNo, opts ...grpc.CallOption) (*Res_OrderNo, error)
	RecommendRtp(ctx context.Context, in *Req_RecommendRtp, opts ...grpc.CallOption) (*Res_RecommendRtp, error)
	RecommendRiskConfig(ctx context.Context, in *Req_RecommendRiskConfig, opts ...grpc.CallOption) (*Res_RecommendRiskConfig, error)
	AddLogin(ctx context.Context, in *Req_AddLogin, opts ...grpc.CallOption) (*Res_AddLogin, error)
	UpdateOrder(ctx context.Context, in *Req_UpdateOrder, opts ...grpc.CallOption) (*Res_UpdateOrder, error)
	GetUserTag(ctx context.Context, in *Req_GetUserTag, opts ...grpc.CallOption) (*Res_GetUserTag, error)
	GetUserBreakProtect(ctx context.Context, in *Req_GetUserBreakProtect, opts ...grpc.CallOption) (*Res_GetUserBreakProtect, error)
	UseBreakProtect(ctx context.Context, in *Req_UseBreakProtect, opts ...grpc.CallOption) (*Res_UseBreakProtect, error)
}

type orderSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderSrvClient(cc grpc.ClientConnInterface) OrderSrvClient {
	return &orderSrvClient{cc}
}

func (c *orderSrvClient) GetHistory(ctx context.Context, in *Req_GetHisotry, opts ...grpc.CallOption) (*Res_HistoryList, error) {
	out := new(Res_HistoryList)
	err := c.cc.Invoke(ctx, "/pb_order.OrderSrv/GetHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSrvClient) GenerationOrderNo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GenerateResult, error) {
	out := new(GenerateResult)
	err := c.cc.Invoke(ctx, "/pb_order.OrderSrv/GenerationOrderNo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSrvClient) ProduceOrderNo(ctx context.Context, in *Req_OrderNo, opts ...grpc.CallOption) (*Res_OrderNo, error) {
	out := new(Res_OrderNo)
	err := c.cc.Invoke(ctx, "/pb_order.OrderSrv/ProduceOrderNo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSrvClient) ConsumeOrderNo(ctx context.Context, in *Req_OrderNo, opts ...grpc.CallOption) (*Res_OrderNo, error) {
	out := new(Res_OrderNo)
	err := c.cc.Invoke(ctx, "/pb_order.OrderSrv/ConsumeOrderNo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSrvClient) RecommendRtp(ctx context.Context, in *Req_RecommendRtp, opts ...grpc.CallOption) (*Res_RecommendRtp, error) {
	out := new(Res_RecommendRtp)
	err := c.cc.Invoke(ctx, "/pb_order.OrderSrv/RecommendRtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSrvClient) RecommendRiskConfig(ctx context.Context, in *Req_RecommendRiskConfig, opts ...grpc.CallOption) (*Res_RecommendRiskConfig, error) {
	out := new(Res_RecommendRiskConfig)
	err := c.cc.Invoke(ctx, "/pb_order.OrderSrv/RecommendRiskConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSrvClient) AddLogin(ctx context.Context, in *Req_AddLogin, opts ...grpc.CallOption) (*Res_AddLogin, error) {
	out := new(Res_AddLogin)
	err := c.cc.Invoke(ctx, "/pb_order.OrderSrv/AddLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSrvClient) UpdateOrder(ctx context.Context, in *Req_UpdateOrder, opts ...grpc.CallOption) (*Res_UpdateOrder, error) {
	out := new(Res_UpdateOrder)
	err := c.cc.Invoke(ctx, "/pb_order.OrderSrv/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSrvClient) GetUserTag(ctx context.Context, in *Req_GetUserTag, opts ...grpc.CallOption) (*Res_GetUserTag, error) {
	out := new(Res_GetUserTag)
	err := c.cc.Invoke(ctx, "/pb_order.OrderSrv/GetUserTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSrvClient) GetUserBreakProtect(ctx context.Context, in *Req_GetUserBreakProtect, opts ...grpc.CallOption) (*Res_GetUserBreakProtect, error) {
	out := new(Res_GetUserBreakProtect)
	err := c.cc.Invoke(ctx, "/pb_order.OrderSrv/GetUserBreakProtect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSrvClient) UseBreakProtect(ctx context.Context, in *Req_UseBreakProtect, opts ...grpc.CallOption) (*Res_UseBreakProtect, error) {
	out := new(Res_UseBreakProtect)
	err := c.cc.Invoke(ctx, "/pb_order.OrderSrv/UseBreakProtect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderSrvServer is the server API for OrderSrv service.
// All implementations must embed UnimplementedOrderSrvServer
// for forward compatibility
type OrderSrvServer interface {
	GetHistory(context.Context, *Req_GetHisotry) (*Res_HistoryList, error)
	GenerationOrderNo(context.Context, *Empty) (*GenerateResult, error)
	ProduceOrderNo(context.Context, *Req_OrderNo) (*Res_OrderNo, error)
	ConsumeOrderNo(context.Context, *Req_OrderNo) (*Res_OrderNo, error)
	RecommendRtp(context.Context, *Req_RecommendRtp) (*Res_RecommendRtp, error)
	RecommendRiskConfig(context.Context, *Req_RecommendRiskConfig) (*Res_RecommendRiskConfig, error)
	AddLogin(context.Context, *Req_AddLogin) (*Res_AddLogin, error)
	UpdateOrder(context.Context, *Req_UpdateOrder) (*Res_UpdateOrder, error)
	GetUserTag(context.Context, *Req_GetUserTag) (*Res_GetUserTag, error)
	GetUserBreakProtect(context.Context, *Req_GetUserBreakProtect) (*Res_GetUserBreakProtect, error)
	UseBreakProtect(context.Context, *Req_UseBreakProtect) (*Res_UseBreakProtect, error)
	mustEmbedUnimplementedOrderSrvServer()
}

// UnimplementedOrderSrvServer must be embedded to have forward compatible implementations.
type UnimplementedOrderSrvServer struct {
}

func (UnimplementedOrderSrvServer) GetHistory(context.Context, *Req_GetHisotry) (*Res_HistoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedOrderSrvServer) GenerationOrderNo(context.Context, *Empty) (*GenerateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerationOrderNo not implemented")
}
func (UnimplementedOrderSrvServer) ProduceOrderNo(context.Context, *Req_OrderNo) (*Res_OrderNo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProduceOrderNo not implemented")
}
func (UnimplementedOrderSrvServer) ConsumeOrderNo(context.Context, *Req_OrderNo) (*Res_OrderNo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeOrderNo not implemented")
}
func (UnimplementedOrderSrvServer) RecommendRtp(context.Context, *Req_RecommendRtp) (*Res_RecommendRtp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendRtp not implemented")
}
func (UnimplementedOrderSrvServer) RecommendRiskConfig(context.Context, *Req_RecommendRiskConfig) (*Res_RecommendRiskConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendRiskConfig not implemented")
}
func (UnimplementedOrderSrvServer) AddLogin(context.Context, *Req_AddLogin) (*Res_AddLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLogin not implemented")
}
func (UnimplementedOrderSrvServer) UpdateOrder(context.Context, *Req_UpdateOrder) (*Res_UpdateOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedOrderSrvServer) GetUserTag(context.Context, *Req_GetUserTag) (*Res_GetUserTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTag not implemented")
}
func (UnimplementedOrderSrvServer) GetUserBreakProtect(context.Context, *Req_GetUserBreakProtect) (*Res_GetUserBreakProtect, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBreakProtect not implemented")
}
func (UnimplementedOrderSrvServer) UseBreakProtect(context.Context, *Req_UseBreakProtect) (*Res_UseBreakProtect, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseBreakProtect not implemented")
}
func (UnimplementedOrderSrvServer) mustEmbedUnimplementedOrderSrvServer() {}

// UnsafeOrderSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderSrvServer will
// result in compilation errors.
type UnsafeOrderSrvServer interface {
	mustEmbedUnimplementedOrderSrvServer()
}

func RegisterOrderSrvServer(s grpc.ServiceRegistrar, srv OrderSrvServer) {
	s.RegisterService(&OrderSrv_ServiceDesc, srv)
}

func _OrderSrv_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetHisotry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSrvServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_order.OrderSrv/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSrvServer).GetHistory(ctx, req.(*Req_GetHisotry))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSrv_GenerationOrderNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSrvServer).GenerationOrderNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_order.OrderSrv/GenerationOrderNo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSrvServer).GenerationOrderNo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSrv_ProduceOrderNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_OrderNo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSrvServer).ProduceOrderNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_order.OrderSrv/ProduceOrderNo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSrvServer).ProduceOrderNo(ctx, req.(*Req_OrderNo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSrv_ConsumeOrderNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_OrderNo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSrvServer).ConsumeOrderNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_order.OrderSrv/ConsumeOrderNo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSrvServer).ConsumeOrderNo(ctx, req.(*Req_OrderNo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSrv_RecommendRtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_RecommendRtp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSrvServer).RecommendRtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_order.OrderSrv/RecommendRtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSrvServer).RecommendRtp(ctx, req.(*Req_RecommendRtp))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSrv_RecommendRiskConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_RecommendRiskConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSrvServer).RecommendRiskConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_order.OrderSrv/RecommendRiskConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSrvServer).RecommendRiskConfig(ctx, req.(*Req_RecommendRiskConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSrv_AddLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_AddLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSrvServer).AddLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_order.OrderSrv/AddLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSrvServer).AddLogin(ctx, req.(*Req_AddLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSrv_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_UpdateOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSrvServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_order.OrderSrv/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSrvServer).UpdateOrder(ctx, req.(*Req_UpdateOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSrv_GetUserTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetUserTag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSrvServer).GetUserTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_order.OrderSrv/GetUserTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSrvServer).GetUserTag(ctx, req.(*Req_GetUserTag))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSrv_GetUserBreakProtect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetUserBreakProtect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSrvServer).GetUserBreakProtect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_order.OrderSrv/GetUserBreakProtect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSrvServer).GetUserBreakProtect(ctx, req.(*Req_GetUserBreakProtect))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSrv_UseBreakProtect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_UseBreakProtect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSrvServer).UseBreakProtect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_order.OrderSrv/UseBreakProtect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSrvServer).UseBreakProtect(ctx, req.(*Req_UseBreakProtect))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderSrv_ServiceDesc is the grpc.ServiceDesc for OrderSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb_order.OrderSrv",
	HandlerType: (*OrderSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHistory",
			Handler:    _OrderSrv_GetHistory_Handler,
		},
		{
			MethodName: "GenerationOrderNo",
			Handler:    _OrderSrv_GenerationOrderNo_Handler,
		},
		{
			MethodName: "ProduceOrderNo",
			Handler:    _OrderSrv_ProduceOrderNo_Handler,
		},
		{
			MethodName: "ConsumeOrderNo",
			Handler:    _OrderSrv_ConsumeOrderNo_Handler,
		},
		{
			MethodName: "RecommendRtp",
			Handler:    _OrderSrv_RecommendRtp_Handler,
		},
		{
			MethodName: "RecommendRiskConfig",
			Handler:    _OrderSrv_RecommendRiskConfig_Handler,
		},
		{
			MethodName: "AddLogin",
			Handler:    _OrderSrv_AddLogin_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _OrderSrv_UpdateOrder_Handler,
		},
		{
			MethodName: "GetUserTag",
			Handler:    _OrderSrv_GetUserTag_Handler,
		},
		{
			MethodName: "GetUserBreakProtect",
			Handler:    _OrderSrv_GetUserBreakProtect_Handler,
		},
		{
			MethodName: "UseBreakProtect",
			Handler:    _OrderSrv_UseBreakProtect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_srv.proto",
}
