// Code generated by goctl. DO NOT EDIT.
// Source: order_srv.proto

package ordersrv

import (
	"context"

	"cocogame-max/chickenroad2_srv/proto/order_srv/pb_order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ComPager                = pb_order.ComPager
	Empty                   = pb_order.Empty
	GenerateResult          = pb_order.GenerateResult
	OrderHistoryItem        = pb_order.OrderHistoryItem
	Req_AddLogin            = pb_order.Req_AddLogin
	Req_GetHisotry          = pb_order.Req_GetHisotry
	Req_GetUserBreakProtect = pb_order.Req_GetUserBreakProtect
	Req_GetUserTag          = pb_order.Req_GetUserTag
	Req_OrderNo             = pb_order.Req_OrderNo
	Req_RecommendRiskConfig = pb_order.Req_RecommendRiskConfig
	Req_RecommendRtp        = pb_order.Req_RecommendRtp
	Req_UpdateOrder         = pb_order.Req_UpdateOrder
	Req_UseBreakProtect     = pb_order.Req_UseBreakProtect
	Res_AddLogin            = pb_order.Res_AddLogin
	Res_GetUserBreakProtect = pb_order.Res_GetUserBreakProtect
	Res_GetUserTag          = pb_order.Res_GetUserTag
	Res_HistoryList         = pb_order.Res_HistoryList
	Res_OrderNo             = pb_order.Res_OrderNo
	Res_RecommendRiskConfig = pb_order.Res_RecommendRiskConfig
	Res_RecommendRtp        = pb_order.Res_RecommendRtp
	Res_UpdateOrder         = pb_order.Res_UpdateOrder
	Res_UseBreakProtect     = pb_order.Res_UseBreakProtect

	OrderSrv interface {
		GetHistory(ctx context.Context, in *Req_GetHisotry, opts ...grpc.CallOption) (*Res_HistoryList, error)
		GenerationOrderNo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GenerateResult, error)
		ProduceOrderNo(ctx context.Context, in *Req_OrderNo, opts ...grpc.CallOption) (*Res_OrderNo, error)
		ConsumeOrderNo(ctx context.Context, in *Req_OrderNo, opts ...grpc.CallOption) (*Res_OrderNo, error)
		RecommendRtp(ctx context.Context, in *Req_RecommendRtp, opts ...grpc.CallOption) (*Res_RecommendRtp, error)
		RecommendRiskConfig(ctx context.Context, in *Req_RecommendRiskConfig, opts ...grpc.CallOption) (*Res_RecommendRiskConfig, error)
		AddLogin(ctx context.Context, in *Req_AddLogin, opts ...grpc.CallOption) (*Res_AddLogin, error)
		UpdateOrder(ctx context.Context, in *Req_UpdateOrder, opts ...grpc.CallOption) (*Res_UpdateOrder, error)
		GetUserTag(ctx context.Context, in *Req_GetUserTag, opts ...grpc.CallOption) (*Res_GetUserTag, error)
		GetUserBreakProtect(ctx context.Context, in *Req_GetUserBreakProtect, opts ...grpc.CallOption) (*Res_GetUserBreakProtect, error)
		UseBreakProtect(ctx context.Context, in *Req_UseBreakProtect, opts ...grpc.CallOption) (*Res_UseBreakProtect, error)
	}

	defaultOrderSrv struct {
		cli zrpc.Client
	}
)

func NewOrderSrv(cli zrpc.Client) OrderSrv {
	return &defaultOrderSrv{
		cli: cli,
	}
}

func (m *defaultOrderSrv) GetHistory(ctx context.Context, in *Req_GetHisotry, opts ...grpc.CallOption) (*Res_HistoryList, error) {
	client := pb_order.NewOrderSrvClient(m.cli.Conn())
	return client.GetHistory(ctx, in, opts...)
}

func (m *defaultOrderSrv) GenerationOrderNo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GenerateResult, error) {
	client := pb_order.NewOrderSrvClient(m.cli.Conn())
	return client.GenerationOrderNo(ctx, in, opts...)
}

func (m *defaultOrderSrv) ProduceOrderNo(ctx context.Context, in *Req_OrderNo, opts ...grpc.CallOption) (*Res_OrderNo, error) {
	client := pb_order.NewOrderSrvClient(m.cli.Conn())
	return client.ProduceOrderNo(ctx, in, opts...)
}

func (m *defaultOrderSrv) ConsumeOrderNo(ctx context.Context, in *Req_OrderNo, opts ...grpc.CallOption) (*Res_OrderNo, error) {
	client := pb_order.NewOrderSrvClient(m.cli.Conn())
	return client.ConsumeOrderNo(ctx, in, opts...)
}

func (m *defaultOrderSrv) RecommendRtp(ctx context.Context, in *Req_RecommendRtp, opts ...grpc.CallOption) (*Res_RecommendRtp, error) {
	client := pb_order.NewOrderSrvClient(m.cli.Conn())
	return client.RecommendRtp(ctx, in, opts...)
}

func (m *defaultOrderSrv) RecommendRiskConfig(ctx context.Context, in *Req_RecommendRiskConfig, opts ...grpc.CallOption) (*Res_RecommendRiskConfig, error) {
	client := pb_order.NewOrderSrvClient(m.cli.Conn())
	return client.RecommendRiskConfig(ctx, in, opts...)
}

func (m *defaultOrderSrv) AddLogin(ctx context.Context, in *Req_AddLogin, opts ...grpc.CallOption) (*Res_AddLogin, error) {
	client := pb_order.NewOrderSrvClient(m.cli.Conn())
	return client.AddLogin(ctx, in, opts...)
}

func (m *defaultOrderSrv) UpdateOrder(ctx context.Context, in *Req_UpdateOrder, opts ...grpc.CallOption) (*Res_UpdateOrder, error) {
	client := pb_order.NewOrderSrvClient(m.cli.Conn())
	return client.UpdateOrder(ctx, in, opts...)
}

func (m *defaultOrderSrv) GetUserTag(ctx context.Context, in *Req_GetUserTag, opts ...grpc.CallOption) (*Res_GetUserTag, error) {
	client := pb_order.NewOrderSrvClient(m.cli.Conn())
	return client.GetUserTag(ctx, in, opts...)
}

func (m *defaultOrderSrv) GetUserBreakProtect(ctx context.Context, in *Req_GetUserBreakProtect, opts ...grpc.CallOption) (*Res_GetUserBreakProtect, error) {
	client := pb_order.NewOrderSrvClient(m.cli.Conn())
	return client.GetUserBreakProtect(ctx, in, opts...)
}

func (m *defaultOrderSrv) UseBreakProtect(ctx context.Context, in *Req_UseBreakProtect, opts ...grpc.CallOption) (*Res_UseBreakProtect, error) {
	client := pb_order.NewOrderSrvClient(m.cli.Conn())
	return client.UseBreakProtect(ctx, in, opts...)
}
