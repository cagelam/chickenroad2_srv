// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: operatorproxy_srv.proto

package pb_operatorproxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OperatorProxySrvClient is the client API for OperatorProxySrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperatorProxySrvClient interface {
	//验证会话
	VerifySession(ctx context.Context, in *Req_VerifySession, opts ...grpc.CallOption) (*Res_VerifySession, error)
	//得到钱包
	CashGet(ctx context.Context, in *Req_CashGet, opts ...grpc.CallOption) (*Res_CashGet, error)
	//加钱
	CashAdd(ctx context.Context, in *Req_CashAdd, opts ...grpc.CallOption) (*Res_CashAdd, error)
	//扣钱
	CashSub(ctx context.Context, in *Req_CashSub, opts ...grpc.CallOption) (*Res_CashSub, error)
	//金币调整
	CashAdjustment(ctx context.Context, in *Req_CashAdjustment, opts ...grpc.CallOption) (*Res_CashAdjustment, error)
	//验证运营商
	VerifyOperator(ctx context.Context, in *Req_VerifyOperator, opts ...grpc.CallOption) (*Res_VerifyOperator, error)
	//获取运营商秘钥
	GetOperatorKey(ctx context.Context, in *Req_GetOperatorKey, opts ...grpc.CallOption) (*Res_GetOperatorKey, error)
	//请求CurrencyLevel
	CurrencyLevel(ctx context.Context, in *Req_CurrencyLevel, opts ...grpc.CallOption) (*Res_CurrencyLevel, error)
	// ------------------------------------------------------------------------
	//test:验证会话
	TestVerifySession(ctx context.Context, in *Req_Test, opts ...grpc.CallOption) (*Res_Test, error)
	//test:得到钱包
	TestCashGet(ctx context.Context, in *Req_Test, opts ...grpc.CallOption) (*Res_Test, error)
	//test:加钱
	TestCashAdd(ctx context.Context, in *Req_Test, opts ...grpc.CallOption) (*Res_Test, error)
	//test:扣钱
	TestCashSub(ctx context.Context, in *Req_Test, opts ...grpc.CallOption) (*Res_Test, error)
	//test:BadAction
	TestBadAction(ctx context.Context, in *Req_Test, opts ...grpc.CallOption) (*Res_Test, error)
	//test:Echo
	TestEcho(ctx context.Context, in *Req_Test, opts ...grpc.CallOption) (*Res_Test, error)
}

type operatorProxySrvClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatorProxySrvClient(cc grpc.ClientConnInterface) OperatorProxySrvClient {
	return &operatorProxySrvClient{cc}
}

func (c *operatorProxySrvClient) VerifySession(ctx context.Context, in *Req_VerifySession, opts ...grpc.CallOption) (*Res_VerifySession, error) {
	out := new(Res_VerifySession)
	err := c.cc.Invoke(ctx, "/pb_operatorproxy.OperatorProxySrv/VerifySession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorProxySrvClient) CashGet(ctx context.Context, in *Req_CashGet, opts ...grpc.CallOption) (*Res_CashGet, error) {
	out := new(Res_CashGet)
	err := c.cc.Invoke(ctx, "/pb_operatorproxy.OperatorProxySrv/CashGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorProxySrvClient) CashAdd(ctx context.Context, in *Req_CashAdd, opts ...grpc.CallOption) (*Res_CashAdd, error) {
	out := new(Res_CashAdd)
	err := c.cc.Invoke(ctx, "/pb_operatorproxy.OperatorProxySrv/CashAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorProxySrvClient) CashSub(ctx context.Context, in *Req_CashSub, opts ...grpc.CallOption) (*Res_CashSub, error) {
	out := new(Res_CashSub)
	err := c.cc.Invoke(ctx, "/pb_operatorproxy.OperatorProxySrv/CashSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorProxySrvClient) CashAdjustment(ctx context.Context, in *Req_CashAdjustment, opts ...grpc.CallOption) (*Res_CashAdjustment, error) {
	out := new(Res_CashAdjustment)
	err := c.cc.Invoke(ctx, "/pb_operatorproxy.OperatorProxySrv/CashAdjustment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorProxySrvClient) VerifyOperator(ctx context.Context, in *Req_VerifyOperator, opts ...grpc.CallOption) (*Res_VerifyOperator, error) {
	out := new(Res_VerifyOperator)
	err := c.cc.Invoke(ctx, "/pb_operatorproxy.OperatorProxySrv/VerifyOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorProxySrvClient) GetOperatorKey(ctx context.Context, in *Req_GetOperatorKey, opts ...grpc.CallOption) (*Res_GetOperatorKey, error) {
	out := new(Res_GetOperatorKey)
	err := c.cc.Invoke(ctx, "/pb_operatorproxy.OperatorProxySrv/GetOperatorKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorProxySrvClient) CurrencyLevel(ctx context.Context, in *Req_CurrencyLevel, opts ...grpc.CallOption) (*Res_CurrencyLevel, error) {
	out := new(Res_CurrencyLevel)
	err := c.cc.Invoke(ctx, "/pb_operatorproxy.OperatorProxySrv/CurrencyLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorProxySrvClient) TestVerifySession(ctx context.Context, in *Req_Test, opts ...grpc.CallOption) (*Res_Test, error) {
	out := new(Res_Test)
	err := c.cc.Invoke(ctx, "/pb_operatorproxy.OperatorProxySrv/TestVerifySession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorProxySrvClient) TestCashGet(ctx context.Context, in *Req_Test, opts ...grpc.CallOption) (*Res_Test, error) {
	out := new(Res_Test)
	err := c.cc.Invoke(ctx, "/pb_operatorproxy.OperatorProxySrv/TestCashGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorProxySrvClient) TestCashAdd(ctx context.Context, in *Req_Test, opts ...grpc.CallOption) (*Res_Test, error) {
	out := new(Res_Test)
	err := c.cc.Invoke(ctx, "/pb_operatorproxy.OperatorProxySrv/TestCashAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorProxySrvClient) TestCashSub(ctx context.Context, in *Req_Test, opts ...grpc.CallOption) (*Res_Test, error) {
	out := new(Res_Test)
	err := c.cc.Invoke(ctx, "/pb_operatorproxy.OperatorProxySrv/TestCashSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorProxySrvClient) TestBadAction(ctx context.Context, in *Req_Test, opts ...grpc.CallOption) (*Res_Test, error) {
	out := new(Res_Test)
	err := c.cc.Invoke(ctx, "/pb_operatorproxy.OperatorProxySrv/TestBadAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorProxySrvClient) TestEcho(ctx context.Context, in *Req_Test, opts ...grpc.CallOption) (*Res_Test, error) {
	out := new(Res_Test)
	err := c.cc.Invoke(ctx, "/pb_operatorproxy.OperatorProxySrv/TestEcho", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatorProxySrvServer is the server API for OperatorProxySrv service.
// All implementations must embed UnimplementedOperatorProxySrvServer
// for forward compatibility
type OperatorProxySrvServer interface {
	//验证会话
	VerifySession(context.Context, *Req_VerifySession) (*Res_VerifySession, error)
	//得到钱包
	CashGet(context.Context, *Req_CashGet) (*Res_CashGet, error)
	//加钱
	CashAdd(context.Context, *Req_CashAdd) (*Res_CashAdd, error)
	//扣钱
	CashSub(context.Context, *Req_CashSub) (*Res_CashSub, error)
	//金币调整
	CashAdjustment(context.Context, *Req_CashAdjustment) (*Res_CashAdjustment, error)
	//验证运营商
	VerifyOperator(context.Context, *Req_VerifyOperator) (*Res_VerifyOperator, error)
	//获取运营商秘钥
	GetOperatorKey(context.Context, *Req_GetOperatorKey) (*Res_GetOperatorKey, error)
	//请求CurrencyLevel
	CurrencyLevel(context.Context, *Req_CurrencyLevel) (*Res_CurrencyLevel, error)
	// ------------------------------------------------------------------------
	//test:验证会话
	TestVerifySession(context.Context, *Req_Test) (*Res_Test, error)
	//test:得到钱包
	TestCashGet(context.Context, *Req_Test) (*Res_Test, error)
	//test:加钱
	TestCashAdd(context.Context, *Req_Test) (*Res_Test, error)
	//test:扣钱
	TestCashSub(context.Context, *Req_Test) (*Res_Test, error)
	//test:BadAction
	TestBadAction(context.Context, *Req_Test) (*Res_Test, error)
	//test:Echo
	TestEcho(context.Context, *Req_Test) (*Res_Test, error)
	mustEmbedUnimplementedOperatorProxySrvServer()
}

// UnimplementedOperatorProxySrvServer must be embedded to have forward compatible implementations.
type UnimplementedOperatorProxySrvServer struct {
}

func (UnimplementedOperatorProxySrvServer) VerifySession(context.Context, *Req_VerifySession) (*Res_VerifySession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySession not implemented")
}
func (UnimplementedOperatorProxySrvServer) CashGet(context.Context, *Req_CashGet) (*Res_CashGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashGet not implemented")
}
func (UnimplementedOperatorProxySrvServer) CashAdd(context.Context, *Req_CashAdd) (*Res_CashAdd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashAdd not implemented")
}
func (UnimplementedOperatorProxySrvServer) CashSub(context.Context, *Req_CashSub) (*Res_CashSub, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashSub not implemented")
}
func (UnimplementedOperatorProxySrvServer) CashAdjustment(context.Context, *Req_CashAdjustment) (*Res_CashAdjustment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashAdjustment not implemented")
}
func (UnimplementedOperatorProxySrvServer) VerifyOperator(context.Context, *Req_VerifyOperator) (*Res_VerifyOperator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOperator not implemented")
}
func (UnimplementedOperatorProxySrvServer) GetOperatorKey(context.Context, *Req_GetOperatorKey) (*Res_GetOperatorKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorKey not implemented")
}
func (UnimplementedOperatorProxySrvServer) CurrencyLevel(context.Context, *Req_CurrencyLevel) (*Res_CurrencyLevel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrencyLevel not implemented")
}
func (UnimplementedOperatorProxySrvServer) TestVerifySession(context.Context, *Req_Test) (*Res_Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestVerifySession not implemented")
}
func (UnimplementedOperatorProxySrvServer) TestCashGet(context.Context, *Req_Test) (*Res_Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestCashGet not implemented")
}
func (UnimplementedOperatorProxySrvServer) TestCashAdd(context.Context, *Req_Test) (*Res_Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestCashAdd not implemented")
}
func (UnimplementedOperatorProxySrvServer) TestCashSub(context.Context, *Req_Test) (*Res_Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestCashSub not implemented")
}
func (UnimplementedOperatorProxySrvServer) TestBadAction(context.Context, *Req_Test) (*Res_Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestBadAction not implemented")
}
func (UnimplementedOperatorProxySrvServer) TestEcho(context.Context, *Req_Test) (*Res_Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestEcho not implemented")
}
func (UnimplementedOperatorProxySrvServer) mustEmbedUnimplementedOperatorProxySrvServer() {}

// UnsafeOperatorProxySrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperatorProxySrvServer will
// result in compilation errors.
type UnsafeOperatorProxySrvServer interface {
	mustEmbedUnimplementedOperatorProxySrvServer()
}

func RegisterOperatorProxySrvServer(s grpc.ServiceRegistrar, srv OperatorProxySrvServer) {
	s.RegisterService(&OperatorProxySrv_ServiceDesc, srv)
}

func _OperatorProxySrv_VerifySession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_VerifySession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorProxySrvServer).VerifySession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_operatorproxy.OperatorProxySrv/VerifySession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorProxySrvServer).VerifySession(ctx, req.(*Req_VerifySession))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorProxySrv_CashGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_CashGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorProxySrvServer).CashGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_operatorproxy.OperatorProxySrv/CashGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorProxySrvServer).CashGet(ctx, req.(*Req_CashGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorProxySrv_CashAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_CashAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorProxySrvServer).CashAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_operatorproxy.OperatorProxySrv/CashAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorProxySrvServer).CashAdd(ctx, req.(*Req_CashAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorProxySrv_CashSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_CashSub)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorProxySrvServer).CashSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_operatorproxy.OperatorProxySrv/CashSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorProxySrvServer).CashSub(ctx, req.(*Req_CashSub))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorProxySrv_CashAdjustment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_CashAdjustment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorProxySrvServer).CashAdjustment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_operatorproxy.OperatorProxySrv/CashAdjustment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorProxySrvServer).CashAdjustment(ctx, req.(*Req_CashAdjustment))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorProxySrv_VerifyOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_VerifyOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorProxySrvServer).VerifyOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_operatorproxy.OperatorProxySrv/VerifyOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorProxySrvServer).VerifyOperator(ctx, req.(*Req_VerifyOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorProxySrv_GetOperatorKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetOperatorKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorProxySrvServer).GetOperatorKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_operatorproxy.OperatorProxySrv/GetOperatorKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorProxySrvServer).GetOperatorKey(ctx, req.(*Req_GetOperatorKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorProxySrv_CurrencyLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_CurrencyLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorProxySrvServer).CurrencyLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_operatorproxy.OperatorProxySrv/CurrencyLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorProxySrvServer).CurrencyLevel(ctx, req.(*Req_CurrencyLevel))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorProxySrv_TestVerifySession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorProxySrvServer).TestVerifySession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_operatorproxy.OperatorProxySrv/TestVerifySession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorProxySrvServer).TestVerifySession(ctx, req.(*Req_Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorProxySrv_TestCashGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorProxySrvServer).TestCashGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_operatorproxy.OperatorProxySrv/TestCashGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorProxySrvServer).TestCashGet(ctx, req.(*Req_Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorProxySrv_TestCashAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorProxySrvServer).TestCashAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_operatorproxy.OperatorProxySrv/TestCashAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorProxySrvServer).TestCashAdd(ctx, req.(*Req_Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorProxySrv_TestCashSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorProxySrvServer).TestCashSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_operatorproxy.OperatorProxySrv/TestCashSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorProxySrvServer).TestCashSub(ctx, req.(*Req_Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorProxySrv_TestBadAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorProxySrvServer).TestBadAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_operatorproxy.OperatorProxySrv/TestBadAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorProxySrvServer).TestBadAction(ctx, req.(*Req_Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorProxySrv_TestEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorProxySrvServer).TestEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_operatorproxy.OperatorProxySrv/TestEcho",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorProxySrvServer).TestEcho(ctx, req.(*Req_Test))
	}
	return interceptor(ctx, in, info, handler)
}

// OperatorProxySrv_ServiceDesc is the grpc.ServiceDesc for OperatorProxySrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperatorProxySrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb_operatorproxy.OperatorProxySrv",
	HandlerType: (*OperatorProxySrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifySession",
			Handler:    _OperatorProxySrv_VerifySession_Handler,
		},
		{
			MethodName: "CashGet",
			Handler:    _OperatorProxySrv_CashGet_Handler,
		},
		{
			MethodName: "CashAdd",
			Handler:    _OperatorProxySrv_CashAdd_Handler,
		},
		{
			MethodName: "CashSub",
			Handler:    _OperatorProxySrv_CashSub_Handler,
		},
		{
			MethodName: "CashAdjustment",
			Handler:    _OperatorProxySrv_CashAdjustment_Handler,
		},
		{
			MethodName: "VerifyOperator",
			Handler:    _OperatorProxySrv_VerifyOperator_Handler,
		},
		{
			MethodName: "GetOperatorKey",
			Handler:    _OperatorProxySrv_GetOperatorKey_Handler,
		},
		{
			MethodName: "CurrencyLevel",
			Handler:    _OperatorProxySrv_CurrencyLevel_Handler,
		},
		{
			MethodName: "TestVerifySession",
			Handler:    _OperatorProxySrv_TestVerifySession_Handler,
		},
		{
			MethodName: "TestCashGet",
			Handler:    _OperatorProxySrv_TestCashGet_Handler,
		},
		{
			MethodName: "TestCashAdd",
			Handler:    _OperatorProxySrv_TestCashAdd_Handler,
		},
		{
			MethodName: "TestCashSub",
			Handler:    _OperatorProxySrv_TestCashSub_Handler,
		},
		{
			MethodName: "TestBadAction",
			Handler:    _OperatorProxySrv_TestBadAction_Handler,
		},
		{
			MethodName: "TestEcho",
			Handler:    _OperatorProxySrv_TestEcho_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "operatorproxy_srv.proto",
}
