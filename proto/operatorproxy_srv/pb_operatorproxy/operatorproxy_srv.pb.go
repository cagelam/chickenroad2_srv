// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.9
// source: operatorproxy_srv.proto

package pb_operatorproxy

import (
	pb_common "cocogame-max/chickenroad2_srv/proto/pb_common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Res_Ok struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
}

func (x *Res_Ok) Reset() {
	*x = Res_Ok{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res_Ok) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res_Ok) ProtoMessage() {}

func (x *Res_Ok) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res_Ok.ProtoReflect.Descriptor instead.
func (*Res_Ok) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{0}
}

func (x *Res_Ok) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

// 请求-验证会话
type Req_VerifySession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gt                  int32  `protobuf:"varint,1,opt,name=Gt,proto3" json:"Gt,omitempty"`                                  // 游戏类型1真机，2模拟
	GameId              int32  `protobuf:"varint,2,opt,name=GameId,proto3" json:"GameId,omitempty"`                          // 游戏编号
	OperatorPlayerToken string `protobuf:"bytes,3,opt,name=OperatorPlayerToken,proto3" json:"OperatorPlayerToken,omitempty"` // 运营商用户token
	OperatorToken       string `protobuf:"bytes,4,opt,name=OperatorToken,proto3" json:"OperatorToken,omitempty"`             // 运营商token
	OperatorParam       string `protobuf:"bytes,5,opt,name=OperatorParam,proto3" json:"OperatorParam,omitempty"`             // 运营商自定义参数
	Ip                  string `protobuf:"bytes,6,opt,name=Ip,proto3" json:"Ip,omitempty"`                                   // 玩家IP
	SessionId           string `protobuf:"bytes,7,opt,name=SessionId,proto3" json:"SessionId,omitempty"`                     // 运营商上次返回的session
}

func (x *Req_VerifySession) Reset() {
	*x = Req_VerifySession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req_VerifySession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req_VerifySession) ProtoMessage() {}

func (x *Req_VerifySession) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req_VerifySession.ProtoReflect.Descriptor instead.
func (*Req_VerifySession) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{1}
}

func (x *Req_VerifySession) GetGt() int32 {
	if x != nil {
		return x.Gt
	}
	return 0
}

func (x *Req_VerifySession) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *Req_VerifySession) GetOperatorPlayerToken() string {
	if x != nil {
		return x.OperatorPlayerToken
	}
	return ""
}

func (x *Req_VerifySession) GetOperatorToken() string {
	if x != nil {
		return x.OperatorToken
	}
	return ""
}

func (x *Req_VerifySession) GetOperatorParam() string {
	if x != nil {
		return x.OperatorParam
	}
	return ""
}

func (x *Req_VerifySession) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Req_VerifySession) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// 应答-验证会话
type Res_VerifySession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gt           int32                    `protobuf:"varint,1,opt,name=Gt,proto3" json:"Gt,omitempty"`                    // 游戏类型1真机，2模拟
	GameId       int32                    `protobuf:"varint,2,opt,name=GameId,proto3" json:"GameId,omitempty"`            // 游戏编号
	ReminderTime string                   `protobuf:"bytes,3,opt,name=ReminderTime,proto3" json:"ReminderTime,omitempty"` // 提醒时间
	OperatorRole *pb_common.MOperatorRole `protobuf:"bytes,4,opt,name=OperatorRole,proto3" json:"OperatorRole,omitempty"`
}

func (x *Res_VerifySession) Reset() {
	*x = Res_VerifySession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res_VerifySession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res_VerifySession) ProtoMessage() {}

func (x *Res_VerifySession) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res_VerifySession.ProtoReflect.Descriptor instead.
func (*Res_VerifySession) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{2}
}

func (x *Res_VerifySession) GetGt() int32 {
	if x != nil {
		return x.Gt
	}
	return 0
}

func (x *Res_VerifySession) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *Res_VerifySession) GetReminderTime() string {
	if x != nil {
		return x.ReminderTime
	}
	return ""
}

func (x *Res_VerifySession) GetOperatorRole() *pb_common.MOperatorRole {
	if x != nil {
		return x.OperatorRole
	}
	return nil
}

type Req_CashGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorRole *pb_common.MOperatorRole `protobuf:"bytes,1,opt,name=OperatorRole,proto3" json:"OperatorRole,omitempty"`
}

func (x *Req_CashGet) Reset() {
	*x = Req_CashGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req_CashGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req_CashGet) ProtoMessage() {}

func (x *Req_CashGet) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req_CashGet.ProtoReflect.Descriptor instead.
func (*Req_CashGet) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{3}
}

func (x *Req_CashGet) GetOperatorRole() *pb_common.MOperatorRole {
	if x != nil {
		return x.OperatorRole
	}
	return nil
}

type Res_CashGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BalanceAmount float64 `protobuf:"fixed64,1,opt,name=BalanceAmount,proto3" json:"BalanceAmount,omitempty"` // 货币余额
	CurrencyCode  string  `protobuf:"bytes,2,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`     // 货种代码
	CurrencyMult  int64   `protobuf:"varint,3,opt,name=CurrencyMult,proto3" json:"CurrencyMult,omitempty"`    // 货种乘数
}

func (x *Res_CashGet) Reset() {
	*x = Res_CashGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res_CashGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res_CashGet) ProtoMessage() {}

func (x *Res_CashGet) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res_CashGet.ProtoReflect.Descriptor instead.
func (*Res_CashGet) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{4}
}

func (x *Res_CashGet) GetBalanceAmount() float64 {
	if x != nil {
		return x.BalanceAmount
	}
	return 0
}

func (x *Res_CashGet) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Res_CashGet) GetCurrencyMult() int64 {
	if x != nil {
		return x.CurrencyMult
	}
	return 0
}

type Req_CashAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorRole  *pb_common.MOperatorRole `protobuf:"bytes,1,opt,name=OperatorRole,proto3" json:"OperatorRole,omitempty"`
	GameId        int32                    `protobuf:"varint,2,opt,name=GameId,proto3" json:"GameId,omitempty"`
	BetId         int64                    `protobuf:"varint,3,opt,name=BetId,proto3" json:"BetId,omitempty"`
	SubId         int64                    `protobuf:"varint,4,opt,name=SubId,proto3" json:"SubId,omitempty"`
	BetLevel      float64                  `protobuf:"fixed64,5,opt,name=BetLevel,proto3" json:"BetLevel,omitempty"`
	Amount        float64                  `protobuf:"fixed64,6,opt,name=Amount,proto3" json:"Amount,omitempty"`
	CreateTime    int64                    `protobuf:"varint,7,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	IsEndRound    bool                     `protobuf:"varint,8,opt,name=IsEndRound,proto3" json:"IsEndRound,omitempty"`        //本局游戏结束
	IsFSActivity  bool                     `protobuf:"varint,9,opt,name=IsFSActivity,proto3" json:"IsFSActivity,omitempty"`    // 免费旋转活动
	FreeSpinId    int64                    `protobuf:"varint,10,opt,name=FreeSpinId,proto3" json:"FreeSpinId,omitempty"`       //平台赠送freespin ID
	FreeSpinCount int32                    `protobuf:"varint,11,opt,name=FreeSpinCount,proto3" json:"FreeSpinCount,omitempty"` //剩余平台赠送次数
}

func (x *Req_CashAdd) Reset() {
	*x = Req_CashAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req_CashAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req_CashAdd) ProtoMessage() {}

func (x *Req_CashAdd) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req_CashAdd.ProtoReflect.Descriptor instead.
func (*Req_CashAdd) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{5}
}

func (x *Req_CashAdd) GetOperatorRole() *pb_common.MOperatorRole {
	if x != nil {
		return x.OperatorRole
	}
	return nil
}

func (x *Req_CashAdd) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *Req_CashAdd) GetBetId() int64 {
	if x != nil {
		return x.BetId
	}
	return 0
}

func (x *Req_CashAdd) GetSubId() int64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *Req_CashAdd) GetBetLevel() float64 {
	if x != nil {
		return x.BetLevel
	}
	return 0
}

func (x *Req_CashAdd) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Req_CashAdd) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Req_CashAdd) GetIsEndRound() bool {
	if x != nil {
		return x.IsEndRound
	}
	return false
}

func (x *Req_CashAdd) GetIsFSActivity() bool {
	if x != nil {
		return x.IsFSActivity
	}
	return false
}

func (x *Req_CashAdd) GetFreeSpinId() int64 {
	if x != nil {
		return x.FreeSpinId
	}
	return 0
}

func (x *Req_CashAdd) GetFreeSpinCount() int32 {
	if x != nil {
		return x.FreeSpinCount
	}
	return 0
}

type Res_CashAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BalanceAmount float64 `protobuf:"fixed64,1,opt,name=BalanceAmount,proto3" json:"BalanceAmount,omitempty"` // 货币余额
	ReceiptId     string  `protobuf:"bytes,2,opt,name=ReceiptId,proto3" json:"ReceiptId,omitempty"`           // 运营商流水号
	ExchangeRate  string  `protobuf:"bytes,3,opt,name=ExchangeRate,proto3" json:"ExchangeRate,omitempty"`     // 当前汇率
}

func (x *Res_CashAdd) Reset() {
	*x = Res_CashAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res_CashAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res_CashAdd) ProtoMessage() {}

func (x *Res_CashAdd) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res_CashAdd.ProtoReflect.Descriptor instead.
func (*Res_CashAdd) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{6}
}

func (x *Res_CashAdd) GetBalanceAmount() float64 {
	if x != nil {
		return x.BalanceAmount
	}
	return 0
}

func (x *Res_CashAdd) GetReceiptId() string {
	if x != nil {
		return x.ReceiptId
	}
	return ""
}

func (x *Res_CashAdd) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

type Req_CashSub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorRole     *pb_common.MOperatorRole `protobuf:"bytes,1,opt,name=OperatorRole,proto3" json:"OperatorRole,omitempty"`
	GameId           int32                    `protobuf:"varint,2,opt,name=GameId,proto3" json:"GameId,omitempty"`
	BetId            int64                    `protobuf:"varint,3,opt,name=BetId,proto3" json:"BetId,omitempty"`
	SubId            int64                    `protobuf:"varint,4,opt,name=SubId,proto3" json:"SubId,omitempty"`
	BetLevel         float64                  `protobuf:"fixed64,5,opt,name=BetLevel,proto3" json:"BetLevel,omitempty"`
	Amount           float64                  `protobuf:"fixed64,6,opt,name=Amount,proto3" json:"Amount,omitempty"`
	CreateTime       int64                    `protobuf:"varint,7,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	IsFSActivity     bool                     `protobuf:"varint,8,opt,name=IsFSActivity,proto3" json:"IsFSActivity,omitempty"`          // 免费旋转活动
	FSActivityAmount float64                  `protobuf:"fixed64,9,opt,name=FSActivityAmount,proto3" json:"FSActivityAmount,omitempty"` // 免费旋转活动中本应扣除的金额
	FreeSpinId       int64                    `protobuf:"varint,10,opt,name=FreeSpinId,proto3" json:"FreeSpinId,omitempty"`             //平台赠送freespin ID
	FreeSpinCount    int32                    `protobuf:"varint,11,opt,name=FreeSpinCount,proto3" json:"FreeSpinCount,omitempty"`       //剩余平台赠送次数
}

func (x *Req_CashSub) Reset() {
	*x = Req_CashSub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req_CashSub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req_CashSub) ProtoMessage() {}

func (x *Req_CashSub) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req_CashSub.ProtoReflect.Descriptor instead.
func (*Req_CashSub) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{7}
}

func (x *Req_CashSub) GetOperatorRole() *pb_common.MOperatorRole {
	if x != nil {
		return x.OperatorRole
	}
	return nil
}

func (x *Req_CashSub) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *Req_CashSub) GetBetId() int64 {
	if x != nil {
		return x.BetId
	}
	return 0
}

func (x *Req_CashSub) GetSubId() int64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *Req_CashSub) GetBetLevel() float64 {
	if x != nil {
		return x.BetLevel
	}
	return 0
}

func (x *Req_CashSub) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Req_CashSub) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Req_CashSub) GetIsFSActivity() bool {
	if x != nil {
		return x.IsFSActivity
	}
	return false
}

func (x *Req_CashSub) GetFSActivityAmount() float64 {
	if x != nil {
		return x.FSActivityAmount
	}
	return 0
}

func (x *Req_CashSub) GetFreeSpinId() int64 {
	if x != nil {
		return x.FreeSpinId
	}
	return 0
}

func (x *Req_CashSub) GetFreeSpinCount() int32 {
	if x != nil {
		return x.FreeSpinCount
	}
	return 0
}

type Res_CashSub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BalanceAmount float64 `protobuf:"fixed64,1,opt,name=BalanceAmount,proto3" json:"BalanceAmount,omitempty"` // 货币余额
	ReceiptId     string  `protobuf:"bytes,2,opt,name=ReceiptId,proto3" json:"ReceiptId,omitempty"`           // 运营商流水号
	ExchangeRate  string  `protobuf:"bytes,3,opt,name=ExchangeRate,proto3" json:"ExchangeRate,omitempty"`     // 当前汇率
}

func (x *Res_CashSub) Reset() {
	*x = Res_CashSub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res_CashSub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res_CashSub) ProtoMessage() {}

func (x *Res_CashSub) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res_CashSub.ProtoReflect.Descriptor instead.
func (*Res_CashSub) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{8}
}

func (x *Res_CashSub) GetBalanceAmount() float64 {
	if x != nil {
		return x.BalanceAmount
	}
	return 0
}

func (x *Res_CashSub) GetReceiptId() string {
	if x != nil {
		return x.ReceiptId
	}
	return ""
}

func (x *Res_CashSub) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

type Req_CashAdjustment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorRole   *pb_common.MOperatorRole `protobuf:"bytes,1,opt,name=OperatorRole,proto3" json:"OperatorRole,omitempty"`
	TransferAmount float64                  `protobuf:"fixed64,2,opt,name=TransferAmount,proto3" json:"TransferAmount,omitempty"`
	GameId         int32                    `protobuf:"varint,3,opt,name=GameId,proto3" json:"GameId,omitempty"`
	ParentId       int64                    `protobuf:"varint,4,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	BetId          int64                    `protobuf:"varint,5,opt,name=BetId,proto3" json:"BetId,omitempty"`
	CreateTime     int64                    `protobuf:"varint,6,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
}

func (x *Req_CashAdjustment) Reset() {
	*x = Req_CashAdjustment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req_CashAdjustment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req_CashAdjustment) ProtoMessage() {}

func (x *Req_CashAdjustment) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req_CashAdjustment.ProtoReflect.Descriptor instead.
func (*Req_CashAdjustment) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{9}
}

func (x *Req_CashAdjustment) GetOperatorRole() *pb_common.MOperatorRole {
	if x != nil {
		return x.OperatorRole
	}
	return nil
}

func (x *Req_CashAdjustment) GetTransferAmount() float64 {
	if x != nil {
		return x.TransferAmount
	}
	return 0
}

func (x *Req_CashAdjustment) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *Req_CashAdjustment) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Req_CashAdjustment) GetBetId() int64 {
	if x != nil {
		return x.BetId
	}
	return 0
}

func (x *Req_CashAdjustment) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type Res_CashAdjustment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BalanceAmount float64 `protobuf:"fixed64,1,opt,name=BalanceAmount,proto3" json:"BalanceAmount,omitempty"` // 货币余额
	ReceiptId     string  `protobuf:"bytes,2,opt,name=ReceiptId,proto3" json:"ReceiptId,omitempty"`           // 运营商流水号
}

func (x *Res_CashAdjustment) Reset() {
	*x = Res_CashAdjustment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res_CashAdjustment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res_CashAdjustment) ProtoMessage() {}

func (x *Res_CashAdjustment) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res_CashAdjustment.ProtoReflect.Descriptor instead.
func (*Res_CashAdjustment) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{10}
}

func (x *Res_CashAdjustment) GetBalanceAmount() float64 {
	if x != nil {
		return x.BalanceAmount
	}
	return 0
}

func (x *Res_CashAdjustment) GetReceiptId() string {
	if x != nil {
		return x.ReceiptId
	}
	return ""
}

type Req_VerifyOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorToken string `protobuf:"bytes,1,opt,name=OperatorToken,proto3" json:"OperatorToken,omitempty"`
}

func (x *Req_VerifyOperator) Reset() {
	*x = Req_VerifyOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req_VerifyOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req_VerifyOperator) ProtoMessage() {}

func (x *Req_VerifyOperator) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req_VerifyOperator.ProtoReflect.Descriptor instead.
func (*Req_VerifyOperator) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{11}
}

func (x *Req_VerifyOperator) GetOperatorToken() string {
	if x != nil {
		return x.OperatorToken
	}
	return ""
}

type Res_VerifyOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
}

func (x *Res_VerifyOperator) Reset() {
	*x = Res_VerifyOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res_VerifyOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res_VerifyOperator) ProtoMessage() {}

func (x *Res_VerifyOperator) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res_VerifyOperator.ProtoReflect.Descriptor instead.
func (*Res_VerifyOperator) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{12}
}

func (x *Res_VerifyOperator) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type Req_BetLevels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameCode     int32  `protobuf:"varint,1,opt,name=GameCode,proto3" json:"GameCode,omitempty"`        // The game ID
	CurrencyCode string `protobuf:"bytes,2,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"` // Currency Code(optional)
}

func (x *Req_BetLevels) Reset() {
	*x = Req_BetLevels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req_BetLevels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req_BetLevels) ProtoMessage() {}

func (x *Req_BetLevels) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req_BetLevels.ProtoReflect.Descriptor instead.
func (*Req_BetLevels) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{13}
}

func (x *Req_BetLevels) GetGameCode() int32 {
	if x != nil {
		return x.GameCode
	}
	return 0
}

func (x *Req_BetLevels) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type Res_BetLevels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetLevels []*pb_common.BetLevels `protobuf:"bytes,1,rep,name=BetLevels,proto3" json:"BetLevels,omitempty"` // Bet Levels
	GameCode  int32                  `protobuf:"varint,2,opt,name=GameCode,proto3" json:"GameCode,omitempty"`
}

func (x *Res_BetLevels) Reset() {
	*x = Res_BetLevels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res_BetLevels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res_BetLevels) ProtoMessage() {}

func (x *Res_BetLevels) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res_BetLevels.ProtoReflect.Descriptor instead.
func (*Res_BetLevels) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{14}
}

func (x *Res_BetLevels) GetBetLevels() []*pb_common.BetLevels {
	if x != nil {
		return x.BetLevels
	}
	return nil
}

func (x *Res_BetLevels) GetGameCode() int32 {
	if x != nil {
		return x.GameCode
	}
	return 0
}

type Req_CurrencyLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorToken        string `protobuf:"bytes,1,opt,name=OperatorToken,proto3" json:"OperatorToken,omitempty"`
	OperatorCurrencyCode string `protobuf:"bytes,2,opt,name=OperatorCurrencyCode,proto3" json:"OperatorCurrencyCode,omitempty"`
}

func (x *Req_CurrencyLevel) Reset() {
	*x = Req_CurrencyLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req_CurrencyLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req_CurrencyLevel) ProtoMessage() {}

func (x *Req_CurrencyLevel) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req_CurrencyLevel.ProtoReflect.Descriptor instead.
func (*Req_CurrencyLevel) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{15}
}

func (x *Req_CurrencyLevel) GetOperatorToken() string {
	if x != nil {
		return x.OperatorToken
	}
	return ""
}

func (x *Req_CurrencyLevel) GetOperatorCurrencyCode() string {
	if x != nil {
		return x.OperatorCurrencyCode
	}
	return ""
}

type Res_CurrencyLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok               bool      `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	DefaultBet       float64   `protobuf:"fixed64,2,opt,name=DefaultBet,proto3" json:"DefaultBet,omitempty"`
	BetLevel         []float64 `protobuf:"fixed64,3,rep,packed,name=BetLevel,proto3" json:"BetLevel,omitempty"`
	TempExchangeRate float64   `protobuf:"fixed64,4,opt,name=TempExchangeRate,proto3" json:"TempExchangeRate,omitempty"`
}

func (x *Res_CurrencyLevel) Reset() {
	*x = Res_CurrencyLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res_CurrencyLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res_CurrencyLevel) ProtoMessage() {}

func (x *Res_CurrencyLevel) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res_CurrencyLevel.ProtoReflect.Descriptor instead.
func (*Res_CurrencyLevel) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{16}
}

func (x *Res_CurrencyLevel) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *Res_CurrencyLevel) GetDefaultBet() float64 {
	if x != nil {
		return x.DefaultBet
	}
	return 0
}

func (x *Res_CurrencyLevel) GetBetLevel() []float64 {
	if x != nil {
		return x.BetLevel
	}
	return nil
}

func (x *Res_CurrencyLevel) GetTempExchangeRate() float64 {
	if x != nil {
		return x.TempExchangeRate
	}
	return 0
}

type Req_Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorUrl         string                   `protobuf:"bytes,1,opt,name=OperatorUrl,proto3" json:"OperatorUrl,omitempty"`
	OperatorPlayerToken string                   `protobuf:"bytes,2,opt,name=OperatorPlayerToken,proto3" json:"OperatorPlayerToken,omitempty"`
	SecretKey           string                   `protobuf:"bytes,3,opt,name=SecretKey,proto3" json:"SecretKey,omitempty"`
	Role                *pb_common.MOperatorRole `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"` // Get from VerifySession
	GameId              int32                    `protobuf:"varint,5,opt,name=GameId,proto3" json:"GameId,omitempty"`
	BetId               int64                    `protobuf:"varint,6,opt,name=BetId,proto3" json:"BetId,omitempty"`
	SubId               int64                    `protobuf:"varint,7,opt,name=SubId,proto3" json:"SubId,omitempty"`
	BetLevel            float64                  `protobuf:"fixed64,8,opt,name=BetLevel,proto3" json:"BetLevel,omitempty"`
	Amount              float64                  `protobuf:"fixed64,9,opt,name=Amount,proto3" json:"Amount,omitempty"`
	CreateTime          int64                    `protobuf:"varint,10,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	IsEndRound          bool                     `protobuf:"varint,11,opt,name=IsEndRound,proto3" json:"IsEndRound,omitempty"`
	OperatorToken       string                   `protobuf:"bytes,12,opt,name=OperatorToken,proto3" json:"OperatorToken,omitempty"`
}

func (x *Req_Test) Reset() {
	*x = Req_Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req_Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req_Test) ProtoMessage() {}

func (x *Req_Test) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req_Test.ProtoReflect.Descriptor instead.
func (*Req_Test) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{17}
}

func (x *Req_Test) GetOperatorUrl() string {
	if x != nil {
		return x.OperatorUrl
	}
	return ""
}

func (x *Req_Test) GetOperatorPlayerToken() string {
	if x != nil {
		return x.OperatorPlayerToken
	}
	return ""
}

func (x *Req_Test) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *Req_Test) GetRole() *pb_common.MOperatorRole {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *Req_Test) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *Req_Test) GetBetId() int64 {
	if x != nil {
		return x.BetId
	}
	return 0
}

func (x *Req_Test) GetSubId() int64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *Req_Test) GetBetLevel() float64 {
	if x != nil {
		return x.BetLevel
	}
	return 0
}

func (x *Req_Test) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Req_Test) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Req_Test) GetIsEndRound() bool {
	if x != nil {
		return x.IsEndRound
	}
	return false
}

func (x *Req_Test) GetOperatorToken() string {
	if x != nil {
		return x.OperatorToken
	}
	return ""
}

type Res_Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role          *pb_common.MOperatorRole `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	BalanceAmount float64                  `protobuf:"fixed64,2,opt,name=BalanceAmount,proto3" json:"BalanceAmount,omitempty"`
	CurrencyCode  string                   `protobuf:"bytes,3,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
	ReceiptId     string                   `protobuf:"bytes,4,opt,name=ReceiptId,proto3" json:"ReceiptId,omitempty"`
	Result        string                   `protobuf:"bytes,5,opt,name=Result,proto3" json:"Result,omitempty"`
	Ts            int64                    `protobuf:"varint,6,opt,name=Ts,proto3" json:"Ts,omitempty"`
}

func (x *Res_Test) Reset() {
	*x = Res_Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res_Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res_Test) ProtoMessage() {}

func (x *Res_Test) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res_Test.ProtoReflect.Descriptor instead.
func (*Res_Test) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{18}
}

func (x *Res_Test) GetRole() *pb_common.MOperatorRole {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *Res_Test) GetBalanceAmount() float64 {
	if x != nil {
		return x.BalanceAmount
	}
	return 0
}

func (x *Res_Test) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Res_Test) GetReceiptId() string {
	if x != nil {
		return x.ReceiptId
	}
	return ""
}

func (x *Res_Test) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *Res_Test) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

type Req_GetOperatorKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorToken string `protobuf:"bytes,1,opt,name=OperatorToken,proto3" json:"OperatorToken,omitempty"`
}

func (x *Req_GetOperatorKey) Reset() {
	*x = Req_GetOperatorKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req_GetOperatorKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req_GetOperatorKey) ProtoMessage() {}

func (x *Req_GetOperatorKey) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req_GetOperatorKey.ProtoReflect.Descriptor instead.
func (*Req_GetOperatorKey) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{19}
}

func (x *Req_GetOperatorKey) GetOperatorToken() string {
	if x != nil {
		return x.OperatorToken
	}
	return ""
}

type Res_GetOperatorKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *Res_GetOperatorKey) Reset() {
	*x = Res_GetOperatorKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operatorproxy_srv_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res_GetOperatorKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res_GetOperatorKey) ProtoMessage() {}

func (x *Res_GetOperatorKey) ProtoReflect() protoreflect.Message {
	mi := &file_operatorproxy_srv_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res_GetOperatorKey.ProtoReflect.Descriptor instead.
func (*Res_GetOperatorKey) Descriptor() ([]byte, []int) {
	return file_operatorproxy_srv_proto_rawDescGZIP(), []int{20}
}

func (x *Res_GetOperatorKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_operatorproxy_srv_proto protoreflect.FileDescriptor

var file_operatorproxy_srv_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x73, 0x72, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x70, 0x62, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x1a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x18, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x5f, 0x4f, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x4f, 0x6b, 0x22, 0xe7, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x5f, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x47, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x47, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9d, 0x01,
	0x0a, 0x11, 0x52, 0x65, 0x73, 0x5f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x47, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x47, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3c, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x4b, 0x0a,
	0x0b, 0x52, 0x65, 0x71, 0x5f, 0x43, 0x61, 0x73, 0x68, 0x47, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x0c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x7b, 0x0a, 0x0b, 0x52, 0x65,
	0x73, 0x5f, 0x43, 0x61, 0x73, 0x68, 0x47, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x22, 0xed, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x5f,
	0x43, 0x61, 0x73, 0x68, 0x41, 0x64, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x42, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x42, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x75, 0x62, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x53, 0x75, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x42, 0x65, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x73, 0x45, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x49, 0x73, 0x45, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x73, 0x46, 0x53, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x46, 0x53, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x69, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70,
	0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x75, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x5f, 0x43,
	0x61, 0x73, 0x68, 0x41, 0x64, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0xf9,
	0x02, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x5f, 0x43, 0x61, 0x73, 0x68, 0x53, 0x75, 0x62, 0x12, 0x3c,
	0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x42, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x75,
	0x62, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x75, 0x62, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x42, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x46, 0x53, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x46, 0x53,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x53, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x46, 0x53, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x69, 0x6e,
	0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x69, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x46, 0x72, 0x65,
	0x65, 0x53, 0x70, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x75, 0x0a, 0x0b, 0x52, 0x65,
	0x73, 0x5f, 0x43, 0x61, 0x73, 0x68, 0x53, 0x75, 0x62, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x22, 0xe4, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x5f, 0x43, 0x61, 0x73, 0x68, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x42, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x5f,
	0x43, 0x61, 0x73, 0x68, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x49, 0x64, 0x22, 0x3a, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x5f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x24,
	0x0a, 0x12, 0x52, 0x65, 0x73, 0x5f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x4f, 0x6b, 0x22, 0x4f, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x5f, 0x42, 0x65, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5f, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x5f, 0x42, 0x65, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x42, 0x65, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52,
	0x09, 0x42, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6d, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x5f, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x32, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x5f, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x4f,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x42,
	0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x65, 0x6d, 0x70, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x54, 0x65, 0x6d, 0x70, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x22, 0x88, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x5f, 0x54, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55,
	0x72, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x42, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x75, 0x62, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53,
	0x75, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x42, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x45, 0x6e,
	0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73,
	0x45, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc8,
	0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x54, 0x73, 0x22, 0x3a, 0x0a, 0x12, 0x52, 0x65, 0x71,
	0x5f, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x26, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x32, 0x88, 0x09,
	0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53,
	0x72, 0x76, 0x12, 0x5b, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x5f, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x5f,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x07, 0x43, 0x61, 0x73, 0x68, 0x47, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65,
	0x71, 0x5f, 0x43, 0x61, 0x73, 0x68, 0x47, 0x65, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x73,
	0x5f, 0x43, 0x61, 0x73, 0x68, 0x47, 0x65, 0x74, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x07, 0x43, 0x61,
	0x73, 0x68, 0x41, 0x64, 0x64, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x5f, 0x43, 0x61, 0x73,
	0x68, 0x41, 0x64, 0x64, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x5f, 0x43, 0x61, 0x73, 0x68,
	0x41, 0x64, 0x64, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x07, 0x43, 0x61, 0x73, 0x68, 0x53, 0x75, 0x62,
	0x12, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x5f, 0x43, 0x61, 0x73, 0x68, 0x53, 0x75, 0x62, 0x1a,
	0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x5f, 0x43, 0x61, 0x73, 0x68, 0x53, 0x75, 0x62, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x0e, 0x43, 0x61, 0x73, 0x68, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x5f, 0x43, 0x61, 0x73, 0x68, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x5f,
	0x43, 0x61, 0x73, 0x68, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x5f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x5f,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x5f, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x5f,
	0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x5f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x5f, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x11, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x52, 0x65, 0x73, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0b,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x68, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x62,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52,
	0x65, 0x71, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x5f, 0x54,
	0x65, 0x73, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x68, 0x41, 0x64, 0x64, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x5f, 0x54, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x68, 0x53, 0x75, 0x62, 0x12, 0x1a, 0x2e,
	0x70, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x52, 0x65, 0x71, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x73,
	0x5f, 0x54, 0x65, 0x73, 0x74, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x42,
	0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x5f,
	0x54, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x5f, 0x54, 0x65, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x1a,
	0x2e, 0x70, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x52, 0x65, 0x71, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65,
	0x73, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x22, 0x00, 0x42, 0x14, 0x5a, 0x12, 0x2e, 0x2f, 0x70, 0x62,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_operatorproxy_srv_proto_rawDescOnce sync.Once
	file_operatorproxy_srv_proto_rawDescData = file_operatorproxy_srv_proto_rawDesc
)

func file_operatorproxy_srv_proto_rawDescGZIP() []byte {
	file_operatorproxy_srv_proto_rawDescOnce.Do(func() {
		file_operatorproxy_srv_proto_rawDescData = protoimpl.X.CompressGZIP(file_operatorproxy_srv_proto_rawDescData)
	})
	return file_operatorproxy_srv_proto_rawDescData
}

var file_operatorproxy_srv_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_operatorproxy_srv_proto_goTypes = []interface{}{
	(*Res_Ok)(nil),                  // 0: pb_operatorproxy.Res_Ok
	(*Req_VerifySession)(nil),       // 1: pb_operatorproxy.Req_VerifySession
	(*Res_VerifySession)(nil),       // 2: pb_operatorproxy.Res_VerifySession
	(*Req_CashGet)(nil),             // 3: pb_operatorproxy.Req_CashGet
	(*Res_CashGet)(nil),             // 4: pb_operatorproxy.Res_CashGet
	(*Req_CashAdd)(nil),             // 5: pb_operatorproxy.Req_CashAdd
	(*Res_CashAdd)(nil),             // 6: pb_operatorproxy.Res_CashAdd
	(*Req_CashSub)(nil),             // 7: pb_operatorproxy.Req_CashSub
	(*Res_CashSub)(nil),             // 8: pb_operatorproxy.Res_CashSub
	(*Req_CashAdjustment)(nil),      // 9: pb_operatorproxy.Req_CashAdjustment
	(*Res_CashAdjustment)(nil),      // 10: pb_operatorproxy.Res_CashAdjustment
	(*Req_VerifyOperator)(nil),      // 11: pb_operatorproxy.Req_VerifyOperator
	(*Res_VerifyOperator)(nil),      // 12: pb_operatorproxy.Res_VerifyOperator
	(*Req_BetLevels)(nil),           // 13: pb_operatorproxy.Req_BetLevels
	(*Res_BetLevels)(nil),           // 14: pb_operatorproxy.Res_BetLevels
	(*Req_CurrencyLevel)(nil),       // 15: pb_operatorproxy.Req_CurrencyLevel
	(*Res_CurrencyLevel)(nil),       // 16: pb_operatorproxy.Res_CurrencyLevel
	(*Req_Test)(nil),                // 17: pb_operatorproxy.Req_Test
	(*Res_Test)(nil),                // 18: pb_operatorproxy.Res_Test
	(*Req_GetOperatorKey)(nil),      // 19: pb_operatorproxy.Req_GetOperatorKey
	(*Res_GetOperatorKey)(nil),      // 20: pb_operatorproxy.Res_GetOperatorKey
	(*pb_common.MOperatorRole)(nil), // 21: pb_common.MOperatorRole
	(*pb_common.BetLevels)(nil),     // 22: pb_common.BetLevels
}
var file_operatorproxy_srv_proto_depIdxs = []int32{
	21, // 0: pb_operatorproxy.Res_VerifySession.OperatorRole:type_name -> pb_common.MOperatorRole
	21, // 1: pb_operatorproxy.Req_CashGet.OperatorRole:type_name -> pb_common.MOperatorRole
	21, // 2: pb_operatorproxy.Req_CashAdd.OperatorRole:type_name -> pb_common.MOperatorRole
	21, // 3: pb_operatorproxy.Req_CashSub.OperatorRole:type_name -> pb_common.MOperatorRole
	21, // 4: pb_operatorproxy.Req_CashAdjustment.OperatorRole:type_name -> pb_common.MOperatorRole
	22, // 5: pb_operatorproxy.Res_BetLevels.BetLevels:type_name -> pb_common.BetLevels
	21, // 6: pb_operatorproxy.Req_Test.role:type_name -> pb_common.MOperatorRole
	21, // 7: pb_operatorproxy.Res_Test.role:type_name -> pb_common.MOperatorRole
	1,  // 8: pb_operatorproxy.OperatorProxySrv.VerifySession:input_type -> pb_operatorproxy.Req_VerifySession
	3,  // 9: pb_operatorproxy.OperatorProxySrv.CashGet:input_type -> pb_operatorproxy.Req_CashGet
	5,  // 10: pb_operatorproxy.OperatorProxySrv.CashAdd:input_type -> pb_operatorproxy.Req_CashAdd
	7,  // 11: pb_operatorproxy.OperatorProxySrv.CashSub:input_type -> pb_operatorproxy.Req_CashSub
	9,  // 12: pb_operatorproxy.OperatorProxySrv.CashAdjustment:input_type -> pb_operatorproxy.Req_CashAdjustment
	11, // 13: pb_operatorproxy.OperatorProxySrv.VerifyOperator:input_type -> pb_operatorproxy.Req_VerifyOperator
	19, // 14: pb_operatorproxy.OperatorProxySrv.GetOperatorKey:input_type -> pb_operatorproxy.Req_GetOperatorKey
	15, // 15: pb_operatorproxy.OperatorProxySrv.CurrencyLevel:input_type -> pb_operatorproxy.Req_CurrencyLevel
	17, // 16: pb_operatorproxy.OperatorProxySrv.TestVerifySession:input_type -> pb_operatorproxy.Req_Test
	17, // 17: pb_operatorproxy.OperatorProxySrv.TestCashGet:input_type -> pb_operatorproxy.Req_Test
	17, // 18: pb_operatorproxy.OperatorProxySrv.TestCashAdd:input_type -> pb_operatorproxy.Req_Test
	17, // 19: pb_operatorproxy.OperatorProxySrv.TestCashSub:input_type -> pb_operatorproxy.Req_Test
	17, // 20: pb_operatorproxy.OperatorProxySrv.TestBadAction:input_type -> pb_operatorproxy.Req_Test
	17, // 21: pb_operatorproxy.OperatorProxySrv.TestEcho:input_type -> pb_operatorproxy.Req_Test
	2,  // 22: pb_operatorproxy.OperatorProxySrv.VerifySession:output_type -> pb_operatorproxy.Res_VerifySession
	4,  // 23: pb_operatorproxy.OperatorProxySrv.CashGet:output_type -> pb_operatorproxy.Res_CashGet
	6,  // 24: pb_operatorproxy.OperatorProxySrv.CashAdd:output_type -> pb_operatorproxy.Res_CashAdd
	8,  // 25: pb_operatorproxy.OperatorProxySrv.CashSub:output_type -> pb_operatorproxy.Res_CashSub
	10, // 26: pb_operatorproxy.OperatorProxySrv.CashAdjustment:output_type -> pb_operatorproxy.Res_CashAdjustment
	12, // 27: pb_operatorproxy.OperatorProxySrv.VerifyOperator:output_type -> pb_operatorproxy.Res_VerifyOperator
	20, // 28: pb_operatorproxy.OperatorProxySrv.GetOperatorKey:output_type -> pb_operatorproxy.Res_GetOperatorKey
	16, // 29: pb_operatorproxy.OperatorProxySrv.CurrencyLevel:output_type -> pb_operatorproxy.Res_CurrencyLevel
	18, // 30: pb_operatorproxy.OperatorProxySrv.TestVerifySession:output_type -> pb_operatorproxy.Res_Test
	18, // 31: pb_operatorproxy.OperatorProxySrv.TestCashGet:output_type -> pb_operatorproxy.Res_Test
	18, // 32: pb_operatorproxy.OperatorProxySrv.TestCashAdd:output_type -> pb_operatorproxy.Res_Test
	18, // 33: pb_operatorproxy.OperatorProxySrv.TestCashSub:output_type -> pb_operatorproxy.Res_Test
	18, // 34: pb_operatorproxy.OperatorProxySrv.TestBadAction:output_type -> pb_operatorproxy.Res_Test
	18, // 35: pb_operatorproxy.OperatorProxySrv.TestEcho:output_type -> pb_operatorproxy.Res_Test
	22, // [22:36] is the sub-list for method output_type
	8,  // [8:22] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_operatorproxy_srv_proto_init() }
func file_operatorproxy_srv_proto_init() {
	if File_operatorproxy_srv_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_operatorproxy_srv_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res_Ok); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req_VerifySession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res_VerifySession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req_CashGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res_CashGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req_CashAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res_CashAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req_CashSub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res_CashSub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req_CashAdjustment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res_CashAdjustment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req_VerifyOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res_VerifyOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req_BetLevels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res_BetLevels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req_CurrencyLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res_CurrencyLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req_Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res_Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req_GetOperatorKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operatorproxy_srv_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res_GetOperatorKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_operatorproxy_srv_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_operatorproxy_srv_proto_goTypes,
		DependencyIndexes: file_operatorproxy_srv_proto_depIdxs,
		MessageInfos:      file_operatorproxy_srv_proto_msgTypes,
	}.Build()
	File_operatorproxy_srv_proto = out.File
	file_operatorproxy_srv_proto_rawDesc = nil
	file_operatorproxy_srv_proto_goTypes = nil
	file_operatorproxy_srv_proto_depIdxs = nil
}
