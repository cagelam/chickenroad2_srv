// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: conn_gw.proto

package pb_conn_srv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnGwServiceClient is the client API for ConnGwService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnGwServiceClient interface {
	// 单播：向某个用户发送一条消息
	Unicast(ctx context.Context, in *UnicastRequest, opts ...grpc.CallOption) (*UnicastResponse, error)
	// 广播：向一组目标（所有/用户列表/房间/标签）发送消息
	Broadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastResponse, error)
}

type connGwServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnGwServiceClient(cc grpc.ClientConnInterface) ConnGwServiceClient {
	return &connGwServiceClient{cc}
}

func (c *connGwServiceClient) Unicast(ctx context.Context, in *UnicastRequest, opts ...grpc.CallOption) (*UnicastResponse, error) {
	out := new(UnicastResponse)
	err := c.cc.Invoke(ctx, "/conn_srv.ConnGwService/Unicast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connGwServiceClient) Broadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastResponse, error) {
	out := new(BroadcastResponse)
	err := c.cc.Invoke(ctx, "/conn_srv.ConnGwService/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnGwServiceServer is the server API for ConnGwService service.
// All implementations must embed UnimplementedConnGwServiceServer
// for forward compatibility
type ConnGwServiceServer interface {
	// 单播：向某个用户发送一条消息
	Unicast(context.Context, *UnicastRequest) (*UnicastResponse, error)
	// 广播：向一组目标（所有/用户列表/房间/标签）发送消息
	Broadcast(context.Context, *BroadcastRequest) (*BroadcastResponse, error)
	mustEmbedUnimplementedConnGwServiceServer()
}

// UnimplementedConnGwServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConnGwServiceServer struct {
}

func (UnimplementedConnGwServiceServer) Unicast(context.Context, *UnicastRequest) (*UnicastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unicast not implemented")
}
func (UnimplementedConnGwServiceServer) Broadcast(context.Context, *BroadcastRequest) (*BroadcastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedConnGwServiceServer) mustEmbedUnimplementedConnGwServiceServer() {}

// UnsafeConnGwServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnGwServiceServer will
// result in compilation errors.
type UnsafeConnGwServiceServer interface {
	mustEmbedUnimplementedConnGwServiceServer()
}

func RegisterConnGwServiceServer(s grpc.ServiceRegistrar, srv ConnGwServiceServer) {
	s.RegisterService(&ConnGwService_ServiceDesc, srv)
}

func _ConnGwService_Unicast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnicastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnGwServiceServer).Unicast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conn_srv.ConnGwService/Unicast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnGwServiceServer).Unicast(ctx, req.(*UnicastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnGwService_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnGwServiceServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conn_srv.ConnGwService/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnGwServiceServer).Broadcast(ctx, req.(*BroadcastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnGwService_ServiceDesc is the grpc.ServiceDesc for ConnGwService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnGwService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "conn_srv.ConnGwService",
	HandlerType: (*ConnGwServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unicast",
			Handler:    _ConnGwService_Unicast_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _ConnGwService_Broadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conn_gw.proto",
}
