// Code generated by goctl. DO NOT EDIT.
// Source: conn_gw.proto

package conngwservice

import (
	"context"

	"cocogame-max/chickenroad2_srv/proto/conn_gw/pb_conn_srv"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BroadcastRequest  = pb_conn_srv.BroadcastRequest
	BroadcastResponse = pb_conn_srv.BroadcastResponse
	UnicastRequest    = pb_conn_srv.UnicastRequest
	UnicastResponse   = pb_conn_srv.UnicastResponse

	ConnGwService interface {
		// 单播：向某个用户发送一条消息
		Unicast(ctx context.Context, in *UnicastRequest, opts ...grpc.CallOption) (*UnicastResponse, error)
		// 广播：向一组目标（所有/用户列表/房间/标签）发送消息
		Broadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastResponse, error)
	}

	defaultConnGwService struct {
		cli zrpc.Client
	}
)

func NewConnGwService(cli zrpc.Client) ConnGwService {
	return &defaultConnGwService{
		cli: cli,
	}
}

// 单播：向某个用户发送一条消息
func (m *defaultConnGwService) Unicast(ctx context.Context, in *UnicastRequest, opts ...grpc.CallOption) (*UnicastResponse, error) {
	client := pb_conn_srv.NewConnGwServiceClient(m.cli.Conn())
	return client.Unicast(ctx, in, opts...)
}

// 广播：向一组目标（所有/用户列表/房间/标签）发送消息
func (m *defaultConnGwService) Broadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastResponse, error) {
	client := pb_conn_srv.NewConnGwServiceClient(m.cli.Conn())
	return client.Broadcast(ctx, in, opts...)
}
