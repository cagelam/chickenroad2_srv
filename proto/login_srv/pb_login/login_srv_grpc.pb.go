// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: login_srv.proto

package pb_login

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoginSrvClient is the client API for LoginSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginSrvClient interface {
	Login(ctx context.Context, in *Req_Login, opts ...grpc.CallOption) (*Res_Login, error)
	Alive(ctx context.Context, in *Req_Alive, opts ...grpc.CallOption) (*Res_Alive, error)
}

type loginSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginSrvClient(cc grpc.ClientConnInterface) LoginSrvClient {
	return &loginSrvClient{cc}
}

func (c *loginSrvClient) Login(ctx context.Context, in *Req_Login, opts ...grpc.CallOption) (*Res_Login, error) {
	out := new(Res_Login)
	err := c.cc.Invoke(ctx, "/pb_login.LoginSrv/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginSrvClient) Alive(ctx context.Context, in *Req_Alive, opts ...grpc.CallOption) (*Res_Alive, error) {
	out := new(Res_Alive)
	err := c.cc.Invoke(ctx, "/pb_login.LoginSrv/Alive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginSrvServer is the server API for LoginSrv service.
// All implementations must embed UnimplementedLoginSrvServer
// for forward compatibility
type LoginSrvServer interface {
	Login(context.Context, *Req_Login) (*Res_Login, error)
	Alive(context.Context, *Req_Alive) (*Res_Alive, error)
	mustEmbedUnimplementedLoginSrvServer()
}

// UnimplementedLoginSrvServer must be embedded to have forward compatible implementations.
type UnimplementedLoginSrvServer struct {
}

func (UnimplementedLoginSrvServer) Login(context.Context, *Req_Login) (*Res_Login, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedLoginSrvServer) Alive(context.Context, *Req_Alive) (*Res_Alive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alive not implemented")
}
func (UnimplementedLoginSrvServer) mustEmbedUnimplementedLoginSrvServer() {}

// UnsafeLoginSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginSrvServer will
// result in compilation errors.
type UnsafeLoginSrvServer interface {
	mustEmbedUnimplementedLoginSrvServer()
}

func RegisterLoginSrvServer(s grpc.ServiceRegistrar, srv LoginSrvServer) {
	s.RegisterService(&LoginSrv_ServiceDesc, srv)
}

func _LoginSrv_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_Login)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginSrvServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_login.LoginSrv/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginSrvServer).Login(ctx, req.(*Req_Login))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginSrv_Alive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_Alive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginSrvServer).Alive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_login.LoginSrv/Alive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginSrvServer).Alive(ctx, req.(*Req_Alive))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginSrv_ServiceDesc is the grpc.ServiceDesc for LoginSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb_login.LoginSrv",
	HandlerType: (*LoginSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _LoginSrv_Login_Handler,
		},
		{
			MethodName: "Alive",
			Handler:    _LoginSrv_Alive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "login_srv.proto",
}
