// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: playercenter_srv.proto

package pb_playercenter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlayerCenterSrvClient is the client API for PlayerCenterSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerCenterSrvClient interface {
	Login(ctx context.Context, in *Req_Login, opts ...grpc.CallOption) (*Res_Login, error)
	GetSessionId(ctx context.Context, in *Req_GetSessionId, opts ...grpc.CallOption) (*Res_GetSessionId, error)
	Alive(ctx context.Context, in *Req_Alive, opts ...grpc.CallOption) (*Res_Alive, error)
	NewAccount(ctx context.Context, in *Req_Account, opts ...grpc.CallOption) (*Res_SetAccount, error)
	Eliminate(ctx context.Context, in *Req_Account, opts ...grpc.CallOption) (*Res_SetAccount, error)
	Ban(ctx context.Context, in *Req_Account, opts ...grpc.CallOption) (*Res_SetAccount, error)
	Unseal(ctx context.Context, in *Req_Account, opts ...grpc.CallOption) (*Res_SetAccount, error)
	Status(ctx context.Context, in *Req_Account, opts ...grpc.CallOption) (*Res_AccountStatus, error)
	IsExisted(ctx context.Context, in *Req_IsExisted, opts ...grpc.CallOption) (*Res_IsExisted, error)
	GetOperatorRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetOperatorRole, error)
	GetDoggyRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetDoggyRole, error)
	SetDoggyRole(ctx context.Context, in *Req_SetDoggyRole, opts ...grpc.CallOption) (*Res_SetRole, error)
	GetServerSeed(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetSeed, error)
	GetMoneytrainRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetMoneytrainRole, error)
	SetMoneytrainRole(ctx context.Context, in *Req_SetMoneytrainRole, opts ...grpc.CallOption) (*Res_SetRole, error)
	GetDragonSlayerRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetDragonSlayerRole, error)
	SetDragonSlayerRole(ctx context.Context, in *Req_SetDragonSlayerRole, opts ...grpc.CallOption) (*Res_SetRole, error)
	GetWantedRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetWantedRole, error)
	SetWantedRole(ctx context.Context, in *Req_SetWantedRole, opts ...grpc.CallOption) (*Res_SetRole, error)
	GetMagicalMineRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetMagicalMineRole, error)
	SetMagicalMineRole(ctx context.Context, in *Req_SetMagicalMineRole, opts ...grpc.CallOption) (*Res_SetRole, error)
	GetJacksCryptRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetJacksCryptRole, error)
	SetJacksCryptRole(ctx context.Context, in *Req_SetJacksCryptRole, opts ...grpc.CallOption) (*Res_SetRole, error)
	GetBigBassRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetBigBassRole, error)
	SetBigBassRole(ctx context.Context, in *Req_SetBigBassRole, opts ...grpc.CallOption) (*Res_SetRole, error)
	GetHandOfAnubisRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetHandOfAnubisRole, error)
	SetHandOfAnubisRole(ctx context.Context, in *Req_SetHandOfAnubisRole, opts ...grpc.CallOption) (*Res_SetRole, error)
	GetDragonRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetDragonRole, error)
	SetDragonRole(ctx context.Context, in *Req_SetDragonRole, opts ...grpc.CallOption) (*Res_SetRole, error)
	GetJohnWildRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetJohnWildRole, error)
	SetJohnWildRole(ctx context.Context, in *Req_SetJohnWildRole, opts ...grpc.CallOption) (*Res_SetRole, error)
	GetRipCityRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetRipCityRole, error)
	SetRipCityRole(ctx context.Context, in *Req_SetRipCityRole, opts ...grpc.CallOption) (*Res_SetRole, error)
	GetWarriorWaysRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetWarriorWaysRole, error)
	SetWarriorWaysRole(ctx context.Context, in *Req_SetWarriorWaysRole, opts ...grpc.CallOption) (*Res_SetRole, error)
	GetJellyRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetJellyRole, error)
	SetJellyRole(ctx context.Context, in *Req_SetJellyRole, opts ...grpc.CallOption) (*Res_SetRole, error)
	GetRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetRole, error)
	SetRole(ctx context.Context, in *Req_SetRole, opts ...grpc.CallOption) (*Res_SetRole, error)
}

type playerCenterSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerCenterSrvClient(cc grpc.ClientConnInterface) PlayerCenterSrvClient {
	return &playerCenterSrvClient{cc}
}

func (c *playerCenterSrvClient) Login(ctx context.Context, in *Req_Login, opts ...grpc.CallOption) (*Res_Login, error) {
	out := new(Res_Login)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) GetSessionId(ctx context.Context, in *Req_GetSessionId, opts ...grpc.CallOption) (*Res_GetSessionId, error) {
	out := new(Res_GetSessionId)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/GetSessionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) Alive(ctx context.Context, in *Req_Alive, opts ...grpc.CallOption) (*Res_Alive, error) {
	out := new(Res_Alive)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/Alive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) NewAccount(ctx context.Context, in *Req_Account, opts ...grpc.CallOption) (*Res_SetAccount, error) {
	out := new(Res_SetAccount)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/NewAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) Eliminate(ctx context.Context, in *Req_Account, opts ...grpc.CallOption) (*Res_SetAccount, error) {
	out := new(Res_SetAccount)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/Eliminate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) Ban(ctx context.Context, in *Req_Account, opts ...grpc.CallOption) (*Res_SetAccount, error) {
	out := new(Res_SetAccount)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/Ban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) Unseal(ctx context.Context, in *Req_Account, opts ...grpc.CallOption) (*Res_SetAccount, error) {
	out := new(Res_SetAccount)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/Unseal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) Status(ctx context.Context, in *Req_Account, opts ...grpc.CallOption) (*Res_AccountStatus, error) {
	out := new(Res_AccountStatus)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) IsExisted(ctx context.Context, in *Req_IsExisted, opts ...grpc.CallOption) (*Res_IsExisted, error) {
	out := new(Res_IsExisted)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/IsExisted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) GetOperatorRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetOperatorRole, error) {
	out := new(Res_GetOperatorRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/GetOperatorRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) GetDoggyRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetDoggyRole, error) {
	out := new(Res_GetDoggyRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/GetDoggyRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) SetDoggyRole(ctx context.Context, in *Req_SetDoggyRole, opts ...grpc.CallOption) (*Res_SetRole, error) {
	out := new(Res_SetRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/SetDoggyRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) GetServerSeed(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetSeed, error) {
	out := new(Res_GetSeed)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/GetServerSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) GetMoneytrainRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetMoneytrainRole, error) {
	out := new(Res_GetMoneytrainRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/GetMoneytrainRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) SetMoneytrainRole(ctx context.Context, in *Req_SetMoneytrainRole, opts ...grpc.CallOption) (*Res_SetRole, error) {
	out := new(Res_SetRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/SetMoneytrainRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) GetDragonSlayerRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetDragonSlayerRole, error) {
	out := new(Res_GetDragonSlayerRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/GetDragonSlayerRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) SetDragonSlayerRole(ctx context.Context, in *Req_SetDragonSlayerRole, opts ...grpc.CallOption) (*Res_SetRole, error) {
	out := new(Res_SetRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/SetDragonSlayerRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) GetWantedRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetWantedRole, error) {
	out := new(Res_GetWantedRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/GetWantedRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) SetWantedRole(ctx context.Context, in *Req_SetWantedRole, opts ...grpc.CallOption) (*Res_SetRole, error) {
	out := new(Res_SetRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/SetWantedRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) GetMagicalMineRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetMagicalMineRole, error) {
	out := new(Res_GetMagicalMineRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/GetMagicalMineRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) SetMagicalMineRole(ctx context.Context, in *Req_SetMagicalMineRole, opts ...grpc.CallOption) (*Res_SetRole, error) {
	out := new(Res_SetRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/SetMagicalMineRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) GetJacksCryptRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetJacksCryptRole, error) {
	out := new(Res_GetJacksCryptRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/GetJacksCryptRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) SetJacksCryptRole(ctx context.Context, in *Req_SetJacksCryptRole, opts ...grpc.CallOption) (*Res_SetRole, error) {
	out := new(Res_SetRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/SetJacksCryptRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) GetBigBassRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetBigBassRole, error) {
	out := new(Res_GetBigBassRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/GetBigBassRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) SetBigBassRole(ctx context.Context, in *Req_SetBigBassRole, opts ...grpc.CallOption) (*Res_SetRole, error) {
	out := new(Res_SetRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/SetBigBassRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) GetHandOfAnubisRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetHandOfAnubisRole, error) {
	out := new(Res_GetHandOfAnubisRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/GetHandOfAnubisRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) SetHandOfAnubisRole(ctx context.Context, in *Req_SetHandOfAnubisRole, opts ...grpc.CallOption) (*Res_SetRole, error) {
	out := new(Res_SetRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/SetHandOfAnubisRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) GetDragonRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetDragonRole, error) {
	out := new(Res_GetDragonRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/GetDragonRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) SetDragonRole(ctx context.Context, in *Req_SetDragonRole, opts ...grpc.CallOption) (*Res_SetRole, error) {
	out := new(Res_SetRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/SetDragonRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) GetJohnWildRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetJohnWildRole, error) {
	out := new(Res_GetJohnWildRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/GetJohnWildRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) SetJohnWildRole(ctx context.Context, in *Req_SetJohnWildRole, opts ...grpc.CallOption) (*Res_SetRole, error) {
	out := new(Res_SetRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/SetJohnWildRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) GetRipCityRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetRipCityRole, error) {
	out := new(Res_GetRipCityRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/GetRipCityRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) SetRipCityRole(ctx context.Context, in *Req_SetRipCityRole, opts ...grpc.CallOption) (*Res_SetRole, error) {
	out := new(Res_SetRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/SetRipCityRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) GetWarriorWaysRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetWarriorWaysRole, error) {
	out := new(Res_GetWarriorWaysRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/GetWarriorWaysRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) SetWarriorWaysRole(ctx context.Context, in *Req_SetWarriorWaysRole, opts ...grpc.CallOption) (*Res_SetRole, error) {
	out := new(Res_SetRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/SetWarriorWaysRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) GetJellyRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetJellyRole, error) {
	out := new(Res_GetJellyRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/GetJellyRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) SetJellyRole(ctx context.Context, in *Req_SetJellyRole, opts ...grpc.CallOption) (*Res_SetRole, error) {
	out := new(Res_SetRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/SetJellyRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) GetRole(ctx context.Context, in *Req_GetRole, opts ...grpc.CallOption) (*Res_GetRole, error) {
	out := new(Res_GetRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerCenterSrvClient) SetRole(ctx context.Context, in *Req_SetRole, opts ...grpc.CallOption) (*Res_SetRole, error) {
	out := new(Res_SetRole)
	err := c.cc.Invoke(ctx, "/pb_playercenter.PlayerCenterSrv/SetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerCenterSrvServer is the server API for PlayerCenterSrv service.
// All implementations must embed UnimplementedPlayerCenterSrvServer
// for forward compatibility
type PlayerCenterSrvServer interface {
	Login(context.Context, *Req_Login) (*Res_Login, error)
	GetSessionId(context.Context, *Req_GetSessionId) (*Res_GetSessionId, error)
	Alive(context.Context, *Req_Alive) (*Res_Alive, error)
	NewAccount(context.Context, *Req_Account) (*Res_SetAccount, error)
	Eliminate(context.Context, *Req_Account) (*Res_SetAccount, error)
	Ban(context.Context, *Req_Account) (*Res_SetAccount, error)
	Unseal(context.Context, *Req_Account) (*Res_SetAccount, error)
	Status(context.Context, *Req_Account) (*Res_AccountStatus, error)
	IsExisted(context.Context, *Req_IsExisted) (*Res_IsExisted, error)
	GetOperatorRole(context.Context, *Req_GetRole) (*Res_GetOperatorRole, error)
	GetDoggyRole(context.Context, *Req_GetRole) (*Res_GetDoggyRole, error)
	SetDoggyRole(context.Context, *Req_SetDoggyRole) (*Res_SetRole, error)
	GetServerSeed(context.Context, *Req_GetRole) (*Res_GetSeed, error)
	GetMoneytrainRole(context.Context, *Req_GetRole) (*Res_GetMoneytrainRole, error)
	SetMoneytrainRole(context.Context, *Req_SetMoneytrainRole) (*Res_SetRole, error)
	GetDragonSlayerRole(context.Context, *Req_GetRole) (*Res_GetDragonSlayerRole, error)
	SetDragonSlayerRole(context.Context, *Req_SetDragonSlayerRole) (*Res_SetRole, error)
	GetWantedRole(context.Context, *Req_GetRole) (*Res_GetWantedRole, error)
	SetWantedRole(context.Context, *Req_SetWantedRole) (*Res_SetRole, error)
	GetMagicalMineRole(context.Context, *Req_GetRole) (*Res_GetMagicalMineRole, error)
	SetMagicalMineRole(context.Context, *Req_SetMagicalMineRole) (*Res_SetRole, error)
	GetJacksCryptRole(context.Context, *Req_GetRole) (*Res_GetJacksCryptRole, error)
	SetJacksCryptRole(context.Context, *Req_SetJacksCryptRole) (*Res_SetRole, error)
	GetBigBassRole(context.Context, *Req_GetRole) (*Res_GetBigBassRole, error)
	SetBigBassRole(context.Context, *Req_SetBigBassRole) (*Res_SetRole, error)
	GetHandOfAnubisRole(context.Context, *Req_GetRole) (*Res_GetHandOfAnubisRole, error)
	SetHandOfAnubisRole(context.Context, *Req_SetHandOfAnubisRole) (*Res_SetRole, error)
	GetDragonRole(context.Context, *Req_GetRole) (*Res_GetDragonRole, error)
	SetDragonRole(context.Context, *Req_SetDragonRole) (*Res_SetRole, error)
	GetJohnWildRole(context.Context, *Req_GetRole) (*Res_GetJohnWildRole, error)
	SetJohnWildRole(context.Context, *Req_SetJohnWildRole) (*Res_SetRole, error)
	GetRipCityRole(context.Context, *Req_GetRole) (*Res_GetRipCityRole, error)
	SetRipCityRole(context.Context, *Req_SetRipCityRole) (*Res_SetRole, error)
	GetWarriorWaysRole(context.Context, *Req_GetRole) (*Res_GetWarriorWaysRole, error)
	SetWarriorWaysRole(context.Context, *Req_SetWarriorWaysRole) (*Res_SetRole, error)
	GetJellyRole(context.Context, *Req_GetRole) (*Res_GetJellyRole, error)
	SetJellyRole(context.Context, *Req_SetJellyRole) (*Res_SetRole, error)
	GetRole(context.Context, *Req_GetRole) (*Res_GetRole, error)
	SetRole(context.Context, *Req_SetRole) (*Res_SetRole, error)
	mustEmbedUnimplementedPlayerCenterSrvServer()
}

// UnimplementedPlayerCenterSrvServer must be embedded to have forward compatible implementations.
type UnimplementedPlayerCenterSrvServer struct {
}

func (UnimplementedPlayerCenterSrvServer) Login(context.Context, *Req_Login) (*Res_Login, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedPlayerCenterSrvServer) GetSessionId(context.Context, *Req_GetSessionId) (*Res_GetSessionId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionId not implemented")
}
func (UnimplementedPlayerCenterSrvServer) Alive(context.Context, *Req_Alive) (*Res_Alive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alive not implemented")
}
func (UnimplementedPlayerCenterSrvServer) NewAccount(context.Context, *Req_Account) (*Res_SetAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAccount not implemented")
}
func (UnimplementedPlayerCenterSrvServer) Eliminate(context.Context, *Req_Account) (*Res_SetAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Eliminate not implemented")
}
func (UnimplementedPlayerCenterSrvServer) Ban(context.Context, *Req_Account) (*Res_SetAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ban not implemented")
}
func (UnimplementedPlayerCenterSrvServer) Unseal(context.Context, *Req_Account) (*Res_SetAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unseal not implemented")
}
func (UnimplementedPlayerCenterSrvServer) Status(context.Context, *Req_Account) (*Res_AccountStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedPlayerCenterSrvServer) IsExisted(context.Context, *Req_IsExisted) (*Res_IsExisted, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExisted not implemented")
}
func (UnimplementedPlayerCenterSrvServer) GetOperatorRole(context.Context, *Req_GetRole) (*Res_GetOperatorRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) GetDoggyRole(context.Context, *Req_GetRole) (*Res_GetDoggyRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoggyRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) SetDoggyRole(context.Context, *Req_SetDoggyRole) (*Res_SetRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDoggyRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) GetServerSeed(context.Context, *Req_GetRole) (*Res_GetSeed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerSeed not implemented")
}
func (UnimplementedPlayerCenterSrvServer) GetMoneytrainRole(context.Context, *Req_GetRole) (*Res_GetMoneytrainRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoneytrainRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) SetMoneytrainRole(context.Context, *Req_SetMoneytrainRole) (*Res_SetRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMoneytrainRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) GetDragonSlayerRole(context.Context, *Req_GetRole) (*Res_GetDragonSlayerRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDragonSlayerRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) SetDragonSlayerRole(context.Context, *Req_SetDragonSlayerRole) (*Res_SetRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDragonSlayerRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) GetWantedRole(context.Context, *Req_GetRole) (*Res_GetWantedRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWantedRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) SetWantedRole(context.Context, *Req_SetWantedRole) (*Res_SetRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWantedRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) GetMagicalMineRole(context.Context, *Req_GetRole) (*Res_GetMagicalMineRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMagicalMineRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) SetMagicalMineRole(context.Context, *Req_SetMagicalMineRole) (*Res_SetRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMagicalMineRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) GetJacksCryptRole(context.Context, *Req_GetRole) (*Res_GetJacksCryptRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJacksCryptRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) SetJacksCryptRole(context.Context, *Req_SetJacksCryptRole) (*Res_SetRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJacksCryptRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) GetBigBassRole(context.Context, *Req_GetRole) (*Res_GetBigBassRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBigBassRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) SetBigBassRole(context.Context, *Req_SetBigBassRole) (*Res_SetRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBigBassRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) GetHandOfAnubisRole(context.Context, *Req_GetRole) (*Res_GetHandOfAnubisRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHandOfAnubisRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) SetHandOfAnubisRole(context.Context, *Req_SetHandOfAnubisRole) (*Res_SetRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHandOfAnubisRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) GetDragonRole(context.Context, *Req_GetRole) (*Res_GetDragonRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDragonRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) SetDragonRole(context.Context, *Req_SetDragonRole) (*Res_SetRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDragonRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) GetJohnWildRole(context.Context, *Req_GetRole) (*Res_GetJohnWildRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJohnWildRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) SetJohnWildRole(context.Context, *Req_SetJohnWildRole) (*Res_SetRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJohnWildRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) GetRipCityRole(context.Context, *Req_GetRole) (*Res_GetRipCityRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRipCityRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) SetRipCityRole(context.Context, *Req_SetRipCityRole) (*Res_SetRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRipCityRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) GetWarriorWaysRole(context.Context, *Req_GetRole) (*Res_GetWarriorWaysRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWarriorWaysRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) SetWarriorWaysRole(context.Context, *Req_SetWarriorWaysRole) (*Res_SetRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWarriorWaysRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) GetJellyRole(context.Context, *Req_GetRole) (*Res_GetJellyRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJellyRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) SetJellyRole(context.Context, *Req_SetJellyRole) (*Res_SetRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJellyRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) GetRole(context.Context, *Req_GetRole) (*Res_GetRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) SetRole(context.Context, *Req_SetRole) (*Res_SetRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRole not implemented")
}
func (UnimplementedPlayerCenterSrvServer) mustEmbedUnimplementedPlayerCenterSrvServer() {}

// UnsafePlayerCenterSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerCenterSrvServer will
// result in compilation errors.
type UnsafePlayerCenterSrvServer interface {
	mustEmbedUnimplementedPlayerCenterSrvServer()
}

func RegisterPlayerCenterSrvServer(s grpc.ServiceRegistrar, srv PlayerCenterSrvServer) {
	s.RegisterService(&PlayerCenterSrv_ServiceDesc, srv)
}

func _PlayerCenterSrv_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_Login)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).Login(ctx, req.(*Req_Login))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_GetSessionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetSessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).GetSessionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/GetSessionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).GetSessionId(ctx, req.(*Req_GetSessionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_Alive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_Alive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).Alive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/Alive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).Alive(ctx, req.(*Req_Alive))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).NewAccount(ctx, req.(*Req_Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_Eliminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).Eliminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/Eliminate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).Eliminate(ctx, req.(*Req_Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_Ban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).Ban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/Ban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).Ban(ctx, req.(*Req_Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_Unseal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).Unseal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/Unseal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).Unseal(ctx, req.(*Req_Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).Status(ctx, req.(*Req_Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_IsExisted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_IsExisted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).IsExisted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/IsExisted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).IsExisted(ctx, req.(*Req_IsExisted))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_GetOperatorRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).GetOperatorRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/GetOperatorRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).GetOperatorRole(ctx, req.(*Req_GetRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_GetDoggyRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).GetDoggyRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/GetDoggyRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).GetDoggyRole(ctx, req.(*Req_GetRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_SetDoggyRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_SetDoggyRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).SetDoggyRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/SetDoggyRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).SetDoggyRole(ctx, req.(*Req_SetDoggyRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_GetServerSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).GetServerSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/GetServerSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).GetServerSeed(ctx, req.(*Req_GetRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_GetMoneytrainRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).GetMoneytrainRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/GetMoneytrainRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).GetMoneytrainRole(ctx, req.(*Req_GetRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_SetMoneytrainRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_SetMoneytrainRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).SetMoneytrainRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/SetMoneytrainRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).SetMoneytrainRole(ctx, req.(*Req_SetMoneytrainRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_GetDragonSlayerRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).GetDragonSlayerRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/GetDragonSlayerRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).GetDragonSlayerRole(ctx, req.(*Req_GetRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_SetDragonSlayerRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_SetDragonSlayerRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).SetDragonSlayerRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/SetDragonSlayerRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).SetDragonSlayerRole(ctx, req.(*Req_SetDragonSlayerRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_GetWantedRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).GetWantedRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/GetWantedRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).GetWantedRole(ctx, req.(*Req_GetRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_SetWantedRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_SetWantedRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).SetWantedRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/SetWantedRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).SetWantedRole(ctx, req.(*Req_SetWantedRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_GetMagicalMineRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).GetMagicalMineRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/GetMagicalMineRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).GetMagicalMineRole(ctx, req.(*Req_GetRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_SetMagicalMineRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_SetMagicalMineRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).SetMagicalMineRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/SetMagicalMineRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).SetMagicalMineRole(ctx, req.(*Req_SetMagicalMineRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_GetJacksCryptRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).GetJacksCryptRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/GetJacksCryptRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).GetJacksCryptRole(ctx, req.(*Req_GetRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_SetJacksCryptRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_SetJacksCryptRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).SetJacksCryptRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/SetJacksCryptRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).SetJacksCryptRole(ctx, req.(*Req_SetJacksCryptRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_GetBigBassRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).GetBigBassRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/GetBigBassRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).GetBigBassRole(ctx, req.(*Req_GetRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_SetBigBassRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_SetBigBassRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).SetBigBassRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/SetBigBassRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).SetBigBassRole(ctx, req.(*Req_SetBigBassRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_GetHandOfAnubisRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).GetHandOfAnubisRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/GetHandOfAnubisRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).GetHandOfAnubisRole(ctx, req.(*Req_GetRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_SetHandOfAnubisRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_SetHandOfAnubisRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).SetHandOfAnubisRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/SetHandOfAnubisRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).SetHandOfAnubisRole(ctx, req.(*Req_SetHandOfAnubisRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_GetDragonRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).GetDragonRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/GetDragonRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).GetDragonRole(ctx, req.(*Req_GetRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_SetDragonRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_SetDragonRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).SetDragonRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/SetDragonRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).SetDragonRole(ctx, req.(*Req_SetDragonRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_GetJohnWildRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).GetJohnWildRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/GetJohnWildRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).GetJohnWildRole(ctx, req.(*Req_GetRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_SetJohnWildRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_SetJohnWildRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).SetJohnWildRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/SetJohnWildRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).SetJohnWildRole(ctx, req.(*Req_SetJohnWildRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_GetRipCityRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).GetRipCityRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/GetRipCityRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).GetRipCityRole(ctx, req.(*Req_GetRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_SetRipCityRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_SetRipCityRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).SetRipCityRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/SetRipCityRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).SetRipCityRole(ctx, req.(*Req_SetRipCityRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_GetWarriorWaysRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).GetWarriorWaysRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/GetWarriorWaysRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).GetWarriorWaysRole(ctx, req.(*Req_GetRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_SetWarriorWaysRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_SetWarriorWaysRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).SetWarriorWaysRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/SetWarriorWaysRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).SetWarriorWaysRole(ctx, req.(*Req_SetWarriorWaysRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_GetJellyRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).GetJellyRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/GetJellyRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).GetJellyRole(ctx, req.(*Req_GetRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_SetJellyRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_SetJellyRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).SetJellyRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/SetJellyRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).SetJellyRole(ctx, req.(*Req_SetJellyRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_GetRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).GetRole(ctx, req.(*Req_GetRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerCenterSrv_SetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req_SetRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerCenterSrvServer).SetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_playercenter.PlayerCenterSrv/SetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerCenterSrvServer).SetRole(ctx, req.(*Req_SetRole))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayerCenterSrv_ServiceDesc is the grpc.ServiceDesc for PlayerCenterSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerCenterSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb_playercenter.PlayerCenterSrv",
	HandlerType: (*PlayerCenterSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _PlayerCenterSrv_Login_Handler,
		},
		{
			MethodName: "GetSessionId",
			Handler:    _PlayerCenterSrv_GetSessionId_Handler,
		},
		{
			MethodName: "Alive",
			Handler:    _PlayerCenterSrv_Alive_Handler,
		},
		{
			MethodName: "NewAccount",
			Handler:    _PlayerCenterSrv_NewAccount_Handler,
		},
		{
			MethodName: "Eliminate",
			Handler:    _PlayerCenterSrv_Eliminate_Handler,
		},
		{
			MethodName: "Ban",
			Handler:    _PlayerCenterSrv_Ban_Handler,
		},
		{
			MethodName: "Unseal",
			Handler:    _PlayerCenterSrv_Unseal_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _PlayerCenterSrv_Status_Handler,
		},
		{
			MethodName: "IsExisted",
			Handler:    _PlayerCenterSrv_IsExisted_Handler,
		},
		{
			MethodName: "GetOperatorRole",
			Handler:    _PlayerCenterSrv_GetOperatorRole_Handler,
		},
		{
			MethodName: "GetDoggyRole",
			Handler:    _PlayerCenterSrv_GetDoggyRole_Handler,
		},
		{
			MethodName: "SetDoggyRole",
			Handler:    _PlayerCenterSrv_SetDoggyRole_Handler,
		},
		{
			MethodName: "GetServerSeed",
			Handler:    _PlayerCenterSrv_GetServerSeed_Handler,
		},
		{
			MethodName: "GetMoneytrainRole",
			Handler:    _PlayerCenterSrv_GetMoneytrainRole_Handler,
		},
		{
			MethodName: "SetMoneytrainRole",
			Handler:    _PlayerCenterSrv_SetMoneytrainRole_Handler,
		},
		{
			MethodName: "GetDragonSlayerRole",
			Handler:    _PlayerCenterSrv_GetDragonSlayerRole_Handler,
		},
		{
			MethodName: "SetDragonSlayerRole",
			Handler:    _PlayerCenterSrv_SetDragonSlayerRole_Handler,
		},
		{
			MethodName: "GetWantedRole",
			Handler:    _PlayerCenterSrv_GetWantedRole_Handler,
		},
		{
			MethodName: "SetWantedRole",
			Handler:    _PlayerCenterSrv_SetWantedRole_Handler,
		},
		{
			MethodName: "GetMagicalMineRole",
			Handler:    _PlayerCenterSrv_GetMagicalMineRole_Handler,
		},
		{
			MethodName: "SetMagicalMineRole",
			Handler:    _PlayerCenterSrv_SetMagicalMineRole_Handler,
		},
		{
			MethodName: "GetJacksCryptRole",
			Handler:    _PlayerCenterSrv_GetJacksCryptRole_Handler,
		},
		{
			MethodName: "SetJacksCryptRole",
			Handler:    _PlayerCenterSrv_SetJacksCryptRole_Handler,
		},
		{
			MethodName: "GetBigBassRole",
			Handler:    _PlayerCenterSrv_GetBigBassRole_Handler,
		},
		{
			MethodName: "SetBigBassRole",
			Handler:    _PlayerCenterSrv_SetBigBassRole_Handler,
		},
		{
			MethodName: "GetHandOfAnubisRole",
			Handler:    _PlayerCenterSrv_GetHandOfAnubisRole_Handler,
		},
		{
			MethodName: "SetHandOfAnubisRole",
			Handler:    _PlayerCenterSrv_SetHandOfAnubisRole_Handler,
		},
		{
			MethodName: "GetDragonRole",
			Handler:    _PlayerCenterSrv_GetDragonRole_Handler,
		},
		{
			MethodName: "SetDragonRole",
			Handler:    _PlayerCenterSrv_SetDragonRole_Handler,
		},
		{
			MethodName: "GetJohnWildRole",
			Handler:    _PlayerCenterSrv_GetJohnWildRole_Handler,
		},
		{
			MethodName: "SetJohnWildRole",
			Handler:    _PlayerCenterSrv_SetJohnWildRole_Handler,
		},
		{
			MethodName: "GetRipCityRole",
			Handler:    _PlayerCenterSrv_GetRipCityRole_Handler,
		},
		{
			MethodName: "SetRipCityRole",
			Handler:    _PlayerCenterSrv_SetRipCityRole_Handler,
		},
		{
			MethodName: "GetWarriorWaysRole",
			Handler:    _PlayerCenterSrv_GetWarriorWaysRole_Handler,
		},
		{
			MethodName: "SetWarriorWaysRole",
			Handler:    _PlayerCenterSrv_SetWarriorWaysRole_Handler,
		},
		{
			MethodName: "GetJellyRole",
			Handler:    _PlayerCenterSrv_GetJellyRole_Handler,
		},
		{
			MethodName: "SetJellyRole",
			Handler:    _PlayerCenterSrv_SetJellyRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _PlayerCenterSrv_GetRole_Handler,
		},
		{
			MethodName: "SetRole",
			Handler:    _PlayerCenterSrv_SetRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playercenter_srv.proto",
}
