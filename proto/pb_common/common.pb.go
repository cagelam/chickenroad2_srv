// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: common.proto

package pb_common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WinLine struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LineId        int32                  `protobuf:"varint,1,opt,name=LineId,proto3" json:"LineId,omitempty"`         // line id
	ElementNum    int32                  `protobuf:"varint,2,opt,name=ElementNum,proto3" json:"ElementNum,omitempty"` // Deprecaded: use `Num` instead
	Element       int32                  `protobuf:"varint,3,opt,name=Element,proto3" json:"Element,omitempty"`       // Deprecaded: use `Symbol` instead
	Score         float64                `protobuf:"fixed64,5,opt,name=Score,proto3" json:"Score,omitempty"`          // Score
	Multiple      int32                  `protobuf:"varint,6,opt,name=Multiple,proto3" json:"Multiple,omitempty"`     // Multiple, if multiple more than 1, this final line win = Score x Multiple
	Mesh          []int32                `protobuf:"varint,7,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`      // Index list
	Symbol        int32                  `protobuf:"varint,8,opt,name=Symbol,proto3" json:"Symbol,omitempty"`         // The symbol win
	Num           int32                  `protobuf:"varint,9,opt,name=Num,proto3" json:"Num,omitempty"`               // Number for symbol win
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WinLine) Reset() {
	*x = WinLine{}
	mi := &file_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WinLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinLine) ProtoMessage() {}

func (x *WinLine) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinLine.ProtoReflect.Descriptor instead.
func (*WinLine) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *WinLine) GetLineId() int32 {
	if x != nil {
		return x.LineId
	}
	return 0
}

func (x *WinLine) GetElementNum() int32 {
	if x != nil {
		return x.ElementNum
	}
	return 0
}

func (x *WinLine) GetElement() int32 {
	if x != nil {
		return x.Element
	}
	return 0
}

func (x *WinLine) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *WinLine) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *WinLine) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *WinLine) GetSymbol() int32 {
	if x != nil {
		return x.Symbol
	}
	return 0
}

func (x *WinLine) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type Jackpot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          int32                  `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`    //奖池类型
	Score         float64                `protobuf:"fixed64,2,opt,name=Score,proto3" json:"Score,omitempty"` //奖池
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Jackpot) Reset() {
	*x = Jackpot{}
	mi := &file_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Jackpot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jackpot) ProtoMessage() {}

func (x *Jackpot) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jackpot.ProtoReflect.Descriptor instead.
func (*Jackpot) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *Jackpot) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Jackpot) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

// 中将位置
type WinType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          int32                  `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`           //类型
	WildTimes     int32                  `protobuf:"varint,2,opt,name=WildTimes,proto3" json:"WildTimes,omitempty"` //wild倍数
	Num           int32                  `protobuf:"varint,3,opt,name=Num,proto3" json:"Num,omitempty"`             //数量
	Score         float64                `protobuf:"fixed64,4,opt,name=Score,proto3" json:"Score,omitempty"`
	Mesh          []int32                `protobuf:"varint,5,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	LineType      int32                  `protobuf:"varint,6,opt,name=LineType,proto3" json:"LineType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WinType) Reset() {
	*x = WinType{}
	mi := &file_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WinType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinType) ProtoMessage() {}

func (x *WinType) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinType.ProtoReflect.Descriptor instead.
func (*WinType) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *WinType) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *WinType) GetWildTimes() int32 {
	if x != nil {
		return x.WildTimes
	}
	return 0
}

func (x *WinType) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *WinType) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *WinType) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *WinType) GetLineType() int32 {
	if x != nil {
		return x.LineType
	}
	return 0
}

// General data model for 'VS'
type VS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`                      // index of vs symbol
	Symbol        int32                  `protobuf:"varint,2,opt,name=Symbol,proto3" json:"Symbol,omitempty"`                    // vs symbol
	Index1        int32                  `protobuf:"varint,3,opt,name=Index1,proto3" json:"Index1,omitempty"`                    // 1st index
	Multiplier1   int32                  `protobuf:"varint,5,opt,name=Multiplier1,proto3" json:"Multiplier1,omitempty"`          // 1st multiplier
	Index2        int32                  `protobuf:"varint,4,opt,name=Index2,proto3" json:"Index2,omitempty"`                    // 2nd index
	Multiplier2   int32                  `protobuf:"varint,6,opt,name=Multiplier2,proto3" json:"Multiplier2,omitempty"`          // 2nd multiplier
	WinIndex      int32                  `protobuf:"varint,7,opt,name=WinIndex,proto3" json:"WinIndex,omitempty"`                // win index
	WinMultiplier int32                  `protobuf:"varint,8,opt,name=WinMultiplier,proto3" json:"WinMultiplier,omitempty"`      // win multiplier
	ReplacedMesh  []int32                `protobuf:"varint,9,rep,packed,name=ReplacedMesh,proto3" json:"ReplacedMesh,omitempty"` // the mesh to be replaced
	TargetSymbol  int32                  `protobuf:"varint,10,opt,name=TargetSymbol,proto3" json:"TargetSymbol,omitempty"`       // target symbol to replace
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VS) Reset() {
	*x = VS{}
	mi := &file_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VS) ProtoMessage() {}

func (x *VS) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VS.ProtoReflect.Descriptor instead.
func (*VS) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *VS) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *VS) GetSymbol() int32 {
	if x != nil {
		return x.Symbol
	}
	return 0
}

func (x *VS) GetIndex1() int32 {
	if x != nil {
		return x.Index1
	}
	return 0
}

func (x *VS) GetMultiplier1() int32 {
	if x != nil {
		return x.Multiplier1
	}
	return 0
}

func (x *VS) GetIndex2() int32 {
	if x != nil {
		return x.Index2
	}
	return 0
}

func (x *VS) GetMultiplier2() int32 {
	if x != nil {
		return x.Multiplier2
	}
	return 0
}

func (x *VS) GetWinIndex() int32 {
	if x != nil {
		return x.WinIndex
	}
	return 0
}

func (x *VS) GetWinMultiplier() int32 {
	if x != nil {
		return x.WinMultiplier
	}
	return 0
}

func (x *VS) GetReplacedMesh() []int32 {
	if x != nil {
		return x.ReplacedMesh
	}
	return nil
}

func (x *VS) GetTargetSymbol() int32 {
	if x != nil {
		return x.TargetSymbol
	}
	return 0
}

// General data of game role
type CommonRole struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoleId        string                 `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`                // Role id
	ParentId      int64                  `protobuf:"varint,2,opt,name=ParentId,proto3" json:"ParentId,omitempty"`           // Bet id
	SubId         int64                  `protobuf:"varint,3,opt,name=SubId,proto3" json:"SubId,omitempty"`                 // Sub id of bet
	Bet           float64                `protobuf:"fixed64,4,opt,name=Bet,proto3" json:"Bet,omitempty"`                    // Bet Level
	Score         float64                `protobuf:"fixed64,5,opt,name=Score,proto3" json:"Score,omitempty"`                // The final settlement score
	Mesh          []int32                `protobuf:"varint,6,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`            // List of symbols
	GameState     int32                  `protobuf:"varint,7,opt,name=GameState,proto3" json:"GameState,omitempty"`         // Game state
	WinLines      []*WinLine             `protobuf:"bytes,8,rep,name=WinLines,proto3" json:"WinLines,omitempty"`            // Win lines
	Multiple      float64                `protobuf:"fixed64,9,opt,name=Multiple,proto3" json:"Multiple,omitempty"`          // Win multiple
	TotalScore    float64                `protobuf:"fixed64,10,opt,name=TotalScore,proto3" json:"TotalScore,omitempty"`     // Total win score
	FSNum         int32                  `protobuf:"varint,11,opt,name=FSNum,proto3" json:"FSNum,omitempty"`                // Number of free spin
	FSTotalNum    int32                  `protobuf:"varint,12,opt,name=FSTotalNum,proto3" json:"FSTotalNum,omitempty"`      // Total number of free spin
	FSTotalScore  float64                `protobuf:"fixed64,13,opt,name=FSTotalScore,proto3" json:"FSTotalScore,omitempty"` // total win score of free game
	RSNum         int32                  `protobuf:"varint,14,opt,name=RSNum,proto3" json:"RSNum,omitempty"`                // Number of respin, when more than 0 will trigger respin
	Cascade       bool                   `protobuf:"varint,15,opt,name=Cascade,proto3" json:"Cascade,omitempty"`            // Cascade flag
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommonRole) Reset() {
	*x = CommonRole{}
	mi := &file_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonRole) ProtoMessage() {}

func (x *CommonRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonRole.ProtoReflect.Descriptor instead.
func (*CommonRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *CommonRole) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *CommonRole) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CommonRole) GetSubId() int64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *CommonRole) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *CommonRole) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *CommonRole) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *CommonRole) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

func (x *CommonRole) GetWinLines() []*WinLine {
	if x != nil {
		return x.WinLines
	}
	return nil
}

func (x *CommonRole) GetMultiple() float64 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *CommonRole) GetTotalScore() float64 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *CommonRole) GetFSNum() int32 {
	if x != nil {
		return x.FSNum
	}
	return 0
}

func (x *CommonRole) GetFSTotalNum() int32 {
	if x != nil {
		return x.FSTotalNum
	}
	return 0
}

func (x *CommonRole) GetFSTotalScore() float64 {
	if x != nil {
		return x.FSTotalScore
	}
	return 0
}

func (x *CommonRole) GetRSNum() int32 {
	if x != nil {
		return x.RSNum
	}
	return 0
}

func (x *CommonRole) GetCascade() bool {
	if x != nil {
		return x.Cascade
	}
	return false
}

// Multiplier
type Multiplier struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`       // Index in mesh
	Symbol        int32                  `protobuf:"varint,2,opt,name=Symbol,proto3" json:"Symbol,omitempty"`     // Multiplier symbol
	Multiple      int32                  `protobuf:"varint,3,opt,name=Multiple,proto3" json:"Multiple,omitempty"` // Multiple
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Multiplier) Reset() {
	*x = Multiplier{}
	mi := &file_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Multiplier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Multiplier) ProtoMessage() {}

func (x *Multiplier) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Multiplier.ProtoReflect.Descriptor instead.
func (*Multiplier) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *Multiplier) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Multiplier) GetSymbol() int32 {
	if x != nil {
		return x.Symbol
	}
	return 0
}

func (x *Multiplier) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

type BetLevels struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []float64              `protobuf:"fixed64,1,rep,packed,name=Data,proto3" json:"Data,omitempty"`        //
	CurrencyCode  string                 `protobuf:"bytes,2,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"` // Currency Code
	InitBet       float64                `protobuf:"fixed64,3,opt,name=InitBet,proto3" json:"InitBet,omitempty"`         //
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BetLevels) Reset() {
	*x = BetLevels{}
	mi := &file_common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BetLevels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetLevels) ProtoMessage() {}

func (x *BetLevels) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetLevels.ProtoReflect.Descriptor instead.
func (*BetLevels) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *BetLevels) GetData() []float64 {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BetLevels) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *BetLevels) GetInitBet() float64 {
	if x != nil {
		return x.InitBet
	}
	return 0
}

// ------------------------------------------------------------------------
// 运营商角色不入库
type MOperatorRole struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	OperatorPlayerId     string                 `protobuf:"bytes,1,opt,name=OperatorPlayerId,proto3" json:"OperatorPlayerId,omitempty"`          // 运营商用户id
	OperatorToken        string                 `protobuf:"bytes,2,opt,name=OperatorToken,proto3" json:"OperatorToken,omitempty"`                // 运营商token
	OperatorPlayerToken  string                 `protobuf:"bytes,3,opt,name=OperatorPlayerToken,proto3" json:"OperatorPlayerToken,omitempty"`    // 运营商用户token
	OperatorCbLink       string                 `protobuf:"bytes,4,opt,name=OperatorCbLink,proto3" json:"OperatorCbLink,omitempty"`              // 运营商回调地址
	OperatorCurrencyCode string                 `protobuf:"bytes,5,opt,name=OperatorCurrencyCode,proto3" json:"OperatorCurrencyCode,omitempty"`  // 运营商用户货币代码
	OperatorNickName     string                 `protobuf:"bytes,6,opt,name=OperatorNickName,proto3" json:"OperatorNickName,omitempty"`          // 运营商用户昵称
	OperatorSessionId    string                 `protobuf:"bytes,7,opt,name=OperatorSessionId,proto3" json:"OperatorSessionId,omitempty"`        // 运营商会话id
	SecretKey            string                 `protobuf:"bytes,8,opt,name=SecretKey,proto3" json:"SecretKey,omitempty"`                        // 安全互通密钥
	OperatorCurrencyMult int64                  `protobuf:"varint,9,opt,name=OperatorCurrencyMult,proto3" json:"OperatorCurrencyMult,omitempty"` // 货种乘数
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *MOperatorRole) Reset() {
	*x = MOperatorRole{}
	mi := &file_common_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MOperatorRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MOperatorRole) ProtoMessage() {}

func (x *MOperatorRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MOperatorRole.ProtoReflect.Descriptor instead.
func (*MOperatorRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *MOperatorRole) GetOperatorPlayerId() string {
	if x != nil {
		return x.OperatorPlayerId
	}
	return ""
}

func (x *MOperatorRole) GetOperatorToken() string {
	if x != nil {
		return x.OperatorToken
	}
	return ""
}

func (x *MOperatorRole) GetOperatorPlayerToken() string {
	if x != nil {
		return x.OperatorPlayerToken
	}
	return ""
}

func (x *MOperatorRole) GetOperatorCbLink() string {
	if x != nil {
		return x.OperatorCbLink
	}
	return ""
}

func (x *MOperatorRole) GetOperatorCurrencyCode() string {
	if x != nil {
		return x.OperatorCurrencyCode
	}
	return ""
}

func (x *MOperatorRole) GetOperatorNickName() string {
	if x != nil {
		return x.OperatorNickName
	}
	return ""
}

func (x *MOperatorRole) GetOperatorSessionId() string {
	if x != nil {
		return x.OperatorSessionId
	}
	return ""
}

func (x *MOperatorRole) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *MOperatorRole) GetOperatorCurrencyMult() int64 {
	if x != nil {
		return x.OperatorCurrencyMult
	}
	return 0
}

// ------------------------------------------------------------------------
// 补充棋子
type SuppleChess struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MeshIndex     int32                  `protobuf:"varint,1,opt,name=MeshIndex,proto3" json:"MeshIndex,omitempty"` //棋牌位置
	Element       int32                  `protobuf:"varint,2,opt,name=Element,proto3" json:"Element,omitempty"`     //元素
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SuppleChess) Reset() {
	*x = SuppleChess{}
	mi := &file_common_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuppleChess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuppleChess) ProtoMessage() {}

func (x *SuppleChess) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuppleChess.ProtoReflect.Descriptor instead.
func (*SuppleChess) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *SuppleChess) GetMeshIndex() int32 {
	if x != nil {
		return x.MeshIndex
	}
	return 0
}

func (x *SuppleChess) GetElement() int32 {
	if x != nil {
		return x.Element
	}
	return 0
}

type BetToList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bet           float64                `protobuf:"fixed64,1,opt,name=Bet,proto3" json:"Bet,omitempty"`               //棋牌位置
	Element       []int32                `protobuf:"varint,2,rep,packed,name=Element,proto3" json:"Element,omitempty"` //元素
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BetToList) Reset() {
	*x = BetToList{}
	mi := &file_common_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BetToList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetToList) ProtoMessage() {}

func (x *BetToList) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetToList.ProtoReflect.Descriptor instead.
func (*BetToList) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (x *BetToList) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *BetToList) GetElement() []int32 {
	if x != nil {
		return x.Element
	}
	return nil
}

type MDoggyRole struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RoleId             string                 `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	ParentId           int64                  `protobuf:"varint,2,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	SubId              int64                  `protobuf:"varint,3,opt,name=SubId,proto3" json:"SubId,omitempty"`
	Score              float64                `protobuf:"fixed64,4,opt,name=Score,proto3" json:"Score,omitempty"`
	Bet                float64                `protobuf:"fixed64,5,opt,name=Bet,proto3" json:"Bet,omitempty"`
	Mesh               []int32                `protobuf:"varint,6,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	WinMesh            []int32                `protobuf:"varint,7,rep,packed,name=WinMesh,proto3" json:"WinMesh,omitempty"`                  //中奖元素位置
	Status             int32                  `protobuf:"varint,8,opt,name=Status,proto3" json:"Status,omitempty"`                           //状态
	FSNum              int32                  `protobuf:"varint,9,opt,name=FSNum,proto3" json:"FSNum,omitempty"`                             //免费游戏剩余次数
	TotalFSNum         int32                  `protobuf:"varint,10,opt,name=TotalFSNum,proto3" json:"TotalFSNum,omitempty"`                  //总共的freespintimes
	TotalFreeSpinScore float64                `protobuf:"fixed64,11,opt,name=TotalFreeSpinScore,proto3" json:"TotalFreeSpinScore,omitempty"` //free spin 总赢分
	FSChessList        []int32                `protobuf:"varint,12,rep,packed,name=FSChessList,proto3" json:"FSChessList,omitempty"`         //free spin 累计元素
	FSChess            int32                  `protobuf:"varint,13,opt,name=FSChess,proto3" json:"FSChess,omitempty"`                        //待命中元素
	Multiple           int32                  `protobuf:"varint,14,opt,name=Multiple,proto3" json:"Multiple,omitempty"`                      //倍数
	Coverage           []int32                `protobuf:"varint,15,rep,packed,name=Coverage,proto3" json:"Coverage,omitempty"`               //fs翻倍范围
	SuppleMesh         []*SuppleChess         `protobuf:"bytes,16,rep,name=SuppleMesh,proto3" json:"SuppleMesh,omitempty"`                   //补充棋盘数据
	BeforeScore        float64                `protobuf:"fixed64,17,opt,name=BeforeScore,proto3" json:"BeforeScore,omitempty"`
	BoomMesh           []int32                `protobuf:"varint,18,rep,packed,name=BoomMesh,proto3" json:"BoomMesh,omitempty"` //爆炸棋盘
	IsShow             int32                  `protobuf:"varint,19,opt,name=IsShow,proto3" json:"IsShow,omitempty"`
	BetChessMesh       []*BetToList           `protobuf:"bytes,20,rep,name=BetChessMesh,proto3" json:"BetChessMesh,omitempty"` //补充棋盘数据
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MDoggyRole) Reset() {
	*x = MDoggyRole{}
	mi := &file_common_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MDoggyRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MDoggyRole) ProtoMessage() {}

func (x *MDoggyRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MDoggyRole.ProtoReflect.Descriptor instead.
func (*MDoggyRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

func (x *MDoggyRole) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *MDoggyRole) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *MDoggyRole) GetSubId() int64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *MDoggyRole) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MDoggyRole) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *MDoggyRole) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *MDoggyRole) GetWinMesh() []int32 {
	if x != nil {
		return x.WinMesh
	}
	return nil
}

func (x *MDoggyRole) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MDoggyRole) GetFSNum() int32 {
	if x != nil {
		return x.FSNum
	}
	return 0
}

func (x *MDoggyRole) GetTotalFSNum() int32 {
	if x != nil {
		return x.TotalFSNum
	}
	return 0
}

func (x *MDoggyRole) GetTotalFreeSpinScore() float64 {
	if x != nil {
		return x.TotalFreeSpinScore
	}
	return 0
}

func (x *MDoggyRole) GetFSChessList() []int32 {
	if x != nil {
		return x.FSChessList
	}
	return nil
}

func (x *MDoggyRole) GetFSChess() int32 {
	if x != nil {
		return x.FSChess
	}
	return 0
}

func (x *MDoggyRole) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *MDoggyRole) GetCoverage() []int32 {
	if x != nil {
		return x.Coverage
	}
	return nil
}

func (x *MDoggyRole) GetSuppleMesh() []*SuppleChess {
	if x != nil {
		return x.SuppleMesh
	}
	return nil
}

func (x *MDoggyRole) GetBeforeScore() float64 {
	if x != nil {
		return x.BeforeScore
	}
	return 0
}

func (x *MDoggyRole) GetBoomMesh() []int32 {
	if x != nil {
		return x.BoomMesh
	}
	return nil
}

func (x *MDoggyRole) GetIsShow() int32 {
	if x != nil {
		return x.IsShow
	}
	return 0
}

func (x *MDoggyRole) GetBetChessMesh() []*BetToList {
	if x != nil {
		return x.BetChessMesh
	}
	return nil
}

type Bonus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          int32                  `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`                //类型
	OldMultiple   float64                `protobuf:"fixed64,2,opt,name=OldMultiple,proto3" json:"OldMultiple,omitempty"` //倍数
	Multiple      float64                `protobuf:"fixed64,3,opt,name=Multiple,proto3" json:"Multiple,omitempty"`       //最新倍数
	Pos           int32                  `protobuf:"varint,4,opt,name=Pos,proto3" json:"Pos,omitempty"`                  //位置
	Effects       []int32                `protobuf:"varint,5,rep,packed,name=Effects,proto3" json:"Effects,omitempty"`   //影响的元素
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bonus) Reset() {
	*x = Bonus{}
	mi := &file_common_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bonus) ProtoMessage() {}

func (x *Bonus) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bonus.ProtoReflect.Descriptor instead.
func (*Bonus) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

func (x *Bonus) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Bonus) GetOldMultiple() float64 {
	if x != nil {
		return x.OldMultiple
	}
	return 0
}

func (x *Bonus) GetMultiple() float64 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *Bonus) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *Bonus) GetEffects() []int32 {
	if x != nil {
		return x.Effects
	}
	return nil
}

type MoneytrainRole struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	RoleId          string                 `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	ParentId        int64                  `protobuf:"varint,2,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	SubId           int64                  `protobuf:"varint,3,opt,name=SubId,proto3" json:"SubId,omitempty"`
	Score           float64                `protobuf:"fixed64,4,opt,name=Score,proto3" json:"Score,omitempty"`
	Multiple        float64                `protobuf:"fixed64,5,opt,name=Multiple,proto3" json:"Multiple,omitempty"`
	RSTotalMultiple float64                `protobuf:"fixed64,6,opt,name=RSTotalMultiple,proto3" json:"RSTotalMultiple,omitempty"`
	Bet             float64                `protobuf:"fixed64,7,opt,name=Bet,proto3" json:"Bet,omitempty"`
	Mesh            []int32                `protobuf:"varint,8,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	WinLines        []*WinLine             `protobuf:"bytes,9,rep,name=WinLines,proto3" json:"WinLines,omitempty"`
	Status          int32                  `protobuf:"varint,10,opt,name=Status,proto3" json:"Status,omitempty"`
	FSNum           int32                  `protobuf:"varint,11,opt,name=FSNum,proto3" json:"FSNum,omitempty"`
	FSNumHis        []int32                `protobuf:"varint,12,rep,packed,name=FSNumHis,proto3" json:"FSNumHis,omitempty"`
	FSResetNum      int32                  `protobuf:"varint,13,opt,name=FSResetNum,proto3" json:"FSResetNum,omitempty"`
	FSTotalMultiple float64                `protobuf:"fixed64,14,opt,name=FSTotalMultiple,proto3" json:"FSTotalMultiple,omitempty"`
	FSColNum        int32                  `protobuf:"varint,15,opt,name=FSColNum,proto3" json:"FSColNum,omitempty"`
	// bonus图标，key对应位置，方便查找，bonus对应详细信息
	BonusInfo           map[int32]*Bonus `protobuf:"bytes,16,rep,name=BonusInfo,proto3" json:"BonusInfo,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NewBonusInfo        map[int32]*Bonus `protobuf:"bytes,17,rep,name=NewBonusInfo,proto3" json:"NewBonusInfo,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PresistentBonusInfo map[int32]*Bonus `protobuf:"bytes,18,rep,name=PresistentBonusInfo,proto3" json:"PresistentBonusInfo,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NecromancyEffects   []*Bonus         `protobuf:"bytes,19,rep,name=NecromancyEffects,proto3" json:"NecromancyEffects,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MoneytrainRole) Reset() {
	*x = MoneytrainRole{}
	mi := &file_common_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoneytrainRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneytrainRole) ProtoMessage() {}

func (x *MoneytrainRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneytrainRole.ProtoReflect.Descriptor instead.
func (*MoneytrainRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

func (x *MoneytrainRole) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *MoneytrainRole) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *MoneytrainRole) GetSubId() int64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *MoneytrainRole) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MoneytrainRole) GetMultiple() float64 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *MoneytrainRole) GetRSTotalMultiple() float64 {
	if x != nil {
		return x.RSTotalMultiple
	}
	return 0
}

func (x *MoneytrainRole) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *MoneytrainRole) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *MoneytrainRole) GetWinLines() []*WinLine {
	if x != nil {
		return x.WinLines
	}
	return nil
}

func (x *MoneytrainRole) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MoneytrainRole) GetFSNum() int32 {
	if x != nil {
		return x.FSNum
	}
	return 0
}

func (x *MoneytrainRole) GetFSNumHis() []int32 {
	if x != nil {
		return x.FSNumHis
	}
	return nil
}

func (x *MoneytrainRole) GetFSResetNum() int32 {
	if x != nil {
		return x.FSResetNum
	}
	return 0
}

func (x *MoneytrainRole) GetFSTotalMultiple() float64 {
	if x != nil {
		return x.FSTotalMultiple
	}
	return 0
}

func (x *MoneytrainRole) GetFSColNum() int32 {
	if x != nil {
		return x.FSColNum
	}
	return 0
}

func (x *MoneytrainRole) GetBonusInfo() map[int32]*Bonus {
	if x != nil {
		return x.BonusInfo
	}
	return nil
}

func (x *MoneytrainRole) GetNewBonusInfo() map[int32]*Bonus {
	if x != nil {
		return x.NewBonusInfo
	}
	return nil
}

func (x *MoneytrainRole) GetPresistentBonusInfo() map[int32]*Bonus {
	if x != nil {
		return x.PresistentBonusInfo
	}
	return nil
}

func (x *MoneytrainRole) GetNecromancyEffects() []*Bonus {
	if x != nil {
		return x.NecromancyEffects
	}
	return nil
}

type VsChess struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	ColIndex      int32                  `protobuf:"varint,2,opt,name=ColIndex,proto3" json:"ColIndex,omitempty"`
	DragonMul     int32                  `protobuf:"varint,3,opt,name=DragonMul,proto3" json:"DragonMul,omitempty"`
	SlayerMul     int32                  `protobuf:"varint,4,opt,name=SlayerMul,proto3" json:"SlayerMul,omitempty"`
	WinMul        int32                  `protobuf:"varint,5,opt,name=WinMul,proto3" json:"WinMul,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VsChess) Reset() {
	*x = VsChess{}
	mi := &file_common_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VsChess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsChess) ProtoMessage() {}

func (x *VsChess) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsChess.ProtoReflect.Descriptor instead.
func (*VsChess) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

func (x *VsChess) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *VsChess) GetColIndex() int32 {
	if x != nil {
		return x.ColIndex
	}
	return 0
}

func (x *VsChess) GetDragonMul() int32 {
	if x != nil {
		return x.DragonMul
	}
	return 0
}

func (x *VsChess) GetSlayerMul() int32 {
	if x != nil {
		return x.SlayerMul
	}
	return 0
}

func (x *VsChess) GetWinMul() int32 {
	if x != nil {
		return x.WinMul
	}
	return 0
}

type MDragonSlayerRole struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoleId        string                 `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	ParentId      int64                  `protobuf:"varint,2,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	SubId         int64                  `protobuf:"varint,3,opt,name=SubId,proto3" json:"SubId,omitempty"`
	Score         float64                `protobuf:"fixed64,4,opt,name=Score,proto3" json:"Score,omitempty"`
	Bet           float64                `protobuf:"fixed64,5,opt,name=Bet,proto3" json:"Bet,omitempty"`
	Multiple      float64                `protobuf:"fixed64,6,opt,name=Multiple,proto3" json:"Multiple,omitempty"`
	Mesh          []int32                `protobuf:"varint,7,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	WinLines      []*WinLine             `protobuf:"bytes,8,rep,name=WinLines,proto3" json:"WinLines,omitempty"`
	Status        int32                  `protobuf:"varint,9,opt,name=Status,proto3" json:"Status,omitempty"`
	FSNum         int32                  `protobuf:"varint,10,opt,name=FSNum,proto3" json:"FSNum,omitempty"`
	TotalFSNum    int32                  `protobuf:"varint,11,opt,name=TotalFSNum,proto3" json:"TotalFSNum,omitempty"`
	FSTotalScore  float64                `protobuf:"fixed64,12,opt,name=FSTotalScore,proto3" json:"FSTotalScore,omitempty"`
	AddWildNum    int32                  `protobuf:"varint,13,opt,name=AddWildNum,proto3" json:"AddWildNum,omitempty"`
	AddMultiple   int32                  `protobuf:"varint,14,opt,name=AddMultiple,proto3" json:"AddMultiple,omitempty"`
	FSType        int32                  `protobuf:"varint,15,opt,name=FSType,proto3" json:"FSType,omitempty"`
	WildMesh      []int32                `protobuf:"varint,16,rep,packed,name=WildMesh,proto3" json:"WildMesh,omitempty"`
	VSList        map[int32]*VsChess     `protobuf:"bytes,17,rep,name=VSList,proto3" json:"VSList,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FSWinScore    float64                `protobuf:"fixed64,18,opt,name=FSWinScore,proto3" json:"FSWinScore,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MDragonSlayerRole) Reset() {
	*x = MDragonSlayerRole{}
	mi := &file_common_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MDragonSlayerRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MDragonSlayerRole) ProtoMessage() {}

func (x *MDragonSlayerRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MDragonSlayerRole.ProtoReflect.Descriptor instead.
func (*MDragonSlayerRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

func (x *MDragonSlayerRole) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *MDragonSlayerRole) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *MDragonSlayerRole) GetSubId() int64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *MDragonSlayerRole) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MDragonSlayerRole) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *MDragonSlayerRole) GetMultiple() float64 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *MDragonSlayerRole) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *MDragonSlayerRole) GetWinLines() []*WinLine {
	if x != nil {
		return x.WinLines
	}
	return nil
}

func (x *MDragonSlayerRole) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MDragonSlayerRole) GetFSNum() int32 {
	if x != nil {
		return x.FSNum
	}
	return 0
}

func (x *MDragonSlayerRole) GetTotalFSNum() int32 {
	if x != nil {
		return x.TotalFSNum
	}
	return 0
}

func (x *MDragonSlayerRole) GetFSTotalScore() float64 {
	if x != nil {
		return x.FSTotalScore
	}
	return 0
}

func (x *MDragonSlayerRole) GetAddWildNum() int32 {
	if x != nil {
		return x.AddWildNum
	}
	return 0
}

func (x *MDragonSlayerRole) GetAddMultiple() int32 {
	if x != nil {
		return x.AddMultiple
	}
	return 0
}

func (x *MDragonSlayerRole) GetFSType() int32 {
	if x != nil {
		return x.FSType
	}
	return 0
}

func (x *MDragonSlayerRole) GetWildMesh() []int32 {
	if x != nil {
		return x.WildMesh
	}
	return nil
}

func (x *MDragonSlayerRole) GetVSList() map[int32]*VsChess {
	if x != nil {
		return x.VSList
	}
	return nil
}

func (x *MDragonSlayerRole) GetFSWinScore() float64 {
	if x != nil {
		return x.FSWinScore
	}
	return 0
}

type WantedVS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Multiple1     int32                  `protobuf:"varint,1,opt,name=Multiple1,proto3" json:"Multiple1,omitempty"`
	Multiple2     int32                  `protobuf:"varint,2,opt,name=Multiple2,proto3" json:"Multiple2,omitempty"`
	WinMultiple   int32                  `protobuf:"varint,3,opt,name=WinMultiple,proto3" json:"WinMultiple,omitempty"`
	MeshIndex     int32                  `protobuf:"varint,4,opt,name=MeshIndex,proto3" json:"MeshIndex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WantedVS) Reset() {
	*x = WantedVS{}
	mi := &file_common_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WantedVS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WantedVS) ProtoMessage() {}

func (x *WantedVS) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WantedVS.ProtoReflect.Descriptor instead.
func (*WantedVS) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

func (x *WantedVS) GetMultiple1() int32 {
	if x != nil {
		return x.Multiple1
	}
	return 0
}

func (x *WantedVS) GetMultiple2() int32 {
	if x != nil {
		return x.Multiple2
	}
	return 0
}

func (x *WantedVS) GetWinMultiple() int32 {
	if x != nil {
		return x.WinMultiple
	}
	return 0
}

func (x *WantedVS) GetMeshIndex() int32 {
	if x != nil {
		return x.MeshIndex
	}
	return 0
}

type WantedRole struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RoleId             string                 `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	ParentId           int64                  `protobuf:"varint,2,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	SubId              int64                  `protobuf:"varint,3,opt,name=SubId,proto3" json:"SubId,omitempty"`
	Score              float64                `protobuf:"fixed64,4,opt,name=Score,proto3" json:"Score,omitempty"`
	Bet                float64                `protobuf:"fixed64,5,opt,name=Bet,proto3" json:"Bet,omitempty"`
	Mesh               []int32                `protobuf:"varint,6,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	GameState          int32                  `protobuf:"varint,7,opt,name=GameState,proto3" json:"GameState,omitempty"`
	WinTypes           []*WinType             `protobuf:"bytes,8,rep,name=WinTypes,proto3" json:"WinTypes,omitempty"`
	TotalWin           float64                `protobuf:"fixed64,9,opt,name=TotalWin,proto3" json:"TotalWin,omitempty"`
	FreeSpinTime       int32                  `protobuf:"varint,10,opt,name=FreeSpinTime,proto3" json:"FreeSpinTime,omitempty"`
	TotalFreeSpinTime  int32                  `protobuf:"varint,11,opt,name=TotalFreeSpinTime,proto3" json:"TotalFreeSpinTime,omitempty"`
	TotalFreeSpinScore float64                `protobuf:"fixed64,12,opt,name=TotalFreeSpinScore,proto3" json:"TotalFreeSpinScore,omitempty"`
	TopWilds           int32                  `protobuf:"varint,13,opt,name=TopWilds,proto3" json:"TopWilds,omitempty"`
	TopMultiple        int32                  `protobuf:"varint,14,opt,name=TopMultiple,proto3" json:"TopMultiple,omitempty"`
	WantedVS           []*WantedVS            `protobuf:"bytes,15,rep,name=WantedVS,proto3" json:"WantedVS,omitempty"`
	MathVersion        string                 `protobuf:"bytes,16,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *WantedRole) Reset() {
	*x = WantedRole{}
	mi := &file_common_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WantedRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WantedRole) ProtoMessage() {}

func (x *WantedRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WantedRole.ProtoReflect.Descriptor instead.
func (*WantedRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

func (x *WantedRole) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *WantedRole) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *WantedRole) GetSubId() int64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *WantedRole) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *WantedRole) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *WantedRole) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *WantedRole) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

func (x *WantedRole) GetWinTypes() []*WinType {
	if x != nil {
		return x.WinTypes
	}
	return nil
}

func (x *WantedRole) GetTotalWin() float64 {
	if x != nil {
		return x.TotalWin
	}
	return 0
}

func (x *WantedRole) GetFreeSpinTime() int32 {
	if x != nil {
		return x.FreeSpinTime
	}
	return 0
}

func (x *WantedRole) GetTotalFreeSpinTime() int32 {
	if x != nil {
		return x.TotalFreeSpinTime
	}
	return 0
}

func (x *WantedRole) GetTotalFreeSpinScore() float64 {
	if x != nil {
		return x.TotalFreeSpinScore
	}
	return 0
}

func (x *WantedRole) GetTopWilds() int32 {
	if x != nil {
		return x.TopWilds
	}
	return 0
}

func (x *WantedRole) GetTopMultiple() int32 {
	if x != nil {
		return x.TopMultiple
	}
	return 0
}

func (x *WantedRole) GetWantedVS() []*WantedVS {
	if x != nil {
		return x.WantedVS
	}
	return nil
}

func (x *WantedRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

type SpecialSymbol struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MeshIndex     int32                  `protobuf:"varint,1,opt,name=MeshIndex,proto3" json:"MeshIndex,omitempty"`
	SymbolType    int32                  `protobuf:"varint,2,opt,name=SymbolType,proto3" json:"SymbolType,omitempty"`
	Multi         int32                  `protobuf:"varint,3,opt,name=Multi,proto3" json:"Multi,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecialSymbol) Reset() {
	*x = SpecialSymbol{}
	mi := &file_common_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecialSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialSymbol) ProtoMessage() {}

func (x *SpecialSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialSymbol.ProtoReflect.Descriptor instead.
func (*SpecialSymbol) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{17}
}

func (x *SpecialSymbol) GetMeshIndex() int32 {
	if x != nil {
		return x.MeshIndex
	}
	return 0
}

func (x *SpecialSymbol) GetSymbolType() int32 {
	if x != nil {
		return x.SymbolType
	}
	return 0
}

func (x *SpecialSymbol) GetMulti() int32 {
	if x != nil {
		return x.Multi
	}
	return 0
}

type WinClearList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        int32                  `protobuf:"varint,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Count         int32                  `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	Multi         float64                `protobuf:"fixed64,3,opt,name=Multi,proto3" json:"Multi,omitempty"`
	Score         float64                `protobuf:"fixed64,4,opt,name=Score,proto3" json:"Score,omitempty"`
	Mesh          []int32                `protobuf:"varint,5,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WinClearList) Reset() {
	*x = WinClearList{}
	mi := &file_common_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WinClearList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinClearList) ProtoMessage() {}

func (x *WinClearList) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinClearList.ProtoReflect.Descriptor instead.
func (*WinClearList) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{18}
}

func (x *WinClearList) GetSymbol() int32 {
	if x != nil {
		return x.Symbol
	}
	return 0
}

func (x *WinClearList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *WinClearList) GetMulti() float64 {
	if x != nil {
		return x.Multi
	}
	return 0
}

func (x *WinClearList) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *WinClearList) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

type HandOfAnubisRole struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	RoleId                   string                 `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	ParentId                 int64                  `protobuf:"varint,2,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	SubId                    int64                  `protobuf:"varint,3,opt,name=SubId,proto3" json:"SubId,omitempty"`
	Score                    float64                `protobuf:"fixed64,4,opt,name=Score,proto3" json:"Score,omitempty"`
	Bet                      float64                `protobuf:"fixed64,5,opt,name=Bet,proto3" json:"Bet,omitempty"`
	Mesh                     []int32                `protobuf:"varint,6,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	GameState                int32                  `protobuf:"varint,7,opt,name=GameState,proto3" json:"GameState,omitempty"`
	WinClearList             []*WinClearList        `protobuf:"bytes,8,rep,name=WinClearList,proto3" json:"WinClearList,omitempty"`
	TotalWin                 float64                `protobuf:"fixed64,9,opt,name=TotalWin,proto3" json:"TotalWin,omitempty"`
	FreeSpinTime             int32                  `protobuf:"varint,10,opt,name=FreeSpinTime,proto3" json:"FreeSpinTime,omitempty"`
	TotalFreeSpinTime        int32                  `protobuf:"varint,11,opt,name=TotalFreeSpinTime,proto3" json:"TotalFreeSpinTime,omitempty"`
	TotalFreeSpinScore       float64                `protobuf:"fixed64,12,opt,name=TotalFreeSpinScore,proto3" json:"TotalFreeSpinScore,omitempty"`
	StuffMesh                []*SuppleChess         `protobuf:"bytes,13,rep,name=StuffMesh,proto3" json:"StuffMesh,omitempty"`
	UnderworldMulti          []int32                `protobuf:"varint,14,rep,packed,name=UnderworldMulti,proto3" json:"UnderworldMulti,omitempty"`
	UnderworldActivatedMulti []int32                `protobuf:"varint,15,rep,packed,name=UnderworldActivatedMulti,proto3" json:"UnderworldActivatedMulti,omitempty"`
	JudgmentMulti            []int32                `protobuf:"varint,16,rep,packed,name=JudgmentMulti,proto3" json:"JudgmentMulti,omitempty"`
	MultiMesh                []int32                `protobuf:"varint,17,rep,packed,name=MultiMesh,proto3" json:"MultiMesh,omitempty"`
	SpecialSymbols           []*SpecialSymbol       `protobuf:"bytes,18,rep,name=SpecialSymbols,proto3" json:"SpecialSymbols,omitempty"`
	Cascape                  bool                   `protobuf:"varint,19,opt,name=Cascape,proto3" json:"Cascape,omitempty"`
	IsMultiBlockDropDown     bool                   `protobuf:"varint,20,opt,name=IsMultiBlockDropDown,proto3" json:"IsMultiBlockDropDown,omitempty"`
	OffsetColList            []int32                `protobuf:"varint,21,rep,packed,name=OffsetColList,proto3" json:"OffsetColList,omitempty"`
	SoulOrbState             map[int32]bool         `protobuf:"bytes,22,rep,name=SoulOrbState,proto3" json:"SoulOrbState,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MathVersion              string                 `protobuf:"bytes,23,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	RoundEnd                 bool                   `protobuf:"varint,24,opt,name=RoundEnd,proto3" json:"RoundEnd,omitempty"`
	NextCascadeModel         *HandOfAnubisRole      `protobuf:"bytes,25,opt,name=NextCascadeModel,proto3" json:"NextCascadeModel,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *HandOfAnubisRole) Reset() {
	*x = HandOfAnubisRole{}
	mi := &file_common_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandOfAnubisRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandOfAnubisRole) ProtoMessage() {}

func (x *HandOfAnubisRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandOfAnubisRole.ProtoReflect.Descriptor instead.
func (*HandOfAnubisRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{19}
}

func (x *HandOfAnubisRole) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *HandOfAnubisRole) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *HandOfAnubisRole) GetSubId() int64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *HandOfAnubisRole) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *HandOfAnubisRole) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *HandOfAnubisRole) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *HandOfAnubisRole) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

func (x *HandOfAnubisRole) GetWinClearList() []*WinClearList {
	if x != nil {
		return x.WinClearList
	}
	return nil
}

func (x *HandOfAnubisRole) GetTotalWin() float64 {
	if x != nil {
		return x.TotalWin
	}
	return 0
}

func (x *HandOfAnubisRole) GetFreeSpinTime() int32 {
	if x != nil {
		return x.FreeSpinTime
	}
	return 0
}

func (x *HandOfAnubisRole) GetTotalFreeSpinTime() int32 {
	if x != nil {
		return x.TotalFreeSpinTime
	}
	return 0
}

func (x *HandOfAnubisRole) GetTotalFreeSpinScore() float64 {
	if x != nil {
		return x.TotalFreeSpinScore
	}
	return 0
}

func (x *HandOfAnubisRole) GetStuffMesh() []*SuppleChess {
	if x != nil {
		return x.StuffMesh
	}
	return nil
}

func (x *HandOfAnubisRole) GetUnderworldMulti() []int32 {
	if x != nil {
		return x.UnderworldMulti
	}
	return nil
}

func (x *HandOfAnubisRole) GetUnderworldActivatedMulti() []int32 {
	if x != nil {
		return x.UnderworldActivatedMulti
	}
	return nil
}

func (x *HandOfAnubisRole) GetJudgmentMulti() []int32 {
	if x != nil {
		return x.JudgmentMulti
	}
	return nil
}

func (x *HandOfAnubisRole) GetMultiMesh() []int32 {
	if x != nil {
		return x.MultiMesh
	}
	return nil
}

func (x *HandOfAnubisRole) GetSpecialSymbols() []*SpecialSymbol {
	if x != nil {
		return x.SpecialSymbols
	}
	return nil
}

func (x *HandOfAnubisRole) GetCascape() bool {
	if x != nil {
		return x.Cascape
	}
	return false
}

func (x *HandOfAnubisRole) GetIsMultiBlockDropDown() bool {
	if x != nil {
		return x.IsMultiBlockDropDown
	}
	return false
}

func (x *HandOfAnubisRole) GetOffsetColList() []int32 {
	if x != nil {
		return x.OffsetColList
	}
	return nil
}

func (x *HandOfAnubisRole) GetSoulOrbState() map[int32]bool {
	if x != nil {
		return x.SoulOrbState
	}
	return nil
}

func (x *HandOfAnubisRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *HandOfAnubisRole) GetRoundEnd() bool {
	if x != nil {
		return x.RoundEnd
	}
	return false
}

func (x *HandOfAnubisRole) GetNextCascadeModel() *HandOfAnubisRole {
	if x != nil {
		return x.NextCascadeModel
	}
	return nil
}

type DragonVS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Multiple1     int32                  `protobuf:"varint,1,opt,name=Multiple1,proto3" json:"Multiple1,omitempty"`
	Multiple2     int32                  `protobuf:"varint,2,opt,name=Multiple2,proto3" json:"Multiple2,omitempty"`
	WinMultiple   int32                  `protobuf:"varint,3,opt,name=WinMultiple,proto3" json:"WinMultiple,omitempty"`
	MeshIndex     int32                  `protobuf:"varint,4,opt,name=MeshIndex,proto3" json:"MeshIndex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DragonVS) Reset() {
	*x = DragonVS{}
	mi := &file_common_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DragonVS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DragonVS) ProtoMessage() {}

func (x *DragonVS) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DragonVS.ProtoReflect.Descriptor instead.
func (*DragonVS) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{20}
}

func (x *DragonVS) GetMultiple1() int32 {
	if x != nil {
		return x.Multiple1
	}
	return 0
}

func (x *DragonVS) GetMultiple2() int32 {
	if x != nil {
		return x.Multiple2
	}
	return 0
}

func (x *DragonVS) GetWinMultiple() int32 {
	if x != nil {
		return x.WinMultiple
	}
	return 0
}

func (x *DragonVS) GetMeshIndex() int32 {
	if x != nil {
		return x.MeshIndex
	}
	return 0
}

type DragonEgg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Multiple      int32                  `protobuf:"varint,1,opt,name=Multiple,proto3" json:"Multiple,omitempty"`
	EggType       int32                  `protobuf:"varint,2,opt,name=EggType,proto3" json:"EggType,omitempty"`
	MeshIndex     int32                  `protobuf:"varint,3,opt,name=MeshIndex,proto3" json:"MeshIndex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DragonEgg) Reset() {
	*x = DragonEgg{}
	mi := &file_common_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DragonEgg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DragonEgg) ProtoMessage() {}

func (x *DragonEgg) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DragonEgg.ProtoReflect.Descriptor instead.
func (*DragonEgg) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{21}
}

func (x *DragonEgg) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *DragonEgg) GetEggType() int32 {
	if x != nil {
		return x.EggType
	}
	return 0
}

func (x *DragonEgg) GetMeshIndex() int32 {
	if x != nil {
		return x.MeshIndex
	}
	return 0
}

type DragonRole struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RoleId             string                 `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	ParentId           int64                  `protobuf:"varint,2,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	SubId              int64                  `protobuf:"varint,3,opt,name=SubId,proto3" json:"SubId,omitempty"`
	Score              float64                `protobuf:"fixed64,4,opt,name=Score,proto3" json:"Score,omitempty"`
	Bet                float64                `protobuf:"fixed64,5,opt,name=Bet,proto3" json:"Bet,omitempty"`
	Mesh               []int32                `protobuf:"varint,6,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	GameState          int32                  `protobuf:"varint,7,opt,name=GameState,proto3" json:"GameState,omitempty"`
	TotalWin           float64                `protobuf:"fixed64,8,opt,name=TotalWin,proto3" json:"TotalWin,omitempty"`
	WinTypes           []*WinType             `protobuf:"bytes,9,rep,name=WinTypes,proto3" json:"WinTypes,omitempty"`
	FreeSpinTime       int32                  `protobuf:"varint,10,opt,name=FreeSpinTime,proto3" json:"FreeSpinTime,omitempty"`
	TotalFreeSpinTime  int32                  `protobuf:"varint,11,opt,name=TotalFreeSpinTime,proto3" json:"TotalFreeSpinTime,omitempty"`
	TotalFreeSpinScore float64                `protobuf:"fixed64,12,opt,name=TotalFreeSpinScore,proto3" json:"TotalFreeSpinScore,omitempty"`
	DragonVS           []*DragonVS            `protobuf:"bytes,13,rep,name=DragonVS,proto3" json:"DragonVS,omitempty"`
	ArenaReelMulti     []int32                `protobuf:"varint,14,rep,packed,name=ArenaReelMulti,proto3" json:"ArenaReelMulti,omitempty"`
	BeastReelMulti     []int32                `protobuf:"varint,15,rep,packed,name=BeastReelMulti,proto3" json:"BeastReelMulti,omitempty"`
	DragonEgg          []*DragonEgg           `protobuf:"bytes,16,rep,name=DragonEgg,proto3" json:"DragonEgg,omitempty"`
	BeastReelIsOpen    []int32                `protobuf:"varint,17,rep,packed,name=BeastReelIsOpen,proto3" json:"BeastReelIsOpen,omitempty"`
	MathVersion        string                 `protobuf:"bytes,18,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	RoundEnd           bool                   `protobuf:"varint,19,opt,name=RoundEnd,proto3" json:"RoundEnd,omitempty"`
	NextCascadeModel   *DragonRole            `protobuf:"bytes,20,opt,name=NextCascadeModel,proto3" json:"NextCascadeModel,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DragonRole) Reset() {
	*x = DragonRole{}
	mi := &file_common_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DragonRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DragonRole) ProtoMessage() {}

func (x *DragonRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DragonRole.ProtoReflect.Descriptor instead.
func (*DragonRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{22}
}

func (x *DragonRole) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *DragonRole) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *DragonRole) GetSubId() int64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *DragonRole) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *DragonRole) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *DragonRole) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *DragonRole) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

func (x *DragonRole) GetTotalWin() float64 {
	if x != nil {
		return x.TotalWin
	}
	return 0
}

func (x *DragonRole) GetWinTypes() []*WinType {
	if x != nil {
		return x.WinTypes
	}
	return nil
}

func (x *DragonRole) GetFreeSpinTime() int32 {
	if x != nil {
		return x.FreeSpinTime
	}
	return 0
}

func (x *DragonRole) GetTotalFreeSpinTime() int32 {
	if x != nil {
		return x.TotalFreeSpinTime
	}
	return 0
}

func (x *DragonRole) GetTotalFreeSpinScore() float64 {
	if x != nil {
		return x.TotalFreeSpinScore
	}
	return 0
}

func (x *DragonRole) GetDragonVS() []*DragonVS {
	if x != nil {
		return x.DragonVS
	}
	return nil
}

func (x *DragonRole) GetArenaReelMulti() []int32 {
	if x != nil {
		return x.ArenaReelMulti
	}
	return nil
}

func (x *DragonRole) GetBeastReelMulti() []int32 {
	if x != nil {
		return x.BeastReelMulti
	}
	return nil
}

func (x *DragonRole) GetDragonEgg() []*DragonEgg {
	if x != nil {
		return x.DragonEgg
	}
	return nil
}

func (x *DragonRole) GetBeastReelIsOpen() []int32 {
	if x != nil {
		return x.BeastReelIsOpen
	}
	return nil
}

func (x *DragonRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *DragonRole) GetRoundEnd() bool {
	if x != nil {
		return x.RoundEnd
	}
	return false
}

func (x *DragonRole) GetNextCascadeModel() *DragonRole {
	if x != nil {
		return x.NextCascadeModel
	}
	return nil
}

type SwitchData struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TargetSymbol     int32                  `protobuf:"varint,1,opt,name=TargetSymbol,proto3" json:"TargetSymbol,omitempty"`                                                                                  // 目标符号
	SwitchSpinTime   int32                  `protobuf:"varint,2,opt,name=SwitchSpinTime,proto3" json:"SwitchSpinTime,omitempty"`                                                                              //
	ReplacedSymbols  map[int32]int32        `protobuf:"bytes,3,rep,name=ReplacedSymbols,proto3" json:"ReplacedSymbols,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // 替换符号列表
	ReplacedMesh     []int32                `protobuf:"varint,4,rep,packed,name=ReplacedMesh,proto3" json:"ReplacedMesh,omitempty"`                                                                           // 替换符号mesh
	LastTargetSymbol int32                  `protobuf:"varint,5,opt,name=LastTargetSymbol,proto3" json:"LastTargetSymbol,omitempty"`
	NRespin          int32                  `protobuf:"varint,6,opt,name=nRespin,proto3" json:"nRespin,omitempty"` // 本次新增次数
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SwitchData) Reset() {
	*x = SwitchData{}
	mi := &file_common_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchData) ProtoMessage() {}

func (x *SwitchData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchData.ProtoReflect.Descriptor instead.
func (*SwitchData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{23}
}

func (x *SwitchData) GetTargetSymbol() int32 {
	if x != nil {
		return x.TargetSymbol
	}
	return 0
}

func (x *SwitchData) GetSwitchSpinTime() int32 {
	if x != nil {
		return x.SwitchSpinTime
	}
	return 0
}

func (x *SwitchData) GetReplacedSymbols() map[int32]int32 {
	if x != nil {
		return x.ReplacedSymbols
	}
	return nil
}

func (x *SwitchData) GetReplacedMesh() []int32 {
	if x != nil {
		return x.ReplacedMesh
	}
	return nil
}

func (x *SwitchData) GetLastTargetSymbol() int32 {
	if x != nil {
		return x.LastTargetSymbol
	}
	return 0
}

func (x *SwitchData) GetNRespin() int32 {
	if x != nil {
		return x.NRespin
	}
	return 0
}

type JohnWildRole struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RoleId             string                 `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	ParentId           int64                  `protobuf:"varint,2,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	SubId              int64                  `protobuf:"varint,3,opt,name=SubId,proto3" json:"SubId,omitempty"`
	Score              float64                `protobuf:"fixed64,4,opt,name=Score,proto3" json:"Score,omitempty"`
	Bet                float64                `protobuf:"fixed64,5,opt,name=Bet,proto3" json:"Bet,omitempty"`
	Mesh               []int32                `protobuf:"varint,6,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	GameState          int32                  `protobuf:"varint,7,opt,name=GameState,proto3" json:"GameState,omitempty"`
	TotalWin           float64                `protobuf:"fixed64,8,opt,name=TotalWin,proto3" json:"TotalWin,omitempty"`
	WinTypes           []*WinType             `protobuf:"bytes,9,rep,name=WinTypes,proto3" json:"WinTypes,omitempty"`
	FreeSpinTime       int32                  `protobuf:"varint,10,opt,name=FreeSpinTime,proto3" json:"FreeSpinTime,omitempty"`
	TotalFreeSpinTime  int32                  `protobuf:"varint,11,opt,name=TotalFreeSpinTime,proto3" json:"TotalFreeSpinTime,omitempty"`
	TotalFreeSpinScore float64                `protobuf:"fixed64,12,opt,name=TotalFreeSpinScore,proto3" json:"TotalFreeSpinScore,omitempty"`
	Switch             *SwitchData            `protobuf:"bytes,13,opt,name=Switch,proto3" json:"Switch,omitempty"`
	IsReSpin           bool                   `protobuf:"varint,14,opt,name=IsReSpin,proto3" json:"IsReSpin,omitempty"`
	StartFree1         bool                   `protobuf:"varint,15,opt,name=StartFree1,proto3" json:"StartFree1,omitempty"`
	StartFree2         bool                   `protobuf:"varint,16,opt,name=StartFree2,proto3" json:"StartFree2,omitempty"`
	MathVersion        string                 `protobuf:"bytes,17,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	RoundEnd           bool                   `protobuf:"varint,18,opt,name=RoundEnd,proto3" json:"RoundEnd,omitempty"`
	NextCascadeModel   *JohnWildRole          `protobuf:"bytes,19,opt,name=NextCascadeModel,proto3" json:"NextCascadeModel,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *JohnWildRole) Reset() {
	*x = JohnWildRole{}
	mi := &file_common_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JohnWildRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JohnWildRole) ProtoMessage() {}

func (x *JohnWildRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JohnWildRole.ProtoReflect.Descriptor instead.
func (*JohnWildRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{24}
}

func (x *JohnWildRole) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *JohnWildRole) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *JohnWildRole) GetSubId() int64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *JohnWildRole) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *JohnWildRole) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *JohnWildRole) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *JohnWildRole) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

func (x *JohnWildRole) GetTotalWin() float64 {
	if x != nil {
		return x.TotalWin
	}
	return 0
}

func (x *JohnWildRole) GetWinTypes() []*WinType {
	if x != nil {
		return x.WinTypes
	}
	return nil
}

func (x *JohnWildRole) GetFreeSpinTime() int32 {
	if x != nil {
		return x.FreeSpinTime
	}
	return 0
}

func (x *JohnWildRole) GetTotalFreeSpinTime() int32 {
	if x != nil {
		return x.TotalFreeSpinTime
	}
	return 0
}

func (x *JohnWildRole) GetTotalFreeSpinScore() float64 {
	if x != nil {
		return x.TotalFreeSpinScore
	}
	return 0
}

func (x *JohnWildRole) GetSwitch() *SwitchData {
	if x != nil {
		return x.Switch
	}
	return nil
}

func (x *JohnWildRole) GetIsReSpin() bool {
	if x != nil {
		return x.IsReSpin
	}
	return false
}

func (x *JohnWildRole) GetStartFree1() bool {
	if x != nil {
		return x.StartFree1
	}
	return false
}

func (x *JohnWildRole) GetStartFree2() bool {
	if x != nil {
		return x.StartFree2
	}
	return false
}

func (x *JohnWildRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *JohnWildRole) GetRoundEnd() bool {
	if x != nil {
		return x.RoundEnd
	}
	return false
}

func (x *JohnWildRole) GetNextCascadeModel() *JohnWildRole {
	if x != nil {
		return x.NextCascadeModel
	}
	return nil
}

type CatData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Col           int32                  `protobuf:"varint,1,opt,name=Col,proto3" json:"Col,omitempty"`
	MeshIndex     []int32                `protobuf:"varint,2,rep,packed,name=MeshIndex,proto3" json:"MeshIndex,omitempty"`
	WildMeshIndex int32                  `protobuf:"varint,3,opt,name=WildMeshIndex,proto3" json:"WildMeshIndex,omitempty"`
	Multiple      int32                  `protobuf:"varint,4,opt,name=Multiple,proto3" json:"Multiple,omitempty"`
	IsFull        int32                  `protobuf:"varint,5,opt,name=isFull,proto3" json:"isFull,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CatData) Reset() {
	*x = CatData{}
	mi := &file_common_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CatData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatData) ProtoMessage() {}

func (x *CatData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatData.ProtoReflect.Descriptor instead.
func (*CatData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{25}
}

func (x *CatData) GetCol() int32 {
	if x != nil {
		return x.Col
	}
	return 0
}

func (x *CatData) GetMeshIndex() []int32 {
	if x != nil {
		return x.MeshIndex
	}
	return nil
}

func (x *CatData) GetWildMeshIndex() int32 {
	if x != nil {
		return x.WildMeshIndex
	}
	return 0
}

func (x *CatData) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *CatData) GetIsFull() int32 {
	if x != nil {
		return x.IsFull
	}
	return 0
}

type RipCityRole struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RoleId             string                 `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	ParentId           int64                  `protobuf:"varint,2,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	SubId              int64                  `protobuf:"varint,3,opt,name=SubId,proto3" json:"SubId,omitempty"`
	Score              float64                `protobuf:"fixed64,4,opt,name=Score,proto3" json:"Score,omitempty"`
	Bet                float64                `protobuf:"fixed64,5,opt,name=Bet,proto3" json:"Bet,omitempty"`
	Mesh               []int32                `protobuf:"varint,6,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	GameState          int32                  `protobuf:"varint,7,opt,name=GameState,proto3" json:"GameState,omitempty"`
	TotalWin           float64                `protobuf:"fixed64,8,opt,name=TotalWin,proto3" json:"TotalWin,omitempty"`
	WinTypes           []*WinType             `protobuf:"bytes,9,rep,name=WinTypes,proto3" json:"WinTypes,omitempty"`
	FreeSpinTime       int32                  `protobuf:"varint,10,opt,name=FreeSpinTime,proto3" json:"FreeSpinTime,omitempty"`
	TotalFreeSpinTime  int32                  `protobuf:"varint,11,opt,name=TotalFreeSpinTime,proto3" json:"TotalFreeSpinTime,omitempty"`
	TotalFreeSpinScore float64                `protobuf:"fixed64,12,opt,name=TotalFreeSpinScore,proto3" json:"TotalFreeSpinScore,omitempty"`
	Highlight          []int32                `protobuf:"varint,14,rep,packed,name=Highlight,proto3" json:"Highlight,omitempty"`
	CatData            []*CatData             `protobuf:"bytes,15,rep,name=CatData,proto3" json:"CatData,omitempty"`
	MathVersion        string                 `protobuf:"bytes,16,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RipCityRole) Reset() {
	*x = RipCityRole{}
	mi := &file_common_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RipCityRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RipCityRole) ProtoMessage() {}

func (x *RipCityRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RipCityRole.ProtoReflect.Descriptor instead.
func (*RipCityRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{26}
}

func (x *RipCityRole) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *RipCityRole) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *RipCityRole) GetSubId() int64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *RipCityRole) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RipCityRole) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *RipCityRole) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *RipCityRole) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

func (x *RipCityRole) GetTotalWin() float64 {
	if x != nil {
		return x.TotalWin
	}
	return 0
}

func (x *RipCityRole) GetWinTypes() []*WinType {
	if x != nil {
		return x.WinTypes
	}
	return nil
}

func (x *RipCityRole) GetFreeSpinTime() int32 {
	if x != nil {
		return x.FreeSpinTime
	}
	return 0
}

func (x *RipCityRole) GetTotalFreeSpinTime() int32 {
	if x != nil {
		return x.TotalFreeSpinTime
	}
	return 0
}

func (x *RipCityRole) GetTotalFreeSpinScore() float64 {
	if x != nil {
		return x.TotalFreeSpinScore
	}
	return 0
}

func (x *RipCityRole) GetHighlight() []int32 {
	if x != nil {
		return x.Highlight
	}
	return nil
}

func (x *RipCityRole) GetCatData() []*CatData {
	if x != nil {
		return x.CatData
	}
	return nil
}

func (x *RipCityRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

type WarriorWaysRole struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RoleId             string                 `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	ParentId           int64                  `protobuf:"varint,2,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	SubId              int64                  `protobuf:"varint,3,opt,name=SubId,proto3" json:"SubId,omitempty"`
	Score              float64                `protobuf:"fixed64,4,opt,name=Score,proto3" json:"Score,omitempty"`
	Bet                float64                `protobuf:"fixed64,5,opt,name=Bet,proto3" json:"Bet,omitempty"`
	Mesh               []int32                `protobuf:"varint,6,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	GameState          int32                  `protobuf:"varint,7,opt,name=GameState,proto3" json:"GameState,omitempty"`
	TotalWin           float64                `protobuf:"fixed64,8,opt,name=TotalWin,proto3" json:"TotalWin,omitempty"`
	WinTypes           []*WinType             `protobuf:"bytes,9,rep,name=WinTypes,proto3" json:"WinTypes,omitempty"`
	FreeSpinTime       int32                  `protobuf:"varint,10,opt,name=FreeSpinTime,proto3" json:"FreeSpinTime,omitempty"`
	TotalFreeSpinTime  int32                  `protobuf:"varint,11,opt,name=TotalFreeSpinTime,proto3" json:"TotalFreeSpinTime,omitempty"`
	TotalFreeSpinScore float64                `protobuf:"fixed64,12,opt,name=TotalFreeSpinScore,proto3" json:"TotalFreeSpinScore,omitempty"`
	VS                 *VS                    `protobuf:"bytes,13,opt,name=VS,proto3" json:"VS,omitempty"`
	TotalValues        []int32                `protobuf:"varint,14,rep,packed,name=TotalValues,proto3" json:"TotalValues,omitempty"`
	Values             []int32                `protobuf:"varint,15,rep,packed,name=Values,proto3" json:"Values,omitempty"`
	Scenario           int32                  `protobuf:"varint,16,opt,name=Scenario,proto3" json:"Scenario,omitempty"`
	MiniSpins          int32                  `protobuf:"varint,17,opt,name=MiniSpins,proto3" json:"MiniSpins,omitempty"`
	MiniMuler          int32                  `protobuf:"varint,18,opt,name=MiniMuler,proto3" json:"MiniMuler,omitempty"`
	MathVersion        string                 `protobuf:"bytes,19,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *WarriorWaysRole) Reset() {
	*x = WarriorWaysRole{}
	mi := &file_common_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WarriorWaysRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarriorWaysRole) ProtoMessage() {}

func (x *WarriorWaysRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarriorWaysRole.ProtoReflect.Descriptor instead.
func (*WarriorWaysRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{27}
}

func (x *WarriorWaysRole) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *WarriorWaysRole) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *WarriorWaysRole) GetSubId() int64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *WarriorWaysRole) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *WarriorWaysRole) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *WarriorWaysRole) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *WarriorWaysRole) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

func (x *WarriorWaysRole) GetTotalWin() float64 {
	if x != nil {
		return x.TotalWin
	}
	return 0
}

func (x *WarriorWaysRole) GetWinTypes() []*WinType {
	if x != nil {
		return x.WinTypes
	}
	return nil
}

func (x *WarriorWaysRole) GetFreeSpinTime() int32 {
	if x != nil {
		return x.FreeSpinTime
	}
	return 0
}

func (x *WarriorWaysRole) GetTotalFreeSpinTime() int32 {
	if x != nil {
		return x.TotalFreeSpinTime
	}
	return 0
}

func (x *WarriorWaysRole) GetTotalFreeSpinScore() float64 {
	if x != nil {
		return x.TotalFreeSpinScore
	}
	return 0
}

func (x *WarriorWaysRole) GetVS() *VS {
	if x != nil {
		return x.VS
	}
	return nil
}

func (x *WarriorWaysRole) GetTotalValues() []int32 {
	if x != nil {
		return x.TotalValues
	}
	return nil
}

func (x *WarriorWaysRole) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *WarriorWaysRole) GetScenario() int32 {
	if x != nil {
		return x.Scenario
	}
	return 0
}

func (x *WarriorWaysRole) GetMiniSpins() int32 {
	if x != nil {
		return x.MiniSpins
	}
	return 0
}

func (x *WarriorWaysRole) GetMiniMuler() int32 {
	if x != nil {
		return x.MiniMuler
	}
	return 0
}

func (x *WarriorWaysRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

type EIteroGrid struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Score           float64                `protobuf:"fixed64,1,opt,name=Score,proto3" json:"Score,omitempty"`
	Mesh            []int32                `protobuf:"varint,2,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	GameState       int32                  `protobuf:"varint,3,opt,name=GameState,proto3" json:"GameState,omitempty"`
	WinLines        []*WinLine             `protobuf:"bytes,4,rep,name=WinLines,proto3" json:"WinLines,omitempty"`
	Multiple        float64                `protobuf:"fixed64,5,opt,name=Multiple,proto3" json:"Multiple,omitempty"`
	TotalScore      float64                `protobuf:"fixed64,6,opt,name=TotalScore,proto3" json:"TotalScore,omitempty"`
	FSNum           int32                  `protobuf:"varint,7,opt,name=FSNum,proto3" json:"FSNum,omitempty"`
	FSTotalNum      int32                  `protobuf:"varint,8,opt,name=FSTotalNum,proto3" json:"FSTotalNum,omitempty"`
	FSTotalScore    float64                `protobuf:"fixed64,9,opt,name=FSTotalScore,proto3" json:"FSTotalScore,omitempty"`
	Cascade         bool                   `protobuf:"varint,10,opt,name=Cascade,proto3" json:"Cascade,omitempty"`
	RSNum           int32                  `protobuf:"varint,11,opt,name=RSNum,proto3" json:"RSNum,omitempty"`
	CollectMultiple int32                  `protobuf:"varint,12,opt,name=CollectMultiple,proto3" json:"CollectMultiple,omitempty"`
	MathVersion     string                 `protobuf:"bytes,13,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	IsRsNum         bool                   `protobuf:"varint,14,opt,name=IsRsNum,proto3" json:"IsRsNum,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EIteroGrid) Reset() {
	*x = EIteroGrid{}
	mi := &file_common_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EIteroGrid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EIteroGrid) ProtoMessage() {}

func (x *EIteroGrid) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EIteroGrid.ProtoReflect.Descriptor instead.
func (*EIteroGrid) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{28}
}

func (x *EIteroGrid) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *EIteroGrid) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *EIteroGrid) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

func (x *EIteroGrid) GetWinLines() []*WinLine {
	if x != nil {
		return x.WinLines
	}
	return nil
}

func (x *EIteroGrid) GetMultiple() float64 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *EIteroGrid) GetTotalScore() float64 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *EIteroGrid) GetFSNum() int32 {
	if x != nil {
		return x.FSNum
	}
	return 0
}

func (x *EIteroGrid) GetFSTotalNum() int32 {
	if x != nil {
		return x.FSTotalNum
	}
	return 0
}

func (x *EIteroGrid) GetFSTotalScore() float64 {
	if x != nil {
		return x.FSTotalScore
	}
	return 0
}

func (x *EIteroGrid) GetCascade() bool {
	if x != nil {
		return x.Cascade
	}
	return false
}

func (x *EIteroGrid) GetRSNum() int32 {
	if x != nil {
		return x.RSNum
	}
	return 0
}

func (x *EIteroGrid) GetCollectMultiple() int32 {
	if x != nil {
		return x.CollectMultiple
	}
	return 0
}

func (x *EIteroGrid) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *EIteroGrid) GetIsRsNum() bool {
	if x != nil {
		return x.IsRsNum
	}
	return false
}

type IteroRole struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CR              *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	CollectMultiple int32                  `protobuf:"varint,2,opt,name=CollectMultiple,proto3" json:"CollectMultiple,omitempty"`
	MathVersion     string                 `protobuf:"bytes,3,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	IsRsNum         bool                   `protobuf:"varint,4,opt,name=IsRsNum,proto3" json:"IsRsNum,omitempty"`
	EIteroGrid      []*EIteroGrid          `protobuf:"bytes,5,rep,name=EIteroGrid,proto3" json:"EIteroGrid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *IteroRole) Reset() {
	*x = IteroRole{}
	mi := &file_common_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IteroRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IteroRole) ProtoMessage() {}

func (x *IteroRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IteroRole.ProtoReflect.Descriptor instead.
func (*IteroRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{29}
}

func (x *IteroRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *IteroRole) GetCollectMultiple() int32 {
	if x != nil {
		return x.CollectMultiple
	}
	return 0
}

func (x *IteroRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *IteroRole) GetIsRsNum() bool {
	if x != nil {
		return x.IsRsNum
	}
	return false
}

func (x *IteroRole) GetEIteroGrid() []*EIteroGrid {
	if x != nil {
		return x.EIteroGrid
	}
	return nil
}

type SugarRushRole struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CR               *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	MultiMesh        []int32                `protobuf:"varint,2,rep,packed,name=MultiMesh,proto3" json:"MultiMesh,omitempty"`
	StuffMesh        []int32                `protobuf:"varint,3,rep,packed,name=StuffMesh,proto3" json:"StuffMesh,omitempty"`
	ReelsOffset      []int32                `protobuf:"varint,4,rep,packed,name=ReelsOffset,proto3" json:"ReelsOffset,omitempty"`
	MathVersion      string                 `protobuf:"bytes,5,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	BetCount         int64                  `protobuf:"varint,6,opt,name=BetCount,proto3" json:"BetCount,omitempty"`
	RoundEnd         bool                   `protobuf:"varint,7,opt,name=RoundEnd,proto3" json:"RoundEnd,omitempty"`
	NextCascadeModel *SugarRushRole         `protobuf:"bytes,8,opt,name=NextCascadeModel,proto3" json:"NextCascadeModel,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SugarRushRole) Reset() {
	*x = SugarRushRole{}
	mi := &file_common_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SugarRushRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SugarRushRole) ProtoMessage() {}

func (x *SugarRushRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SugarRushRole.ProtoReflect.Descriptor instead.
func (*SugarRushRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{30}
}

func (x *SugarRushRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *SugarRushRole) GetMultiMesh() []int32 {
	if x != nil {
		return x.MultiMesh
	}
	return nil
}

func (x *SugarRushRole) GetStuffMesh() []int32 {
	if x != nil {
		return x.StuffMesh
	}
	return nil
}

func (x *SugarRushRole) GetReelsOffset() []int32 {
	if x != nil {
		return x.ReelsOffset
	}
	return nil
}

func (x *SugarRushRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *SugarRushRole) GetBetCount() int64 {
	if x != nil {
		return x.BetCount
	}
	return 0
}

func (x *SugarRushRole) GetRoundEnd() bool {
	if x != nil {
		return x.RoundEnd
	}
	return false
}

func (x *SugarRushRole) GetNextCascadeModel() *SugarRushRole {
	if x != nil {
		return x.NextCascadeModel
	}
	return nil
}

type SweetBonanzaRole struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CR               *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	MeshOffset       []int32                `protobuf:"varint,2,rep,packed,name=MeshOffset,proto3" json:"MeshOffset,omitempty"`
	MeshStuff        []int32                `protobuf:"varint,3,rep,packed,name=MeshStuff,proto3" json:"MeshStuff,omitempty"`
	MeshMulti        []int32                `protobuf:"varint,4,rep,packed,name=MeshMulti,proto3" json:"MeshMulti,omitempty"`
	MathVersion      string                 `protobuf:"bytes,5,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	RoundEnd         bool                   `protobuf:"varint,6,opt,name=RoundEnd,proto3" json:"RoundEnd,omitempty"`
	NextCascadeModel *SweetBonanzaRole      `protobuf:"bytes,7,opt,name=NextCascadeModel,proto3" json:"NextCascadeModel,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SweetBonanzaRole) Reset() {
	*x = SweetBonanzaRole{}
	mi := &file_common_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SweetBonanzaRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SweetBonanzaRole) ProtoMessage() {}

func (x *SweetBonanzaRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SweetBonanzaRole.ProtoReflect.Descriptor instead.
func (*SweetBonanzaRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{31}
}

func (x *SweetBonanzaRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *SweetBonanzaRole) GetMeshOffset() []int32 {
	if x != nil {
		return x.MeshOffset
	}
	return nil
}

func (x *SweetBonanzaRole) GetMeshStuff() []int32 {
	if x != nil {
		return x.MeshStuff
	}
	return nil
}

func (x *SweetBonanzaRole) GetMeshMulti() []int32 {
	if x != nil {
		return x.MeshMulti
	}
	return nil
}

func (x *SweetBonanzaRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *SweetBonanzaRole) GetRoundEnd() bool {
	if x != nil {
		return x.RoundEnd
	}
	return false
}

func (x *SweetBonanzaRole) GetNextCascadeModel() *SweetBonanzaRole {
	if x != nil {
		return x.NextCascadeModel
	}
	return nil
}

type WildGangRole struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CR              *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	MathVersion     string                 `protobuf:"bytes,2,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	MisteryTarget   int32                  `protobuf:"varint,3,opt,name=MisteryTarget,proto3" json:"MisteryTarget,omitempty"`
	Multiplier      int32                  `protobuf:"varint,4,opt,name=Multiplier,proto3" json:"Multiplier,omitempty"`
	WildMultipliers []int32                `protobuf:"varint,5,rep,packed,name=WildMultipliers,proto3" json:"WildMultipliers,omitempty"`
	WildTimes       []int32                `protobuf:"varint,6,rep,packed,name=WildTimes,proto3" json:"WildTimes,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *WildGangRole) Reset() {
	*x = WildGangRole{}
	mi := &file_common_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WildGangRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WildGangRole) ProtoMessage() {}

func (x *WildGangRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WildGangRole.ProtoReflect.Descriptor instead.
func (*WildGangRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{32}
}

func (x *WildGangRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *WildGangRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *WildGangRole) GetMisteryTarget() int32 {
	if x != nil {
		return x.MisteryTarget
	}
	return 0
}

func (x *WildGangRole) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *WildGangRole) GetWildMultipliers() []int32 {
	if x != nil {
		return x.WildMultipliers
	}
	return nil
}

func (x *WildGangRole) GetWildTimes() []int32 {
	if x != nil {
		return x.WildTimes
	}
	return nil
}

type GatesOfOlympusRole struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CR                *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	MathVersion       string                 `protobuf:"bytes,2,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	Multiplier        int32                  `protobuf:"varint,3,opt,name=Multiplier,proto3" json:"Multiplier,omitempty"`
	MeshStuff         []int32                `protobuf:"varint,4,rep,packed,name=MeshStuff,proto3" json:"MeshStuff,omitempty"`
	MeshOffset        []int32                `protobuf:"varint,5,rep,packed,name=MeshOffset,proto3" json:"MeshOffset,omitempty"`
	MeshReel          int32                  `protobuf:"varint,6,opt,name=MeshReel,proto3" json:"MeshReel,omitempty"`
	FSMultiType       int32                  `protobuf:"varint,7,opt,name=FSMultiType,proto3" json:"FSMultiType,omitempty"`
	FSWin             float64                `protobuf:"fixed64,8,opt,name=FSWin,proto3" json:"FSWin,omitempty"`
	MeshRandCol       []int32                `protobuf:"varint,9,rep,packed,name=MeshRandCol,proto3" json:"MeshRandCol,omitempty"`
	FGGameStateBefore int32                  `protobuf:"varint,10,opt,name=FGGameStateBefore,proto3" json:"FGGameStateBefore,omitempty"`
	RoundEnd          bool                   `protobuf:"varint,11,opt,name=RoundEnd,proto3" json:"RoundEnd,omitempty"`
	NextCascadeModel  *GatesOfOlympusRole    `protobuf:"bytes,12,opt,name=NextCascadeModel,proto3" json:"NextCascadeModel,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GatesOfOlympusRole) Reset() {
	*x = GatesOfOlympusRole{}
	mi := &file_common_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GatesOfOlympusRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatesOfOlympusRole) ProtoMessage() {}

func (x *GatesOfOlympusRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatesOfOlympusRole.ProtoReflect.Descriptor instead.
func (*GatesOfOlympusRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{33}
}

func (x *GatesOfOlympusRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *GatesOfOlympusRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *GatesOfOlympusRole) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *GatesOfOlympusRole) GetMeshStuff() []int32 {
	if x != nil {
		return x.MeshStuff
	}
	return nil
}

func (x *GatesOfOlympusRole) GetMeshOffset() []int32 {
	if x != nil {
		return x.MeshOffset
	}
	return nil
}

func (x *GatesOfOlympusRole) GetMeshReel() int32 {
	if x != nil {
		return x.MeshReel
	}
	return 0
}

func (x *GatesOfOlympusRole) GetFSMultiType() int32 {
	if x != nil {
		return x.FSMultiType
	}
	return 0
}

func (x *GatesOfOlympusRole) GetFSWin() float64 {
	if x != nil {
		return x.FSWin
	}
	return 0
}

func (x *GatesOfOlympusRole) GetMeshRandCol() []int32 {
	if x != nil {
		return x.MeshRandCol
	}
	return nil
}

func (x *GatesOfOlympusRole) GetFGGameStateBefore() int32 {
	if x != nil {
		return x.FGGameStateBefore
	}
	return 0
}

func (x *GatesOfOlympusRole) GetRoundEnd() bool {
	if x != nil {
		return x.RoundEnd
	}
	return false
}

func (x *GatesOfOlympusRole) GetNextCascadeModel() *GatesOfOlympusRole {
	if x != nil {
		return x.NextCascadeModel
	}
	return nil
}

type BeautifulgirlRole struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CR                *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	MathVersion       string                 `protobuf:"bytes,2,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	Multiplier        int32                  `protobuf:"varint,3,opt,name=Multiplier,proto3" json:"Multiplier,omitempty"`
	MeshStuff         []int32                `protobuf:"varint,4,rep,packed,name=MeshStuff,proto3" json:"MeshStuff,omitempty"`
	MeshOffset        []int32                `protobuf:"varint,5,rep,packed,name=MeshOffset,proto3" json:"MeshOffset,omitempty"`
	MeshReel          int32                  `protobuf:"varint,6,opt,name=MeshReel,proto3" json:"MeshReel,omitempty"`
	FSMultiType       int32                  `protobuf:"varint,7,opt,name=FSMultiType,proto3" json:"FSMultiType,omitempty"`
	FSWin             float64                `protobuf:"fixed64,8,opt,name=FSWin,proto3" json:"FSWin,omitempty"`
	MeshRandCol       []int32                `protobuf:"varint,9,rep,packed,name=MeshRandCol,proto3" json:"MeshRandCol,omitempty"`
	FGGameStateBefore int32                  `protobuf:"varint,10,opt,name=FGGameStateBefore,proto3" json:"FGGameStateBefore,omitempty"`
	RoundEnd          bool                   `protobuf:"varint,11,opt,name=RoundEnd,proto3" json:"RoundEnd,omitempty"`
	NextCascadeModel  *BeautifulgirlRole     `protobuf:"bytes,12,opt,name=NextCascadeModel,proto3" json:"NextCascadeModel,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BeautifulgirlRole) Reset() {
	*x = BeautifulgirlRole{}
	mi := &file_common_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeautifulgirlRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeautifulgirlRole) ProtoMessage() {}

func (x *BeautifulgirlRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeautifulgirlRole.ProtoReflect.Descriptor instead.
func (*BeautifulgirlRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{34}
}

func (x *BeautifulgirlRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *BeautifulgirlRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *BeautifulgirlRole) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *BeautifulgirlRole) GetMeshStuff() []int32 {
	if x != nil {
		return x.MeshStuff
	}
	return nil
}

func (x *BeautifulgirlRole) GetMeshOffset() []int32 {
	if x != nil {
		return x.MeshOffset
	}
	return nil
}

func (x *BeautifulgirlRole) GetMeshReel() int32 {
	if x != nil {
		return x.MeshReel
	}
	return 0
}

func (x *BeautifulgirlRole) GetFSMultiType() int32 {
	if x != nil {
		return x.FSMultiType
	}
	return 0
}

func (x *BeautifulgirlRole) GetFSWin() float64 {
	if x != nil {
		return x.FSWin
	}
	return 0
}

func (x *BeautifulgirlRole) GetMeshRandCol() []int32 {
	if x != nil {
		return x.MeshRandCol
	}
	return nil
}

func (x *BeautifulgirlRole) GetFGGameStateBefore() int32 {
	if x != nil {
		return x.FGGameStateBefore
	}
	return 0
}

func (x *BeautifulgirlRole) GetRoundEnd() bool {
	if x != nil {
		return x.RoundEnd
	}
	return false
}

func (x *BeautifulgirlRole) GetNextCascadeModel() *BeautifulgirlRole {
	if x != nil {
		return x.NextCascadeModel
	}
	return nil
}

type DogHouseRole struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CR            *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	MathVersion   string                 `protobuf:"bytes,2,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	StickyWilds   []int32                `protobuf:"varint,3,rep,packed,name=StickyWilds,proto3" json:"StickyWilds,omitempty"`
	SCCount       int32                  `protobuf:"varint,4,opt,name=SCCount,proto3" json:"SCCount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DogHouseRole) Reset() {
	*x = DogHouseRole{}
	mi := &file_common_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DogHouseRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DogHouseRole) ProtoMessage() {}

func (x *DogHouseRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DogHouseRole.ProtoReflect.Descriptor instead.
func (*DogHouseRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{35}
}

func (x *DogHouseRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *DogHouseRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *DogHouseRole) GetStickyWilds() []int32 {
	if x != nil {
		return x.StickyWilds
	}
	return nil
}

func (x *DogHouseRole) GetSCCount() int32 {
	if x != nil {
		return x.SCCount
	}
	return 0
}

type MagicalMineVS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Multiple1     int32                  `protobuf:"varint,1,opt,name=Multiple1,proto3" json:"Multiple1,omitempty"`
	Multiple2     int32                  `protobuf:"varint,2,opt,name=Multiple2,proto3" json:"Multiple2,omitempty"`
	WinMultiple   int32                  `protobuf:"varint,3,opt,name=WinMultiple,proto3" json:"WinMultiple,omitempty"`
	MeshIndex     int32                  `protobuf:"varint,4,opt,name=MeshIndex,proto3" json:"MeshIndex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MagicalMineVS) Reset() {
	*x = MagicalMineVS{}
	mi := &file_common_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MagicalMineVS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicalMineVS) ProtoMessage() {}

func (x *MagicalMineVS) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicalMineVS.ProtoReflect.Descriptor instead.
func (*MagicalMineVS) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{36}
}

func (x *MagicalMineVS) GetMultiple1() int32 {
	if x != nil {
		return x.Multiple1
	}
	return 0
}

func (x *MagicalMineVS) GetMultiple2() int32 {
	if x != nil {
		return x.Multiple2
	}
	return 0
}

func (x *MagicalMineVS) GetWinMultiple() int32 {
	if x != nil {
		return x.WinMultiple
	}
	return 0
}

func (x *MagicalMineVS) GetMeshIndex() int32 {
	if x != nil {
		return x.MeshIndex
	}
	return 0
}

type MagicalMineRole struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RoleId             string                 `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	ParentId           int64                  `protobuf:"varint,2,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	SubId              int64                  `protobuf:"varint,3,opt,name=SubId,proto3" json:"SubId,omitempty"`
	Score              float64                `protobuf:"fixed64,4,opt,name=Score,proto3" json:"Score,omitempty"`
	Bet                float64                `protobuf:"fixed64,5,opt,name=Bet,proto3" json:"Bet,omitempty"`
	Mesh               []int32                `protobuf:"varint,6,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	GameState          int32                  `protobuf:"varint,7,opt,name=GameState,proto3" json:"GameState,omitempty"`
	WinTypes           []*WinType             `protobuf:"bytes,8,rep,name=WinTypes,proto3" json:"WinTypes,omitempty"`
	TotalWin           float64                `protobuf:"fixed64,9,opt,name=TotalWin,proto3" json:"TotalWin,omitempty"`
	FreeSpinTime       int32                  `protobuf:"varint,10,opt,name=FreeSpinTime,proto3" json:"FreeSpinTime,omitempty"`
	TotalFreeSpinTime  int32                  `protobuf:"varint,11,opt,name=TotalFreeSpinTime,proto3" json:"TotalFreeSpinTime,omitempty"`
	TotalFreeSpinScore float64                `protobuf:"fixed64,12,opt,name=TotalFreeSpinScore,proto3" json:"TotalFreeSpinScore,omitempty"`
	TopWilds           int32                  `protobuf:"varint,13,opt,name=TopWilds,proto3" json:"TopWilds,omitempty"`
	TopMultiple        int32                  `protobuf:"varint,14,opt,name=TopMultiple,proto3" json:"TopMultiple,omitempty"`
	MagicalMineVS      []*MagicalMineVS       `protobuf:"bytes,15,rep,name=MagicalMineVS,proto3" json:"MagicalMineVS,omitempty"`
	MathVersion        string                 `protobuf:"bytes,16,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MagicalMineRole) Reset() {
	*x = MagicalMineRole{}
	mi := &file_common_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MagicalMineRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicalMineRole) ProtoMessage() {}

func (x *MagicalMineRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicalMineRole.ProtoReflect.Descriptor instead.
func (*MagicalMineRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{37}
}

func (x *MagicalMineRole) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *MagicalMineRole) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *MagicalMineRole) GetSubId() int64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *MagicalMineRole) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MagicalMineRole) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *MagicalMineRole) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *MagicalMineRole) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

func (x *MagicalMineRole) GetWinTypes() []*WinType {
	if x != nil {
		return x.WinTypes
	}
	return nil
}

func (x *MagicalMineRole) GetTotalWin() float64 {
	if x != nil {
		return x.TotalWin
	}
	return 0
}

func (x *MagicalMineRole) GetFreeSpinTime() int32 {
	if x != nil {
		return x.FreeSpinTime
	}
	return 0
}

func (x *MagicalMineRole) GetTotalFreeSpinTime() int32 {
	if x != nil {
		return x.TotalFreeSpinTime
	}
	return 0
}

func (x *MagicalMineRole) GetTotalFreeSpinScore() float64 {
	if x != nil {
		return x.TotalFreeSpinScore
	}
	return 0
}

func (x *MagicalMineRole) GetTopWilds() int32 {
	if x != nil {
		return x.TopWilds
	}
	return 0
}

func (x *MagicalMineRole) GetTopMultiple() int32 {
	if x != nil {
		return x.TopMultiple
	}
	return 0
}

func (x *MagicalMineRole) GetMagicalMineVS() []*MagicalMineVS {
	if x != nil {
		return x.MagicalMineVS
	}
	return nil
}

func (x *MagicalMineRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

type BigBassMoneyData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Score         float32                `protobuf:"fixed32,2,opt,name=Score,proto3" json:"Score,omitempty"`
	Multiple      int32                  `protobuf:"varint,3,opt,name=Multiple,proto3" json:"Multiple,omitempty"`
	Activation    bool                   `protobuf:"varint,4,opt,name=Activation,proto3" json:"Activation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BigBassMoneyData) Reset() {
	*x = BigBassMoneyData{}
	mi := &file_common_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BigBassMoneyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigBassMoneyData) ProtoMessage() {}

func (x *BigBassMoneyData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigBassMoneyData.ProtoReflect.Descriptor instead.
func (*BigBassMoneyData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{38}
}

func (x *BigBassMoneyData) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BigBassMoneyData) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *BigBassMoneyData) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *BigBassMoneyData) GetActivation() bool {
	if x != nil {
		return x.Activation
	}
	return false
}

type BigBassRandColData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Cell          int32                  `protobuf:"varint,2,opt,name=Cell,proto3" json:"Cell,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BigBassRandColData) Reset() {
	*x = BigBassRandColData{}
	mi := &file_common_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BigBassRandColData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigBassRandColData) ProtoMessage() {}

func (x *BigBassRandColData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigBassRandColData.ProtoReflect.Descriptor instead.
func (*BigBassRandColData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{39}
}

func (x *BigBassRandColData) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BigBassRandColData) GetCell() int32 {
	if x != nil {
		return x.Cell
	}
	return 0
}

type BigBassRole struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	RoleId               string                 `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	ParentId             int64                  `protobuf:"varint,2,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	SubId                int64                  `protobuf:"varint,3,opt,name=SubId,proto3" json:"SubId,omitempty"`
	Score                float64                `protobuf:"fixed64,4,opt,name=Score,proto3" json:"Score,omitempty"`
	Bet                  float64                `protobuf:"fixed64,5,opt,name=Bet,proto3" json:"Bet,omitempty"`
	Mesh                 []int32                `protobuf:"varint,6,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	GameState            int32                  `protobuf:"varint,7,opt,name=GameState,proto3" json:"GameState,omitempty"`
	WinTypes             []*WinType             `protobuf:"bytes,8,rep,name=WinTypes,proto3" json:"WinTypes,omitempty"`
	TotalWin             float64                `protobuf:"fixed64,9,opt,name=TotalWin,proto3" json:"TotalWin,omitempty"`
	RandScatter          int32                  `protobuf:"varint,10,opt,name=RandScatter,proto3" json:"RandScatter,omitempty"`
	MoneyDatas           []*BigBassMoneyData    `protobuf:"bytes,11,rep,name=MoneyDatas,proto3" json:"MoneyDatas,omitempty"`
	MoneyTriggered       bool                   `protobuf:"varint,12,opt,name=MoneyTriggered,proto3" json:"MoneyTriggered,omitempty"`
	FreeSpinTime         int32                  `protobuf:"varint,13,opt,name=FreeSpinTime,proto3" json:"FreeSpinTime,omitempty"`
	TotalFreeSpinTime    int32                  `protobuf:"varint,14,opt,name=TotalFreeSpinTime,proto3" json:"TotalFreeSpinTime,omitempty"`
	TotalFreeSpinScore   float64                `protobuf:"fixed64,15,opt,name=TotalFreeSpinScore,proto3" json:"TotalFreeSpinScore,omitempty"`
	MoneyMultipleMesh    []int32                `protobuf:"varint,16,rep,packed,name=MoneyMultipleMesh,proto3" json:"MoneyMultipleMesh,omitempty"`
	WildCount            int32                  `protobuf:"varint,17,opt,name=WildCount,proto3" json:"WildCount,omitempty"`
	WildTriggeredNum     int32                  `protobuf:"varint,18,opt,name=WildTriggeredNum,proto3" json:"WildTriggeredNum,omitempty"`
	RandMoneys           []int32                `protobuf:"varint,19,rep,packed,name=RandMoneys,proto3" json:"RandMoneys,omitempty"`
	RandAllMesh          []int32                `protobuf:"varint,20,rep,packed,name=RandAllMesh,proto3" json:"RandAllMesh,omitempty"`
	RandColDatas         []*BigBassRandColData  `protobuf:"bytes,21,rep,name=RandColDatas,proto3" json:"RandColDatas,omitempty"`
	ScatterInMesh        bool                   `protobuf:"varint,22,opt,name=ScatterInMesh,proto3" json:"ScatterInMesh,omitempty"`
	MustWildTime         int32                  `protobuf:"varint,23,opt,name=MustWildTime,proto3" json:"MustWildTime,omitempty"`
	MustWildCount        int32                  `protobuf:"varint,24,opt,name=MustWildCount,proto3" json:"MustWildCount,omitempty"`
	FreeSpinStartTime    int32                  `protobuf:"varint,25,opt,name=FreeSpinStartTime,proto3" json:"FreeSpinStartTime,omitempty"`
	RandColSpinDirection int32                  `protobuf:"varint,26,opt,name=RandColSpinDirection,proto3" json:"RandColSpinDirection,omitempty"`
	RandColSpinCount     int32                  `protobuf:"varint,27,opt,name=RandColSpinCount,proto3" json:"RandColSpinCount,omitempty"`
	LastLayoutsID        int32                  `protobuf:"varint,28,opt,name=LastLayoutsID,proto3" json:"LastLayoutsID,omitempty"`
	LastPositions        []int32                `protobuf:"varint,29,rep,packed,name=LastPositions,proto3" json:"LastPositions,omitempty"`
	WinLineScore         int32                  `protobuf:"varint,30,opt,name=WinLineScore,proto3" json:"WinLineScore,omitempty"`
	FGWinLineScore       int32                  `protobuf:"varint,31,opt,name=FGWinLineScore,proto3" json:"FGWinLineScore,omitempty"`
	FreeSpinTimeBegin    int32                  `protobuf:"varint,32,opt,name=FreeSpinTimeBegin,proto3" json:"FreeSpinTimeBegin,omitempty"`
	FGGameStateBefore    int32                  `protobuf:"varint,33,opt,name=FGGameStateBefore,proto3" json:"FGGameStateBefore,omitempty"`
	MathVersion          string                 `protobuf:"bytes,34,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	RoundEnd             bool                   `protobuf:"varint,35,opt,name=RoundEnd,proto3" json:"RoundEnd,omitempty"`
	NextCascadeModel     *BigBassRole           `protobuf:"bytes,36,opt,name=NextCascadeModel,proto3" json:"NextCascadeModel,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *BigBassRole) Reset() {
	*x = BigBassRole{}
	mi := &file_common_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BigBassRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigBassRole) ProtoMessage() {}

func (x *BigBassRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigBassRole.ProtoReflect.Descriptor instead.
func (*BigBassRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{40}
}

func (x *BigBassRole) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *BigBassRole) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *BigBassRole) GetSubId() int64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *BigBassRole) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *BigBassRole) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *BigBassRole) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *BigBassRole) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

func (x *BigBassRole) GetWinTypes() []*WinType {
	if x != nil {
		return x.WinTypes
	}
	return nil
}

func (x *BigBassRole) GetTotalWin() float64 {
	if x != nil {
		return x.TotalWin
	}
	return 0
}

func (x *BigBassRole) GetRandScatter() int32 {
	if x != nil {
		return x.RandScatter
	}
	return 0
}

func (x *BigBassRole) GetMoneyDatas() []*BigBassMoneyData {
	if x != nil {
		return x.MoneyDatas
	}
	return nil
}

func (x *BigBassRole) GetMoneyTriggered() bool {
	if x != nil {
		return x.MoneyTriggered
	}
	return false
}

func (x *BigBassRole) GetFreeSpinTime() int32 {
	if x != nil {
		return x.FreeSpinTime
	}
	return 0
}

func (x *BigBassRole) GetTotalFreeSpinTime() int32 {
	if x != nil {
		return x.TotalFreeSpinTime
	}
	return 0
}

func (x *BigBassRole) GetTotalFreeSpinScore() float64 {
	if x != nil {
		return x.TotalFreeSpinScore
	}
	return 0
}

func (x *BigBassRole) GetMoneyMultipleMesh() []int32 {
	if x != nil {
		return x.MoneyMultipleMesh
	}
	return nil
}

func (x *BigBassRole) GetWildCount() int32 {
	if x != nil {
		return x.WildCount
	}
	return 0
}

func (x *BigBassRole) GetWildTriggeredNum() int32 {
	if x != nil {
		return x.WildTriggeredNum
	}
	return 0
}

func (x *BigBassRole) GetRandMoneys() []int32 {
	if x != nil {
		return x.RandMoneys
	}
	return nil
}

func (x *BigBassRole) GetRandAllMesh() []int32 {
	if x != nil {
		return x.RandAllMesh
	}
	return nil
}

func (x *BigBassRole) GetRandColDatas() []*BigBassRandColData {
	if x != nil {
		return x.RandColDatas
	}
	return nil
}

func (x *BigBassRole) GetScatterInMesh() bool {
	if x != nil {
		return x.ScatterInMesh
	}
	return false
}

func (x *BigBassRole) GetMustWildTime() int32 {
	if x != nil {
		return x.MustWildTime
	}
	return 0
}

func (x *BigBassRole) GetMustWildCount() int32 {
	if x != nil {
		return x.MustWildCount
	}
	return 0
}

func (x *BigBassRole) GetFreeSpinStartTime() int32 {
	if x != nil {
		return x.FreeSpinStartTime
	}
	return 0
}

func (x *BigBassRole) GetRandColSpinDirection() int32 {
	if x != nil {
		return x.RandColSpinDirection
	}
	return 0
}

func (x *BigBassRole) GetRandColSpinCount() int32 {
	if x != nil {
		return x.RandColSpinCount
	}
	return 0
}

func (x *BigBassRole) GetLastLayoutsID() int32 {
	if x != nil {
		return x.LastLayoutsID
	}
	return 0
}

func (x *BigBassRole) GetLastPositions() []int32 {
	if x != nil {
		return x.LastPositions
	}
	return nil
}

func (x *BigBassRole) GetWinLineScore() int32 {
	if x != nil {
		return x.WinLineScore
	}
	return 0
}

func (x *BigBassRole) GetFGWinLineScore() int32 {
	if x != nil {
		return x.FGWinLineScore
	}
	return 0
}

func (x *BigBassRole) GetFreeSpinTimeBegin() int32 {
	if x != nil {
		return x.FreeSpinTimeBegin
	}
	return 0
}

func (x *BigBassRole) GetFGGameStateBefore() int32 {
	if x != nil {
		return x.FGGameStateBefore
	}
	return 0
}

func (x *BigBassRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *BigBassRole) GetRoundEnd() bool {
	if x != nil {
		return x.RoundEnd
	}
	return false
}

func (x *BigBassRole) GetNextCascadeModel() *BigBassRole {
	if x != nil {
		return x.NextCascadeModel
	}
	return nil
}

type ClashCashCounter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Level         int32                  `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`
	Count         int32                  `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	Trigger       bool                   `protobuf:"varint,3,opt,name=Trigger,proto3" json:"Trigger,omitempty"`
	LevelTrigger  bool                   `protobuf:"varint,4,opt,name=LevelTrigger,proto3" json:"LevelTrigger,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClashCashCounter) Reset() {
	*x = ClashCashCounter{}
	mi := &file_common_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClashCashCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClashCashCounter) ProtoMessage() {}

func (x *ClashCashCounter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClashCashCounter.ProtoReflect.Descriptor instead.
func (*ClashCashCounter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{41}
}

func (x *ClashCashCounter) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ClashCashCounter) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ClashCashCounter) GetTrigger() bool {
	if x != nil {
		return x.Trigger
	}
	return false
}

func (x *ClashCashCounter) GetLevelTrigger() bool {
	if x != nil {
		return x.LevelTrigger
	}
	return false
}

type ClashCashGlovesMul struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Multiplier    int32                  `protobuf:"varint,2,opt,name=Multiplier,proto3" json:"Multiplier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClashCashGlovesMul) Reset() {
	*x = ClashCashGlovesMul{}
	mi := &file_common_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClashCashGlovesMul) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClashCashGlovesMul) ProtoMessage() {}

func (x *ClashCashGlovesMul) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClashCashGlovesMul.ProtoReflect.Descriptor instead.
func (*ClashCashGlovesMul) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{42}
}

func (x *ClashCashGlovesMul) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ClashCashGlovesMul) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

type ClashCashGloves struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Index           int32                  `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Trigger         bool                   `protobuf:"varint,2,opt,name=Trigger,proto3" json:"Trigger,omitempty"`
	TotalMultiplier int32                  `protobuf:"varint,3,opt,name=TotalMultiplier,proto3" json:"TotalMultiplier,omitempty"`
	MulData         []*ClashCashGlovesMul  `protobuf:"bytes,4,rep,name=MulData,proto3" json:"MulData,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ClashCashGloves) Reset() {
	*x = ClashCashGloves{}
	mi := &file_common_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClashCashGloves) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClashCashGloves) ProtoMessage() {}

func (x *ClashCashGloves) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClashCashGloves.ProtoReflect.Descriptor instead.
func (*ClashCashGloves) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{43}
}

func (x *ClashCashGloves) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ClashCashGloves) GetTrigger() bool {
	if x != nil {
		return x.Trigger
	}
	return false
}

func (x *ClashCashGloves) GetTotalMultiplier() int32 {
	if x != nil {
		return x.TotalMultiplier
	}
	return 0
}

func (x *ClashCashGloves) GetMulData() []*ClashCashGlovesMul {
	if x != nil {
		return x.MulData
	}
	return nil
}

type ClashCashRole struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CR                *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	MathVersion       string                 `protobuf:"bytes,2,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	GlovesData        []*ClashCashGloves     `protobuf:"bytes,3,rep,name=GlovesData,proto3" json:"GlovesData,omitempty"`
	Counters          []*ClashCashCounter    `protobuf:"bytes,4,rep,name=Counters,proto3" json:"Counters,omitempty"`
	FGGameStateBefore int32                  `protobuf:"varint,5,opt,name=FGGameStateBefore,proto3" json:"FGGameStateBefore,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ClashCashRole) Reset() {
	*x = ClashCashRole{}
	mi := &file_common_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClashCashRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClashCashRole) ProtoMessage() {}

func (x *ClashCashRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClashCashRole.ProtoReflect.Descriptor instead.
func (*ClashCashRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{44}
}

func (x *ClashCashRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *ClashCashRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *ClashCashRole) GetGlovesData() []*ClashCashGloves {
	if x != nil {
		return x.GlovesData
	}
	return nil
}

func (x *ClashCashRole) GetCounters() []*ClashCashCounter {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *ClashCashRole) GetFGGameStateBefore() int32 {
	if x != nil {
		return x.FGGameStateBefore
	}
	return 0
}

type GlodOfOlympusRole struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CR                *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	MathVersion       string                 `protobuf:"bytes,2,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	Multiplier        int32                  `protobuf:"varint,3,opt,name=Multiplier,proto3" json:"Multiplier,omitempty"`
	MeshStuff         []int32                `protobuf:"varint,4,rep,packed,name=MeshStuff,proto3" json:"MeshStuff,omitempty"`
	MeshOffset        []int32                `protobuf:"varint,5,rep,packed,name=MeshOffset,proto3" json:"MeshOffset,omitempty"`
	MeshReel          int32                  `protobuf:"varint,6,opt,name=MeshReel,proto3" json:"MeshReel,omitempty"`
	FSMultiType       int32                  `protobuf:"varint,7,opt,name=FSMultiType,proto3" json:"FSMultiType,omitempty"`
	FSWin             float64                `protobuf:"fixed64,8,opt,name=FSWin,proto3" json:"FSWin,omitempty"`
	MeshRandCol       []int32                `protobuf:"varint,9,rep,packed,name=MeshRandCol,proto3" json:"MeshRandCol,omitempty"`
	FGGameStateBefore int32                  `protobuf:"varint,10,opt,name=FGGameStateBefore,proto3" json:"FGGameStateBefore,omitempty"`
	RoundEnd          bool                   `protobuf:"varint,11,opt,name=RoundEnd,proto3" json:"RoundEnd,omitempty"`
	NextCascadeModel  *GlodOfOlympusRole     `protobuf:"bytes,12,opt,name=NextCascadeModel,proto3" json:"NextCascadeModel,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GlodOfOlympusRole) Reset() {
	*x = GlodOfOlympusRole{}
	mi := &file_common_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlodOfOlympusRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlodOfOlympusRole) ProtoMessage() {}

func (x *GlodOfOlympusRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlodOfOlympusRole.ProtoReflect.Descriptor instead.
func (*GlodOfOlympusRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{45}
}

func (x *GlodOfOlympusRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *GlodOfOlympusRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *GlodOfOlympusRole) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *GlodOfOlympusRole) GetMeshStuff() []int32 {
	if x != nil {
		return x.MeshStuff
	}
	return nil
}

func (x *GlodOfOlympusRole) GetMeshOffset() []int32 {
	if x != nil {
		return x.MeshOffset
	}
	return nil
}

func (x *GlodOfOlympusRole) GetMeshReel() int32 {
	if x != nil {
		return x.MeshReel
	}
	return 0
}

func (x *GlodOfOlympusRole) GetFSMultiType() int32 {
	if x != nil {
		return x.FSMultiType
	}
	return 0
}

func (x *GlodOfOlympusRole) GetFSWin() float64 {
	if x != nil {
		return x.FSWin
	}
	return 0
}

func (x *GlodOfOlympusRole) GetMeshRandCol() []int32 {
	if x != nil {
		return x.MeshRandCol
	}
	return nil
}

func (x *GlodOfOlympusRole) GetFGGameStateBefore() int32 {
	if x != nil {
		return x.FGGameStateBefore
	}
	return 0
}

func (x *GlodOfOlympusRole) GetRoundEnd() bool {
	if x != nil {
		return x.RoundEnd
	}
	return false
}

func (x *GlodOfOlympusRole) GetNextCascadeModel() *GlodOfOlympusRole {
	if x != nil {
		return x.NextCascadeModel
	}
	return nil
}

type GatesCopyOfOlympusRole struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CR                *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	MathVersion       string                 `protobuf:"bytes,2,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	Multiplier        int32                  `protobuf:"varint,3,opt,name=Multiplier,proto3" json:"Multiplier,omitempty"`
	MeshStuff         []int32                `protobuf:"varint,4,rep,packed,name=MeshStuff,proto3" json:"MeshStuff,omitempty"`
	MeshOffset        []int32                `protobuf:"varint,5,rep,packed,name=MeshOffset,proto3" json:"MeshOffset,omitempty"`
	MeshReel          int32                  `protobuf:"varint,6,opt,name=MeshReel,proto3" json:"MeshReel,omitempty"`
	FSMultiType       int32                  `protobuf:"varint,7,opt,name=FSMultiType,proto3" json:"FSMultiType,omitempty"`
	FSWin             float64                `protobuf:"fixed64,8,opt,name=FSWin,proto3" json:"FSWin,omitempty"`
	MeshRandCol       []int32                `protobuf:"varint,9,rep,packed,name=MeshRandCol,proto3" json:"MeshRandCol,omitempty"`
	FGGameStateBefore int32                  `protobuf:"varint,10,opt,name=FGGameStateBefore,proto3" json:"FGGameStateBefore,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GatesCopyOfOlympusRole) Reset() {
	*x = GatesCopyOfOlympusRole{}
	mi := &file_common_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GatesCopyOfOlympusRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatesCopyOfOlympusRole) ProtoMessage() {}

func (x *GatesCopyOfOlympusRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatesCopyOfOlympusRole.ProtoReflect.Descriptor instead.
func (*GatesCopyOfOlympusRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{46}
}

func (x *GatesCopyOfOlympusRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *GatesCopyOfOlympusRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *GatesCopyOfOlympusRole) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *GatesCopyOfOlympusRole) GetMeshStuff() []int32 {
	if x != nil {
		return x.MeshStuff
	}
	return nil
}

func (x *GatesCopyOfOlympusRole) GetMeshOffset() []int32 {
	if x != nil {
		return x.MeshOffset
	}
	return nil
}

func (x *GatesCopyOfOlympusRole) GetMeshReel() int32 {
	if x != nil {
		return x.MeshReel
	}
	return 0
}

func (x *GatesCopyOfOlympusRole) GetFSMultiType() int32 {
	if x != nil {
		return x.FSMultiType
	}
	return 0
}

func (x *GatesCopyOfOlympusRole) GetFSWin() float64 {
	if x != nil {
		return x.FSWin
	}
	return 0
}

func (x *GatesCopyOfOlympusRole) GetMeshRandCol() []int32 {
	if x != nil {
		return x.MeshRandCol
	}
	return nil
}

func (x *GatesCopyOfOlympusRole) GetFGGameStateBefore() int32 {
	if x != nil {
		return x.FGGameStateBefore
	}
	return 0
}

type SugarCopyRushRole struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CR            *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	MultiMesh     []int32                `protobuf:"varint,2,rep,packed,name=MultiMesh,proto3" json:"MultiMesh,omitempty"`
	StuffMesh     []int32                `protobuf:"varint,3,rep,packed,name=StuffMesh,proto3" json:"StuffMesh,omitempty"`
	ReelsOffset   []int32                `protobuf:"varint,4,rep,packed,name=ReelsOffset,proto3" json:"ReelsOffset,omitempty"`
	MathVersion   string                 `protobuf:"bytes,5,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	BetCount      int64                  `protobuf:"varint,6,opt,name=BetCount,proto3" json:"BetCount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SugarCopyRushRole) Reset() {
	*x = SugarCopyRushRole{}
	mi := &file_common_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SugarCopyRushRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SugarCopyRushRole) ProtoMessage() {}

func (x *SugarCopyRushRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SugarCopyRushRole.ProtoReflect.Descriptor instead.
func (*SugarCopyRushRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{47}
}

func (x *SugarCopyRushRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *SugarCopyRushRole) GetMultiMesh() []int32 {
	if x != nil {
		return x.MultiMesh
	}
	return nil
}

func (x *SugarCopyRushRole) GetStuffMesh() []int32 {
	if x != nil {
		return x.StuffMesh
	}
	return nil
}

func (x *SugarCopyRushRole) GetReelsOffset() []int32 {
	if x != nil {
		return x.ReelsOffset
	}
	return nil
}

func (x *SugarCopyRushRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *SugarCopyRushRole) GetBetCount() int64 {
	if x != nil {
		return x.BetCount
	}
	return 0
}

type JacksCryptVS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Multiple1     int32                  `protobuf:"varint,1,opt,name=Multiple1,proto3" json:"Multiple1,omitempty"`
	Multiple2     int32                  `protobuf:"varint,2,opt,name=Multiple2,proto3" json:"Multiple2,omitempty"`
	WinMultiple   int32                  `protobuf:"varint,3,opt,name=WinMultiple,proto3" json:"WinMultiple,omitempty"`
	MeshIndex     int32                  `protobuf:"varint,4,opt,name=MeshIndex,proto3" json:"MeshIndex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JacksCryptVS) Reset() {
	*x = JacksCryptVS{}
	mi := &file_common_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JacksCryptVS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JacksCryptVS) ProtoMessage() {}

func (x *JacksCryptVS) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JacksCryptVS.ProtoReflect.Descriptor instead.
func (*JacksCryptVS) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{48}
}

func (x *JacksCryptVS) GetMultiple1() int32 {
	if x != nil {
		return x.Multiple1
	}
	return 0
}

func (x *JacksCryptVS) GetMultiple2() int32 {
	if x != nil {
		return x.Multiple2
	}
	return 0
}

func (x *JacksCryptVS) GetWinMultiple() int32 {
	if x != nil {
		return x.WinMultiple
	}
	return 0
}

func (x *JacksCryptVS) GetMeshIndex() int32 {
	if x != nil {
		return x.MeshIndex
	}
	return 0
}

type JacksCryptRole struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RoleId             string                 `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	ParentId           int64                  `protobuf:"varint,2,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	SubId              int64                  `protobuf:"varint,3,opt,name=SubId,proto3" json:"SubId,omitempty"`
	Score              float64                `protobuf:"fixed64,4,opt,name=Score,proto3" json:"Score,omitempty"`
	Bet                float64                `protobuf:"fixed64,5,opt,name=Bet,proto3" json:"Bet,omitempty"`
	Mesh               []int32                `protobuf:"varint,6,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	GameState          int32                  `protobuf:"varint,7,opt,name=GameState,proto3" json:"GameState,omitempty"`
	WinTypes           []*WinType             `protobuf:"bytes,8,rep,name=WinTypes,proto3" json:"WinTypes,omitempty"`
	TotalWin           float64                `protobuf:"fixed64,9,opt,name=TotalWin,proto3" json:"TotalWin,omitempty"`
	FreeSpinTime       int32                  `protobuf:"varint,10,opt,name=FreeSpinTime,proto3" json:"FreeSpinTime,omitempty"`
	TotalFreeSpinTime  int32                  `protobuf:"varint,11,opt,name=TotalFreeSpinTime,proto3" json:"TotalFreeSpinTime,omitempty"`
	TotalFreeSpinScore float64                `protobuf:"fixed64,12,opt,name=TotalFreeSpinScore,proto3" json:"TotalFreeSpinScore,omitempty"`
	TopWilds           int32                  `protobuf:"varint,13,opt,name=TopWilds,proto3" json:"TopWilds,omitempty"`
	TopMultiple        int32                  `protobuf:"varint,14,opt,name=TopMultiple,proto3" json:"TopMultiple,omitempty"`
	JacksCryptVS       []*JacksCryptVS        `protobuf:"bytes,15,rep,name=JacksCryptVS,proto3" json:"JacksCryptVS,omitempty"`
	MathVersion        string                 `protobuf:"bytes,16,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *JacksCryptRole) Reset() {
	*x = JacksCryptRole{}
	mi := &file_common_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JacksCryptRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JacksCryptRole) ProtoMessage() {}

func (x *JacksCryptRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JacksCryptRole.ProtoReflect.Descriptor instead.
func (*JacksCryptRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{49}
}

func (x *JacksCryptRole) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *JacksCryptRole) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *JacksCryptRole) GetSubId() int64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *JacksCryptRole) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *JacksCryptRole) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *JacksCryptRole) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *JacksCryptRole) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

func (x *JacksCryptRole) GetWinTypes() []*WinType {
	if x != nil {
		return x.WinTypes
	}
	return nil
}

func (x *JacksCryptRole) GetTotalWin() float64 {
	if x != nil {
		return x.TotalWin
	}
	return 0
}

func (x *JacksCryptRole) GetFreeSpinTime() int32 {
	if x != nil {
		return x.FreeSpinTime
	}
	return 0
}

func (x *JacksCryptRole) GetTotalFreeSpinTime() int32 {
	if x != nil {
		return x.TotalFreeSpinTime
	}
	return 0
}

func (x *JacksCryptRole) GetTotalFreeSpinScore() float64 {
	if x != nil {
		return x.TotalFreeSpinScore
	}
	return 0
}

func (x *JacksCryptRole) GetTopWilds() int32 {
	if x != nil {
		return x.TopWilds
	}
	return 0
}

func (x *JacksCryptRole) GetTopMultiple() int32 {
	if x != nil {
		return x.TopMultiple
	}
	return 0
}

func (x *JacksCryptRole) GetJacksCryptVS() []*JacksCryptVS {
	if x != nil {
		return x.JacksCryptVS
	}
	return nil
}

func (x *JacksCryptRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

// ------------------------------------------------------------------------
// >>> ArcanePortals <<<
type MergeWildData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Target        []int32                `protobuf:"varint,2,rep,packed,name=Target,proto3" json:"Target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeWildData) Reset() {
	*x = MergeWildData{}
	mi := &file_common_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeWildData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeWildData) ProtoMessage() {}

func (x *MergeWildData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeWildData.ProtoReflect.Descriptor instead.
func (*MergeWildData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{50}
}

func (x *MergeWildData) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *MergeWildData) GetTarget() []int32 {
	if x != nil {
		return x.Target
	}
	return nil
}

type ArcanePortalsRole struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	CR                    *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	MathVersion           string                 `protobuf:"bytes,2,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	MultiMesh             []int32                `protobuf:"varint,3,rep,packed,name=MultiMesh,proto3" json:"MultiMesh,omitempty"`
	StuffMesh             []int32                `protobuf:"varint,4,rep,packed,name=StuffMesh,proto3" json:"StuffMesh,omitempty"`
	MeshOffset            []int32                `protobuf:"varint,5,rep,packed,name=MeshOffset,proto3" json:"MeshOffset,omitempty"`
	MeshReel              int32                  `protobuf:"varint,6,opt,name=MeshReel,proto3" json:"MeshReel,omitempty"`
	ClusterWinningID      int32                  `protobuf:"varint,7,opt,name=ClusterWinningID,proto3" json:"ClusterWinningID,omitempty"`
	ClusterWild           []int32                `protobuf:"varint,8,rep,packed,name=ClusterWild,proto3" json:"ClusterWild,omitempty"`
	WinningMark           []int32                `protobuf:"varint,9,rep,packed,name=WinningMark,proto3" json:"WinningMark,omitempty"`
	AvalancheMark         []int32                `protobuf:"varint,10,rep,packed,name=AvalancheMark,proto3" json:"AvalancheMark,omitempty"`
	MultiplierMark        []float64              `protobuf:"fixed64,11,rep,packed,name=MultiplierMark,proto3" json:"MultiplierMark,omitempty"`
	MaxClusterWildsNumber int32                  `protobuf:"varint,12,opt,name=MaxClusterWildsNumber,proto3" json:"MaxClusterWildsNumber,omitempty"`
	PlayAreaWildNew       []int32                `protobuf:"varint,13,rep,packed,name=PlayAreaWildNew,proto3" json:"PlayAreaWildNew,omitempty"`
	PlayAreaWildDelete    []int32                `protobuf:"varint,14,rep,packed,name=PlayAreaWildDelete,proto3" json:"PlayAreaWildDelete,omitempty"`
	PlayAreaWildJump      []int32                `protobuf:"varint,15,rep,packed,name=PlayAreaWildJump,proto3" json:"PlayAreaWildJump,omitempty"`
	WildsMul              []float64              `protobuf:"fixed64,16,rep,packed,name=WildsMul,proto3" json:"WildsMul,omitempty"`
	MergeWildData         []*MergeWildData       `protobuf:"bytes,17,rep,name=MergeWildData,proto3" json:"MergeWildData,omitempty"`
	JumpWild              []int32                `protobuf:"varint,18,rep,packed,name=JumpWild,proto3" json:"JumpWild,omitempty"`
	MeshReelColOffset     []int32                `protobuf:"varint,19,rep,packed,name=MeshReelColOffset,proto3" json:"MeshReelColOffset,omitempty"`
	MaxMultiplier         float64                `protobuf:"fixed64,20,opt,name=MaxMultiplier,proto3" json:"MaxMultiplier,omitempty"`
	StickyWildMultiplier  []float64              `protobuf:"fixed64,21,rep,packed,name=StickyWildMultiplier,proto3" json:"StickyWildMultiplier,omitempty"`
	FSWin                 float64                `protobuf:"fixed64,22,opt,name=FSWin,proto3" json:"FSWin,omitempty"`
	MergeMultiplierMark   []float64              `protobuf:"fixed64,23,rep,packed,name=MergeMultiplierMark,proto3" json:"MergeMultiplierMark,omitempty"`
	RoundEnd              bool                   `protobuf:"varint,24,opt,name=RoundEnd,proto3" json:"RoundEnd,omitempty"`
	NextCascadeModel      *ArcanePortalsRole     `protobuf:"bytes,25,opt,name=NextCascadeModel,proto3" json:"NextCascadeModel,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ArcanePortalsRole) Reset() {
	*x = ArcanePortalsRole{}
	mi := &file_common_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArcanePortalsRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArcanePortalsRole) ProtoMessage() {}

func (x *ArcanePortalsRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArcanePortalsRole.ProtoReflect.Descriptor instead.
func (*ArcanePortalsRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{51}
}

func (x *ArcanePortalsRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *ArcanePortalsRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *ArcanePortalsRole) GetMultiMesh() []int32 {
	if x != nil {
		return x.MultiMesh
	}
	return nil
}

func (x *ArcanePortalsRole) GetStuffMesh() []int32 {
	if x != nil {
		return x.StuffMesh
	}
	return nil
}

func (x *ArcanePortalsRole) GetMeshOffset() []int32 {
	if x != nil {
		return x.MeshOffset
	}
	return nil
}

func (x *ArcanePortalsRole) GetMeshReel() int32 {
	if x != nil {
		return x.MeshReel
	}
	return 0
}

func (x *ArcanePortalsRole) GetClusterWinningID() int32 {
	if x != nil {
		return x.ClusterWinningID
	}
	return 0
}

func (x *ArcanePortalsRole) GetClusterWild() []int32 {
	if x != nil {
		return x.ClusterWild
	}
	return nil
}

func (x *ArcanePortalsRole) GetWinningMark() []int32 {
	if x != nil {
		return x.WinningMark
	}
	return nil
}

func (x *ArcanePortalsRole) GetAvalancheMark() []int32 {
	if x != nil {
		return x.AvalancheMark
	}
	return nil
}

func (x *ArcanePortalsRole) GetMultiplierMark() []float64 {
	if x != nil {
		return x.MultiplierMark
	}
	return nil
}

func (x *ArcanePortalsRole) GetMaxClusterWildsNumber() int32 {
	if x != nil {
		return x.MaxClusterWildsNumber
	}
	return 0
}

func (x *ArcanePortalsRole) GetPlayAreaWildNew() []int32 {
	if x != nil {
		return x.PlayAreaWildNew
	}
	return nil
}

func (x *ArcanePortalsRole) GetPlayAreaWildDelete() []int32 {
	if x != nil {
		return x.PlayAreaWildDelete
	}
	return nil
}

func (x *ArcanePortalsRole) GetPlayAreaWildJump() []int32 {
	if x != nil {
		return x.PlayAreaWildJump
	}
	return nil
}

func (x *ArcanePortalsRole) GetWildsMul() []float64 {
	if x != nil {
		return x.WildsMul
	}
	return nil
}

func (x *ArcanePortalsRole) GetMergeWildData() []*MergeWildData {
	if x != nil {
		return x.MergeWildData
	}
	return nil
}

func (x *ArcanePortalsRole) GetJumpWild() []int32 {
	if x != nil {
		return x.JumpWild
	}
	return nil
}

func (x *ArcanePortalsRole) GetMeshReelColOffset() []int32 {
	if x != nil {
		return x.MeshReelColOffset
	}
	return nil
}

func (x *ArcanePortalsRole) GetMaxMultiplier() float64 {
	if x != nil {
		return x.MaxMultiplier
	}
	return 0
}

func (x *ArcanePortalsRole) GetStickyWildMultiplier() []float64 {
	if x != nil {
		return x.StickyWildMultiplier
	}
	return nil
}

func (x *ArcanePortalsRole) GetFSWin() float64 {
	if x != nil {
		return x.FSWin
	}
	return 0
}

func (x *ArcanePortalsRole) GetMergeMultiplierMark() []float64 {
	if x != nil {
		return x.MergeMultiplierMark
	}
	return nil
}

func (x *ArcanePortalsRole) GetRoundEnd() bool {
	if x != nil {
		return x.RoundEnd
	}
	return false
}

func (x *ArcanePortalsRole) GetNextCascadeModel() *ArcanePortalsRole {
	if x != nil {
		return x.NextCascadeModel
	}
	return nil
}

// ------------------------------------------------------------------------
// >>> WuKong <<<
type PlatformFSData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OperatorId    string                 `protobuf:"bytes,1,opt,name=OperatorId,proto3" json:"OperatorId,omitempty"`
	CreateTime    int32                  `protobuf:"varint,2,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	IsCancel      bool                   `protobuf:"varint,3,opt,name=IsCancel,proto3" json:"IsCancel,omitempty"`
	StartTime     float64                `protobuf:"fixed64,4,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime       float64                `protobuf:"fixed64,5,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	TotalScore    float64                `protobuf:"fixed64,6,opt,name=TotalScore,proto3" json:"TotalScore,omitempty"`
	SpinNum       int32                  `protobuf:"varint,7,opt,name=SpinNum,proto3" json:"SpinNum,omitempty"`
	TotalSpinNum  int32                  `protobuf:"varint,8,opt,name=TotalSpinNum,proto3" json:"TotalSpinNum,omitempty"`
	Bet           float64                `protobuf:"fixed64,9,opt,name=Bet,proto3" json:"Bet,omitempty"`
	IsTrigger     bool                   `protobuf:"varint,10,opt,name=IsTrigger,proto3" json:"IsTrigger,omitempty"`
	CurrencyCode  string                 `protobuf:"bytes,11,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
	FreeSpinId    string                 `protobuf:"bytes,12,opt,name=FreeSpinId,proto3" json:"FreeSpinId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlatformFSData) Reset() {
	*x = PlatformFSData{}
	mi := &file_common_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlatformFSData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformFSData) ProtoMessage() {}

func (x *PlatformFSData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformFSData.ProtoReflect.Descriptor instead.
func (*PlatformFSData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{52}
}

func (x *PlatformFSData) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *PlatformFSData) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *PlatformFSData) GetIsCancel() bool {
	if x != nil {
		return x.IsCancel
	}
	return false
}

func (x *PlatformFSData) GetStartTime() float64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PlatformFSData) GetEndTime() float64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PlatformFSData) GetTotalScore() float64 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *PlatformFSData) GetSpinNum() int32 {
	if x != nil {
		return x.SpinNum
	}
	return 0
}

func (x *PlatformFSData) GetTotalSpinNum() int32 {
	if x != nil {
		return x.TotalSpinNum
	}
	return 0
}

func (x *PlatformFSData) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *PlatformFSData) GetIsTrigger() bool {
	if x != nil {
		return x.IsTrigger
	}
	return false
}

func (x *PlatformFSData) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *PlatformFSData) GetFreeSpinId() string {
	if x != nil {
		return x.FreeSpinId
	}
	return ""
}

type DisappearData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Symbol        int32                  `protobuf:"varint,2,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Bet           float64                `protobuf:"fixed64,3,opt,name=Bet,proto3" json:"Bet,omitempty"`
	End           float64                `protobuf:"fixed64,4,opt,name=End,proto3" json:"End,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisappearData) Reset() {
	*x = DisappearData{}
	mi := &file_common_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisappearData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisappearData) ProtoMessage() {}

func (x *DisappearData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisappearData.ProtoReflect.Descriptor instead.
func (*DisappearData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{53}
}

func (x *DisappearData) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *DisappearData) GetSymbol() int32 {
	if x != nil {
		return x.Symbol
	}
	return 0
}

func (x *DisappearData) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *DisappearData) GetEnd() float64 {
	if x != nil {
		return x.End
	}
	return 0
}

type EWuKongGrid struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Score               float64                `protobuf:"fixed64,1,opt,name=Score,proto3" json:"Score,omitempty"`
	Mesh                []int32                `protobuf:"varint,2,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	GameState           int32                  `protobuf:"varint,3,opt,name=GameState,proto3" json:"GameState,omitempty"`
	WinLines            []*WinLine             `protobuf:"bytes,4,rep,name=WinLines,proto3" json:"WinLines,omitempty"`
	Multiple            float64                `protobuf:"fixed64,5,opt,name=Multiple,proto3" json:"Multiple,omitempty"`
	TotalScore          float64                `protobuf:"fixed64,6,opt,name=TotalScore,proto3" json:"TotalScore,omitempty"`
	FSNum               int32                  `protobuf:"varint,7,opt,name=FSNum,proto3" json:"FSNum,omitempty"`
	FSTotalNum          int32                  `protobuf:"varint,8,opt,name=FSTotalNum,proto3" json:"FSTotalNum,omitempty"`
	FSTotalScore        float64                `protobuf:"fixed64,9,opt,name=FSTotalScore,proto3" json:"FSTotalScore,omitempty"`
	Cascade             bool                   `protobuf:"varint,10,opt,name=Cascade,proto3" json:"Cascade,omitempty"`
	MeshOffset          []int32                `protobuf:"varint,11,rep,packed,name=MeshOffset,proto3" json:"MeshOffset,omitempty"`
	MeshReel            int32                  `protobuf:"varint,12,opt,name=MeshReel,proto3" json:"MeshReel,omitempty"`
	MeshStuff           []int32                `protobuf:"varint,13,rep,packed,name=MeshStuff,proto3" json:"MeshStuff,omitempty"`
	GoldenMesh          []int32                `protobuf:"varint,14,rep,packed,name=GoldenMesh,proto3" json:"GoldenMesh,omitempty"`
	CoinNum             int32                  `protobuf:"varint,15,opt,name=CoinNum,proto3" json:"CoinNum,omitempty"`
	PotOfGoldCount      int32                  `protobuf:"varint,16,opt,name=PotOfGoldCount,proto3" json:"PotOfGoldCount,omitempty"`
	FourLeafCount       int32                  `protobuf:"varint,17,opt,name=FourLeafCount,proto3" json:"FourLeafCount,omitempty"`
	CoinTypeGrid        []int32                `protobuf:"varint,18,rep,packed,name=CoinTypeGrid,proto3" json:"CoinTypeGrid,omitempty"`
	FinalCoinGrid       []float64              `protobuf:"fixed64,19,rep,packed,name=FinalCoinGrid,proto3" json:"FinalCoinGrid,omitempty"`
	CoinGrid            []float64              `protobuf:"fixed64,20,rep,packed,name=CoinGrid,proto3" json:"CoinGrid,omitempty"`
	InDisappear         bool                   `protobuf:"varint,21,opt,name=InDisappear,proto3" json:"InDisappear,omitempty"`
	Disappear           []*DisappearData       `protobuf:"bytes,22,rep,name=Disappear,proto3" json:"Disappear,omitempty"`
	Extra               []int32                `protobuf:"varint,23,rep,packed,name=Extra,proto3" json:"Extra,omitempty"`
	LastPotOfGold       int32                  `protobuf:"varint,24,opt,name=LastPotOfGold,proto3" json:"LastPotOfGold,omitempty"`
	IsHasRainbowInFree  bool                   `protobuf:"varint,25,opt,name=IsHasRainbowInFree,proto3" json:"IsHasRainbowInFree,omitempty"`
	IsNeedRainbowInFree bool                   `protobuf:"varint,26,opt,name=IsNeedRainbowInFree,proto3" json:"IsNeedRainbowInFree,omitempty"`
	ClearGoldenMesh     bool                   `protobuf:"varint,27,opt,name=ClearGoldenMesh,proto3" json:"ClearGoldenMesh,omitempty"`
	NewPotOfGolds       []int32                `protobuf:"varint,28,rep,packed,name=NewPotOfGolds,proto3" json:"NewPotOfGolds,omitempty"`
	RetryFreeCount      bool                   `protobuf:"varint,29,opt,name=RetryFreeCount,proto3" json:"RetryFreeCount,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *EWuKongGrid) Reset() {
	*x = EWuKongGrid{}
	mi := &file_common_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EWuKongGrid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EWuKongGrid) ProtoMessage() {}

func (x *EWuKongGrid) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EWuKongGrid.ProtoReflect.Descriptor instead.
func (*EWuKongGrid) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{54}
}

func (x *EWuKongGrid) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *EWuKongGrid) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *EWuKongGrid) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

func (x *EWuKongGrid) GetWinLines() []*WinLine {
	if x != nil {
		return x.WinLines
	}
	return nil
}

func (x *EWuKongGrid) GetMultiple() float64 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *EWuKongGrid) GetTotalScore() float64 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *EWuKongGrid) GetFSNum() int32 {
	if x != nil {
		return x.FSNum
	}
	return 0
}

func (x *EWuKongGrid) GetFSTotalNum() int32 {
	if x != nil {
		return x.FSTotalNum
	}
	return 0
}

func (x *EWuKongGrid) GetFSTotalScore() float64 {
	if x != nil {
		return x.FSTotalScore
	}
	return 0
}

func (x *EWuKongGrid) GetCascade() bool {
	if x != nil {
		return x.Cascade
	}
	return false
}

func (x *EWuKongGrid) GetMeshOffset() []int32 {
	if x != nil {
		return x.MeshOffset
	}
	return nil
}

func (x *EWuKongGrid) GetMeshReel() int32 {
	if x != nil {
		return x.MeshReel
	}
	return 0
}

func (x *EWuKongGrid) GetMeshStuff() []int32 {
	if x != nil {
		return x.MeshStuff
	}
	return nil
}

func (x *EWuKongGrid) GetGoldenMesh() []int32 {
	if x != nil {
		return x.GoldenMesh
	}
	return nil
}

func (x *EWuKongGrid) GetCoinNum() int32 {
	if x != nil {
		return x.CoinNum
	}
	return 0
}

func (x *EWuKongGrid) GetPotOfGoldCount() int32 {
	if x != nil {
		return x.PotOfGoldCount
	}
	return 0
}

func (x *EWuKongGrid) GetFourLeafCount() int32 {
	if x != nil {
		return x.FourLeafCount
	}
	return 0
}

func (x *EWuKongGrid) GetCoinTypeGrid() []int32 {
	if x != nil {
		return x.CoinTypeGrid
	}
	return nil
}

func (x *EWuKongGrid) GetFinalCoinGrid() []float64 {
	if x != nil {
		return x.FinalCoinGrid
	}
	return nil
}

func (x *EWuKongGrid) GetCoinGrid() []float64 {
	if x != nil {
		return x.CoinGrid
	}
	return nil
}

func (x *EWuKongGrid) GetInDisappear() bool {
	if x != nil {
		return x.InDisappear
	}
	return false
}

func (x *EWuKongGrid) GetDisappear() []*DisappearData {
	if x != nil {
		return x.Disappear
	}
	return nil
}

func (x *EWuKongGrid) GetExtra() []int32 {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *EWuKongGrid) GetLastPotOfGold() int32 {
	if x != nil {
		return x.LastPotOfGold
	}
	return 0
}

func (x *EWuKongGrid) GetIsHasRainbowInFree() bool {
	if x != nil {
		return x.IsHasRainbowInFree
	}
	return false
}

func (x *EWuKongGrid) GetIsNeedRainbowInFree() bool {
	if x != nil {
		return x.IsNeedRainbowInFree
	}
	return false
}

func (x *EWuKongGrid) GetClearGoldenMesh() bool {
	if x != nil {
		return x.ClearGoldenMesh
	}
	return false
}

func (x *EWuKongGrid) GetNewPotOfGolds() []int32 {
	if x != nil {
		return x.NewPotOfGolds
	}
	return nil
}

func (x *EWuKongGrid) GetRetryFreeCount() bool {
	if x != nil {
		return x.RetryFreeCount
	}
	return false
}

type WuKongRole struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	CR                  *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	MathVersion         string                 `protobuf:"bytes,2,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	MeshOffset          []int32                `protobuf:"varint,3,rep,packed,name=MeshOffset,proto3" json:"MeshOffset,omitempty"`
	MeshReel            int32                  `protobuf:"varint,4,opt,name=MeshReel,proto3" json:"MeshReel,omitempty"`
	MeshStuff           []int32                `protobuf:"varint,5,rep,packed,name=MeshStuff,proto3" json:"MeshStuff,omitempty"`
	GoldenMesh          []int32                `protobuf:"varint,6,rep,packed,name=GoldenMesh,proto3" json:"GoldenMesh,omitempty"`
	CoinNum             int32                  `protobuf:"varint,8,opt,name=CoinNum,proto3" json:"CoinNum,omitempty"`
	PotOfGoldCount      int32                  `protobuf:"varint,9,opt,name=PotOfGoldCount,proto3" json:"PotOfGoldCount,omitempty"`
	FourLeafCount       int32                  `protobuf:"varint,10,opt,name=FourLeafCount,proto3" json:"FourLeafCount,omitempty"`
	CoinTypeGrid        []int32                `protobuf:"varint,11,rep,packed,name=CoinTypeGrid,proto3" json:"CoinTypeGrid,omitempty"`
	FinalCoinGrid       []float64              `protobuf:"fixed64,12,rep,packed,name=FinalCoinGrid,proto3" json:"FinalCoinGrid,omitempty"`
	CoinGrid            []float64              `protobuf:"fixed64,13,rep,packed,name=CoinGrid,proto3" json:"CoinGrid,omitempty"`
	InDisappear         bool                   `protobuf:"varint,14,opt,name=InDisappear,proto3" json:"InDisappear,omitempty"`
	Disappear           []*DisappearData       `protobuf:"bytes,15,rep,name=Disappear,proto3" json:"Disappear,omitempty"`
	Extra               []int32                `protobuf:"varint,16,rep,packed,name=Extra,proto3" json:"Extra,omitempty"`
	LastPotOfGold       int32                  `protobuf:"varint,17,opt,name=LastPotOfGold,proto3" json:"LastPotOfGold,omitempty"`
	IsHasRainbowInFree  bool                   `protobuf:"varint,18,opt,name=IsHasRainbowInFree,proto3" json:"IsHasRainbowInFree,omitempty"`
	IsNeedRainbowInFree bool                   `protobuf:"varint,19,opt,name=IsNeedRainbowInFree,proto3" json:"IsNeedRainbowInFree,omitempty"`
	ClearGoldenMesh     bool                   `protobuf:"varint,20,opt,name=ClearGoldenMesh,proto3" json:"ClearGoldenMesh,omitempty"`
	NewPotOfGolds       []int32                `protobuf:"varint,21,rep,packed,name=NewPotOfGolds,proto3" json:"NewPotOfGolds,omitempty"`
	RetryFreeCount      bool                   `protobuf:"varint,22,opt,name=RetryFreeCount,proto3" json:"RetryFreeCount,omitempty"`
	Activity            *ActModel              `protobuf:"bytes,23,opt,name=Activity,proto3" json:"Activity,omitempty"`
	PlatformFS          []*PlatformFSData      `protobuf:"bytes,24,rep,name=PlatformFS,proto3" json:"PlatformFS,omitempty"`
	EWuKongGrid         []*EWuKongGrid         `protobuf:"bytes,25,rep,name=EWuKongGrid,proto3" json:"EWuKongGrid,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *WuKongRole) Reset() {
	*x = WuKongRole{}
	mi := &file_common_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WuKongRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WuKongRole) ProtoMessage() {}

func (x *WuKongRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WuKongRole.ProtoReflect.Descriptor instead.
func (*WuKongRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{55}
}

func (x *WuKongRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *WuKongRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *WuKongRole) GetMeshOffset() []int32 {
	if x != nil {
		return x.MeshOffset
	}
	return nil
}

func (x *WuKongRole) GetMeshReel() int32 {
	if x != nil {
		return x.MeshReel
	}
	return 0
}

func (x *WuKongRole) GetMeshStuff() []int32 {
	if x != nil {
		return x.MeshStuff
	}
	return nil
}

func (x *WuKongRole) GetGoldenMesh() []int32 {
	if x != nil {
		return x.GoldenMesh
	}
	return nil
}

func (x *WuKongRole) GetCoinNum() int32 {
	if x != nil {
		return x.CoinNum
	}
	return 0
}

func (x *WuKongRole) GetPotOfGoldCount() int32 {
	if x != nil {
		return x.PotOfGoldCount
	}
	return 0
}

func (x *WuKongRole) GetFourLeafCount() int32 {
	if x != nil {
		return x.FourLeafCount
	}
	return 0
}

func (x *WuKongRole) GetCoinTypeGrid() []int32 {
	if x != nil {
		return x.CoinTypeGrid
	}
	return nil
}

func (x *WuKongRole) GetFinalCoinGrid() []float64 {
	if x != nil {
		return x.FinalCoinGrid
	}
	return nil
}

func (x *WuKongRole) GetCoinGrid() []float64 {
	if x != nil {
		return x.CoinGrid
	}
	return nil
}

func (x *WuKongRole) GetInDisappear() bool {
	if x != nil {
		return x.InDisappear
	}
	return false
}

func (x *WuKongRole) GetDisappear() []*DisappearData {
	if x != nil {
		return x.Disappear
	}
	return nil
}

func (x *WuKongRole) GetExtra() []int32 {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *WuKongRole) GetLastPotOfGold() int32 {
	if x != nil {
		return x.LastPotOfGold
	}
	return 0
}

func (x *WuKongRole) GetIsHasRainbowInFree() bool {
	if x != nil {
		return x.IsHasRainbowInFree
	}
	return false
}

func (x *WuKongRole) GetIsNeedRainbowInFree() bool {
	if x != nil {
		return x.IsNeedRainbowInFree
	}
	return false
}

func (x *WuKongRole) GetClearGoldenMesh() bool {
	if x != nil {
		return x.ClearGoldenMesh
	}
	return false
}

func (x *WuKongRole) GetNewPotOfGolds() []int32 {
	if x != nil {
		return x.NewPotOfGolds
	}
	return nil
}

func (x *WuKongRole) GetRetryFreeCount() bool {
	if x != nil {
		return x.RetryFreeCount
	}
	return false
}

func (x *WuKongRole) GetActivity() *ActModel {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *WuKongRole) GetPlatformFS() []*PlatformFSData {
	if x != nil {
		return x.PlatformFS
	}
	return nil
}

func (x *WuKongRole) GetEWuKongGrid() []*EWuKongGrid {
	if x != nil {
		return x.EWuKongGrid
	}
	return nil
}

type DisruptLine struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Col           int32                  `protobuf:"varint,1,opt,name=Col,proto3" json:"Col,omitempty"`
	Row           int32                  `protobuf:"varint,2,opt,name=Row,proto3" json:"Row,omitempty"`
	MIndex        int32                  `protobuf:"varint,3,opt,name=MIndex,proto3" json:"MIndex,omitempty"`
	MIndexRange   []int32                `protobuf:"varint,4,rep,packed,name=MIndexRange,proto3" json:"MIndexRange,omitempty"`
	Mult          int32                  `protobuf:"varint,5,opt,name=Mult,proto3" json:"Mult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisruptLine) Reset() {
	*x = DisruptLine{}
	mi := &file_common_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisruptLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisruptLine) ProtoMessage() {}

func (x *DisruptLine) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisruptLine.ProtoReflect.Descriptor instead.
func (*DisruptLine) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{56}
}

func (x *DisruptLine) GetCol() int32 {
	if x != nil {
		return x.Col
	}
	return 0
}

func (x *DisruptLine) GetRow() int32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *DisruptLine) GetMIndex() int32 {
	if x != nil {
		return x.MIndex
	}
	return 0
}

func (x *DisruptLine) GetMIndexRange() []int32 {
	if x != nil {
		return x.MIndexRange
	}
	return nil
}

func (x *DisruptLine) GetMult() int32 {
	if x != nil {
		return x.Mult
	}
	return 0
}

type DropDnSymbol struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Col           int32                  `protobuf:"varint,1,opt,name=Col,proto3" json:"Col,omitempty"`
	MIndex        int32                  `protobuf:"varint,2,opt,name=MIndex,proto3" json:"MIndex,omitempty"`
	Sym           int32                  `protobuf:"varint,3,opt,name=Sym,proto3" json:"Sym,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DropDnSymbol) Reset() {
	*x = DropDnSymbol{}
	mi := &file_common_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropDnSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropDnSymbol) ProtoMessage() {}

func (x *DropDnSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropDnSymbol.ProtoReflect.Descriptor instead.
func (*DropDnSymbol) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{57}
}

func (x *DropDnSymbol) GetCol() int32 {
	if x != nil {
		return x.Col
	}
	return 0
}

func (x *DropDnSymbol) GetMIndex() int32 {
	if x != nil {
		return x.MIndex
	}
	return 0
}

func (x *DropDnSymbol) GetSym() int32 {
	if x != nil {
		return x.Sym
	}
	return 0
}

type EJellyGrid struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mesh          []int32                `protobuf:"varint,1,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	Score         float64                `protobuf:"fixed64,2,opt,name=Score,proto3" json:"Score,omitempty"`
	Total         float64                `protobuf:"fixed64,3,opt,name=Total,proto3" json:"Total,omitempty"`
	Mults         []*DisruptLine         `protobuf:"bytes,4,rep,name=Mults,proto3" json:"Mults,omitempty"`
	Drops         []*DropDnSymbol        `protobuf:"bytes,5,rep,name=Drops,proto3" json:"Drops,omitempty"`
	WinLine       []*WinType             `protobuf:"bytes,6,rep,name=WinLine,proto3" json:"WinLine,omitempty"`
	Cascape       bool                   `protobuf:"varint,7,opt,name=Cascape,proto3" json:"Cascape,omitempty"`
	SymScNum      int32                  `protobuf:"varint,8,opt,name=SymScNum,proto3" json:"SymScNum,omitempty"`
	SpinNum       int32                  `protobuf:"varint,9,opt,name=SpinNum,proto3" json:"SpinNum,omitempty"`
	MeshStuff     []int32                `protobuf:"varint,10,rep,packed,name=MeshStuff,proto3" json:"MeshStuff,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EJellyGrid) Reset() {
	*x = EJellyGrid{}
	mi := &file_common_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EJellyGrid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EJellyGrid) ProtoMessage() {}

func (x *EJellyGrid) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EJellyGrid.ProtoReflect.Descriptor instead.
func (*EJellyGrid) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{58}
}

func (x *EJellyGrid) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *EJellyGrid) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *EJellyGrid) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *EJellyGrid) GetMults() []*DisruptLine {
	if x != nil {
		return x.Mults
	}
	return nil
}

func (x *EJellyGrid) GetDrops() []*DropDnSymbol {
	if x != nil {
		return x.Drops
	}
	return nil
}

func (x *EJellyGrid) GetWinLine() []*WinType {
	if x != nil {
		return x.WinLine
	}
	return nil
}

func (x *EJellyGrid) GetCascape() bool {
	if x != nil {
		return x.Cascape
	}
	return false
}

func (x *EJellyGrid) GetSymScNum() int32 {
	if x != nil {
		return x.SymScNum
	}
	return 0
}

func (x *EJellyGrid) GetSpinNum() int32 {
	if x != nil {
		return x.SpinNum
	}
	return 0
}

func (x *EJellyGrid) GetMeshStuff() []int32 {
	if x != nil {
		return x.MeshStuff
	}
	return nil
}

type JellyRole struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RoleId             string                 `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	ParentId           int64                  `protobuf:"varint,2,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	SubId              int64                  `protobuf:"varint,3,opt,name=SubId,proto3" json:"SubId,omitempty"`
	Score              float64                `protobuf:"fixed64,4,opt,name=Score,proto3" json:"Score,omitempty"`
	Bet                float64                `protobuf:"fixed64,5,opt,name=Bet,proto3" json:"Bet,omitempty"`
	Mesh               []int32                `protobuf:"varint,6,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	GameState          int32                  `protobuf:"varint,7,opt,name=GameState,proto3" json:"GameState,omitempty"`
	TotalWin           float64                `protobuf:"fixed64,8,opt,name=TotalWin,proto3" json:"TotalWin,omitempty"`
	WinTypes           []*WinType             `protobuf:"bytes,9,rep,name=WinTypes,proto3" json:"WinTypes,omitempty"`
	FreeSpinTime       int32                  `protobuf:"varint,10,opt,name=FreeSpinTime,proto3" json:"FreeSpinTime,omitempty"`
	TotalFreeSpinTime  int32                  `protobuf:"varint,11,opt,name=TotalFreeSpinTime,proto3" json:"TotalFreeSpinTime,omitempty"`
	TotalFreeSpinScore float64                `protobuf:"fixed64,12,opt,name=TotalFreeSpinScore,proto3" json:"TotalFreeSpinScore,omitempty"`
	Cascape            bool                   `protobuf:"varint,13,opt,name=Cascape,proto3" json:"Cascape,omitempty"`
	MeshStuff          []int32                `protobuf:"varint,14,rep,packed,name=meshStuff,proto3" json:"meshStuff,omitempty"`
	DisruptLine        []*DisruptLine         `protobuf:"bytes,15,rep,name=DisruptLine,proto3" json:"DisruptLine,omitempty"`
	DropDnSymbol       []*DropDnSymbol        `protobuf:"bytes,16,rep,name=DropDnSymbol,proto3" json:"DropDnSymbol,omitempty"`
	RIndex             int32                  `protobuf:"varint,17,opt,name=RIndex,proto3" json:"RIndex,omitempty"`
	Offsets            []int32                `protobuf:"varint,18,rep,packed,name=Offsets,proto3" json:"Offsets,omitempty"`
	EScore             float64                `protobuf:"fixed64,19,opt,name=EScore,proto3" json:"EScore,omitempty"`
	EFreeScore         float64                `protobuf:"fixed64,20,opt,name=EFreeScore,proto3" json:"EFreeScore,omitempty"`
	EGrids             []*EJellyGrid          `protobuf:"bytes,21,rep,name=EGrids,proto3" json:"EGrids,omitempty"`
	MathVersion        string                 `protobuf:"bytes,22,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *JellyRole) Reset() {
	*x = JellyRole{}
	mi := &file_common_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JellyRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JellyRole) ProtoMessage() {}

func (x *JellyRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JellyRole.ProtoReflect.Descriptor instead.
func (*JellyRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{59}
}

func (x *JellyRole) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *JellyRole) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *JellyRole) GetSubId() int64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *JellyRole) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *JellyRole) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *JellyRole) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *JellyRole) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

func (x *JellyRole) GetTotalWin() float64 {
	if x != nil {
		return x.TotalWin
	}
	return 0
}

func (x *JellyRole) GetWinTypes() []*WinType {
	if x != nil {
		return x.WinTypes
	}
	return nil
}

func (x *JellyRole) GetFreeSpinTime() int32 {
	if x != nil {
		return x.FreeSpinTime
	}
	return 0
}

func (x *JellyRole) GetTotalFreeSpinTime() int32 {
	if x != nil {
		return x.TotalFreeSpinTime
	}
	return 0
}

func (x *JellyRole) GetTotalFreeSpinScore() float64 {
	if x != nil {
		return x.TotalFreeSpinScore
	}
	return 0
}

func (x *JellyRole) GetCascape() bool {
	if x != nil {
		return x.Cascape
	}
	return false
}

func (x *JellyRole) GetMeshStuff() []int32 {
	if x != nil {
		return x.MeshStuff
	}
	return nil
}

func (x *JellyRole) GetDisruptLine() []*DisruptLine {
	if x != nil {
		return x.DisruptLine
	}
	return nil
}

func (x *JellyRole) GetDropDnSymbol() []*DropDnSymbol {
	if x != nil {
		return x.DropDnSymbol
	}
	return nil
}

func (x *JellyRole) GetRIndex() int32 {
	if x != nil {
		return x.RIndex
	}
	return 0
}

func (x *JellyRole) GetOffsets() []int32 {
	if x != nil {
		return x.Offsets
	}
	return nil
}

func (x *JellyRole) GetEScore() float64 {
	if x != nil {
		return x.EScore
	}
	return 0
}

func (x *JellyRole) GetEFreeScore() float64 {
	if x != nil {
		return x.EFreeScore
	}
	return 0
}

func (x *JellyRole) GetEGrids() []*EJellyGrid {
	if x != nil {
		return x.EGrids
	}
	return nil
}

func (x *JellyRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

type ECashcrewGrid struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mesh          []int32                `protobuf:"varint,1,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	MultiMesh     []int32                `protobuf:"varint,2,rep,packed,name=MultiMesh,proto3" json:"MultiMesh,omitempty"`
	Score         float64                `protobuf:"fixed64,3,opt,name=Score,proto3" json:"Score,omitempty"`
	Total         float64                `protobuf:"fixed64,4,opt,name=Total,proto3" json:"Total,omitempty"`
	WinLine       []*WinLine             `protobuf:"bytes,5,rep,name=WinLine,proto3" json:"WinLine,omitempty"`
	SymScNum      int32                  `protobuf:"varint,6,opt,name=SymScNum,proto3" json:"SymScNum,omitempty"`
	FreeSpinTime  int32                  `protobuf:"varint,7,opt,name=FreeSpinTime,proto3" json:"FreeSpinTime,omitempty"`
	WildSurround  []*WildSurround        `protobuf:"bytes,8,rep,name=WildSurround,proto3" json:"WildSurround,omitempty"`
	MoneyDatas    []*MoneyData           `protobuf:"bytes,9,rep,name=MoneyDatas,proto3" json:"MoneyDatas,omitempty"`
	FsAddTimes    int32                  `protobuf:"varint,10,opt,name=FsAddTimes,proto3" json:"FsAddTimes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ECashcrewGrid) Reset() {
	*x = ECashcrewGrid{}
	mi := &file_common_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ECashcrewGrid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECashcrewGrid) ProtoMessage() {}

func (x *ECashcrewGrid) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECashcrewGrid.ProtoReflect.Descriptor instead.
func (*ECashcrewGrid) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{60}
}

func (x *ECashcrewGrid) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *ECashcrewGrid) GetMultiMesh() []int32 {
	if x != nil {
		return x.MultiMesh
	}
	return nil
}

func (x *ECashcrewGrid) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ECashcrewGrid) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ECashcrewGrid) GetWinLine() []*WinLine {
	if x != nil {
		return x.WinLine
	}
	return nil
}

func (x *ECashcrewGrid) GetSymScNum() int32 {
	if x != nil {
		return x.SymScNum
	}
	return 0
}

func (x *ECashcrewGrid) GetFreeSpinTime() int32 {
	if x != nil {
		return x.FreeSpinTime
	}
	return 0
}

func (x *ECashcrewGrid) GetWildSurround() []*WildSurround {
	if x != nil {
		return x.WildSurround
	}
	return nil
}

func (x *ECashcrewGrid) GetMoneyDatas() []*MoneyData {
	if x != nil {
		return x.MoneyDatas
	}
	return nil
}

func (x *ECashcrewGrid) GetFsAddTimes() int32 {
	if x != nil {
		return x.FsAddTimes
	}
	return 0
}

type WildSurround struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MeshGold      []int32                `protobuf:"varint,1,rep,packed,name=MeshGold,proto3" json:"MeshGold,omitempty"`
	WildIndex     int32                  `protobuf:"varint,2,opt,name=WildIndex,proto3" json:"WildIndex,omitempty"`
	Multiple      int32                  `protobuf:"varint,3,opt,name=Multiple,proto3" json:"Multiple,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WildSurround) Reset() {
	*x = WildSurround{}
	mi := &file_common_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WildSurround) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WildSurround) ProtoMessage() {}

func (x *WildSurround) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WildSurround.ProtoReflect.Descriptor instead.
func (*WildSurround) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{61}
}

func (x *WildSurround) GetMeshGold() []int32 {
	if x != nil {
		return x.MeshGold
	}
	return nil
}

func (x *WildSurround) GetWildIndex() int32 {
	if x != nil {
		return x.WildIndex
	}
	return 0
}

func (x *WildSurround) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

type MoneyData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	MultipleN     int32                  `protobuf:"varint,2,opt,name=MultipleN,proto3" json:"MultipleN,omitempty"`
	Multiple      int32                  `protobuf:"varint,3,opt,name=Multiple,proto3" json:"Multiple,omitempty"`
	Activation    bool                   `protobuf:"varint,4,opt,name=Activation,proto3" json:"Activation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoneyData) Reset() {
	*x = MoneyData{}
	mi := &file_common_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoneyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyData) ProtoMessage() {}

func (x *MoneyData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyData.ProtoReflect.Descriptor instead.
func (*MoneyData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{62}
}

func (x *MoneyData) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *MoneyData) GetMultipleN() int32 {
	if x != nil {
		return x.MultipleN
	}
	return 0
}

func (x *MoneyData) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *MoneyData) GetActivation() bool {
	if x != nil {
		return x.Activation
	}
	return false
}

type CashcrewRole struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CR              *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	MathVersion     string                 `protobuf:"bytes,2,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	MultiMesh       []int32                `protobuf:"varint,3,rep,packed,name=MultiMesh,proto3" json:"MultiMesh,omitempty"`
	WildSurround    []*WildSurround        `protobuf:"bytes,4,rep,name=WildSurround,proto3" json:"WildSurround,omitempty"`
	MoneyDatas      []*MoneyData           `protobuf:"bytes,5,rep,name=MoneyDatas,proto3" json:"MoneyDatas,omitempty"`
	FsAddTimes      int32                  `protobuf:"varint,6,opt,name=FsAddTimes,proto3" json:"FsAddTimes,omitempty"`
	EGrids          []*ECashcrewGrid       `protobuf:"bytes,7,rep,name=EGrids,proto3" json:"EGrids,omitempty"`
	EFreeScore      float64                `protobuf:"fixed64,8,opt,name=EFreeScore,proto3" json:"EFreeScore,omitempty"`
	EScore          float64                `protobuf:"fixed64,9,opt,name=EScore,proto3" json:"EScore,omitempty"`
	LockedWilds     []bool                 `protobuf:"varint,10,rep,packed,name=LockedWilds,proto3" json:"LockedWilds,omitempty"`
	LandedWildCoors []int32                `protobuf:"varint,11,rep,packed,name=LandedWildCoors,proto3" json:"LandedWildCoors,omitempty"`
	ForcedSC        int32                  `protobuf:"varint,12,opt,name=ForcedSC,proto3" json:"ForcedSC,omitempty"`
	BetterConfig    bool                   `protobuf:"varint,13,opt,name=BetterConfig,proto3" json:"BetterConfig,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CashcrewRole) Reset() {
	*x = CashcrewRole{}
	mi := &file_common_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CashcrewRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashcrewRole) ProtoMessage() {}

func (x *CashcrewRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashcrewRole.ProtoReflect.Descriptor instead.
func (*CashcrewRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{63}
}

func (x *CashcrewRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *CashcrewRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *CashcrewRole) GetMultiMesh() []int32 {
	if x != nil {
		return x.MultiMesh
	}
	return nil
}

func (x *CashcrewRole) GetWildSurround() []*WildSurround {
	if x != nil {
		return x.WildSurround
	}
	return nil
}

func (x *CashcrewRole) GetMoneyDatas() []*MoneyData {
	if x != nil {
		return x.MoneyDatas
	}
	return nil
}

func (x *CashcrewRole) GetFsAddTimes() int32 {
	if x != nil {
		return x.FsAddTimes
	}
	return 0
}

func (x *CashcrewRole) GetEGrids() []*ECashcrewGrid {
	if x != nil {
		return x.EGrids
	}
	return nil
}

func (x *CashcrewRole) GetEFreeScore() float64 {
	if x != nil {
		return x.EFreeScore
	}
	return 0
}

func (x *CashcrewRole) GetEScore() float64 {
	if x != nil {
		return x.EScore
	}
	return 0
}

func (x *CashcrewRole) GetLockedWilds() []bool {
	if x != nil {
		return x.LockedWilds
	}
	return nil
}

func (x *CashcrewRole) GetLandedWildCoors() []int32 {
	if x != nil {
		return x.LandedWildCoors
	}
	return nil
}

func (x *CashcrewRole) GetForcedSC() int32 {
	if x != nil {
		return x.ForcedSC
	}
	return 0
}

func (x *CashcrewRole) GetBetterConfig() bool {
	if x != nil {
		return x.BetterConfig
	}
	return false
}

type GoldenYearDisappear struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Type          int32                  `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Mesh          []int32                `protobuf:"varint,3,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoldenYearDisappear) Reset() {
	*x = GoldenYearDisappear{}
	mi := &file_common_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoldenYearDisappear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoldenYearDisappear) ProtoMessage() {}

func (x *GoldenYearDisappear) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoldenYearDisappear.ProtoReflect.Descriptor instead.
func (*GoldenYearDisappear) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{64}
}

func (x *GoldenYearDisappear) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GoldenYearDisappear) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GoldenYearDisappear) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

type GoldenYearChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Parent        int32                  `protobuf:"varint,1,opt,name=Parent,proto3" json:"Parent,omitempty"`
	Type          int32                  `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Mesh          []int32                `protobuf:"varint,3,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	ReplaceMesh   []int32                `protobuf:"varint,4,rep,packed,name=ReplaceMesh,proto3" json:"ReplaceMesh,omitempty"`
	Index         int32                  `protobuf:"varint,5,opt,name=Index,proto3" json:"Index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoldenYearChange) Reset() {
	*x = GoldenYearChange{}
	mi := &file_common_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoldenYearChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoldenYearChange) ProtoMessage() {}

func (x *GoldenYearChange) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoldenYearChange.ProtoReflect.Descriptor instead.
func (*GoldenYearChange) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{65}
}

func (x *GoldenYearChange) GetParent() int32 {
	if x != nil {
		return x.Parent
	}
	return 0
}

func (x *GoldenYearChange) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GoldenYearChange) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *GoldenYearChange) GetReplaceMesh() []int32 {
	if x != nil {
		return x.ReplaceMesh
	}
	return nil
}

func (x *GoldenYearChange) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type GoldenYearRole struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	CR                  *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	MathVersion         string                 `protobuf:"bytes,2,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	MeshOffset          []int32                `protobuf:"varint,3,rep,packed,name=MeshOffset,proto3" json:"MeshOffset,omitempty"`
	MeshReel            int32                  `protobuf:"varint,4,opt,name=MeshReel,proto3" json:"MeshReel,omitempty"`
	MeshStuff           []int32                `protobuf:"varint,5,rep,packed,name=MeshStuff,proto3" json:"MeshStuff,omitempty"`
	EyeIndex            int32                  `protobuf:"varint,6,opt,name=EyeIndex,proto3" json:"EyeIndex,omitempty"`
	EyeOpen             bool                   `protobuf:"varint,7,opt,name=EyeOpen,proto3" json:"EyeOpen,omitempty"`
	CollectedPoint      int32                  `protobuf:"varint,8,opt,name=CollectedPoint,proto3" json:"CollectedPoint,omitempty"`
	PortalEffect        int32                  `protobuf:"varint,9,opt,name=PortalEffect,proto3" json:"PortalEffect,omitempty"`
	EyeOpenTriggered    bool                   `protobuf:"varint,10,opt,name=EyeOpenTriggered,proto3" json:"EyeOpenTriggered,omitempty"`
	CollectedPointWin   int32                  `protobuf:"varint,11,opt,name=CollectedPointWin,proto3" json:"CollectedPointWin,omitempty"`
	Disappear           []*GoldenYearDisappear `protobuf:"bytes,12,rep,name=Disappear,proto3" json:"Disappear,omitempty"`
	CollectedPointNow   int32                  `protobuf:"varint,13,opt,name=CollectedPointNow,proto3" json:"CollectedPointNow,omitempty"`
	ActivatedWilds      []int32                `protobuf:"varint,14,rep,packed,name=ActivatedWilds,proto3" json:"ActivatedWilds,omitempty"`
	Changes             []*GoldenYearChange    `protobuf:"bytes,15,rep,name=Changes,proto3" json:"Changes,omitempty"`
	PortalEffectTrigger int32                  `protobuf:"varint,16,opt,name=PortalEffectTrigger,proto3" json:"PortalEffectTrigger,omitempty"`
	FS1EyesIndex        []bool                 `protobuf:"varint,17,rep,packed,name=FS1EyesIndex,proto3" json:"FS1EyesIndex,omitempty"`
	FS1EyesOpen         []bool                 `protobuf:"varint,18,rep,packed,name=FS1EyesOpen,proto3" json:"FS1EyesOpen,omitempty"`
	FS2MegaWild         []int32                `protobuf:"varint,19,rep,packed,name=FS2MegaWild,proto3" json:"FS2MegaWild,omitempty"`
	FS2BatterGame       bool                   `protobuf:"varint,20,opt,name=FS2BatterGame,proto3" json:"FS2BatterGame,omitempty"`
	EyeBase             []int32                `protobuf:"varint,21,rep,packed,name=EyeBase,proto3" json:"EyeBase,omitempty"`
	FS1EyeBase          []int32                `protobuf:"varint,22,rep,packed,name=FS1EyeBase,proto3" json:"FS1EyeBase,omitempty"`
	FS1EyeLast          []int32                `protobuf:"varint,23,rep,packed,name=FS1EyeLast,proto3" json:"FS1EyeLast,omitempty"`
	RoundEnd            bool                   `protobuf:"varint,24,opt,name=RoundEnd,proto3" json:"RoundEnd,omitempty"`
	NextCascadeModel    *GoldenYearRole        `protobuf:"bytes,25,opt,name=NextCascadeModel,proto3" json:"NextCascadeModel,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GoldenYearRole) Reset() {
	*x = GoldenYearRole{}
	mi := &file_common_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoldenYearRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoldenYearRole) ProtoMessage() {}

func (x *GoldenYearRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoldenYearRole.ProtoReflect.Descriptor instead.
func (*GoldenYearRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{66}
}

func (x *GoldenYearRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *GoldenYearRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *GoldenYearRole) GetMeshOffset() []int32 {
	if x != nil {
		return x.MeshOffset
	}
	return nil
}

func (x *GoldenYearRole) GetMeshReel() int32 {
	if x != nil {
		return x.MeshReel
	}
	return 0
}

func (x *GoldenYearRole) GetMeshStuff() []int32 {
	if x != nil {
		return x.MeshStuff
	}
	return nil
}

func (x *GoldenYearRole) GetEyeIndex() int32 {
	if x != nil {
		return x.EyeIndex
	}
	return 0
}

func (x *GoldenYearRole) GetEyeOpen() bool {
	if x != nil {
		return x.EyeOpen
	}
	return false
}

func (x *GoldenYearRole) GetCollectedPoint() int32 {
	if x != nil {
		return x.CollectedPoint
	}
	return 0
}

func (x *GoldenYearRole) GetPortalEffect() int32 {
	if x != nil {
		return x.PortalEffect
	}
	return 0
}

func (x *GoldenYearRole) GetEyeOpenTriggered() bool {
	if x != nil {
		return x.EyeOpenTriggered
	}
	return false
}

func (x *GoldenYearRole) GetCollectedPointWin() int32 {
	if x != nil {
		return x.CollectedPointWin
	}
	return 0
}

func (x *GoldenYearRole) GetDisappear() []*GoldenYearDisappear {
	if x != nil {
		return x.Disappear
	}
	return nil
}

func (x *GoldenYearRole) GetCollectedPointNow() int32 {
	if x != nil {
		return x.CollectedPointNow
	}
	return 0
}

func (x *GoldenYearRole) GetActivatedWilds() []int32 {
	if x != nil {
		return x.ActivatedWilds
	}
	return nil
}

func (x *GoldenYearRole) GetChanges() []*GoldenYearChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *GoldenYearRole) GetPortalEffectTrigger() int32 {
	if x != nil {
		return x.PortalEffectTrigger
	}
	return 0
}

func (x *GoldenYearRole) GetFS1EyesIndex() []bool {
	if x != nil {
		return x.FS1EyesIndex
	}
	return nil
}

func (x *GoldenYearRole) GetFS1EyesOpen() []bool {
	if x != nil {
		return x.FS1EyesOpen
	}
	return nil
}

func (x *GoldenYearRole) GetFS2MegaWild() []int32 {
	if x != nil {
		return x.FS2MegaWild
	}
	return nil
}

func (x *GoldenYearRole) GetFS2BatterGame() bool {
	if x != nil {
		return x.FS2BatterGame
	}
	return false
}

func (x *GoldenYearRole) GetEyeBase() []int32 {
	if x != nil {
		return x.EyeBase
	}
	return nil
}

func (x *GoldenYearRole) GetFS1EyeBase() []int32 {
	if x != nil {
		return x.FS1EyeBase
	}
	return nil
}

func (x *GoldenYearRole) GetFS1EyeLast() []int32 {
	if x != nil {
		return x.FS1EyeLast
	}
	return nil
}

func (x *GoldenYearRole) GetRoundEnd() bool {
	if x != nil {
		return x.RoundEnd
	}
	return false
}

func (x *GoldenYearRole) GetNextCascadeModel() *GoldenYearRole {
	if x != nil {
		return x.NextCascadeModel
	}
	return nil
}

// ------------------------------------------------------------------------
// >>> Chaoscrew <<<
type ChaoscrewRound struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Record        []float64              `protobuf:"fixed64,2,rep,packed,name=Record,proto3" json:"Record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChaoscrewRound) Reset() {
	*x = ChaoscrewRound{}
	mi := &file_common_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChaoscrewRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaoscrewRound) ProtoMessage() {}

func (x *ChaoscrewRound) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaoscrewRound.ProtoReflect.Descriptor instead.
func (*ChaoscrewRound) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{67}
}

func (x *ChaoscrewRound) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChaoscrewRound) GetRecord() []float64 {
	if x != nil {
		return x.Record
	}
	return nil
}

type EChaoscrewGrid struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Mesh           []int32                `protobuf:"varint,1,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`
	MultiMesh      []int32                `protobuf:"varint,2,rep,packed,name=MultiMesh,proto3" json:"MultiMesh,omitempty"`
	Score          float64                `protobuf:"fixed64,3,opt,name=Score,proto3" json:"Score,omitempty"`
	Total          float64                `protobuf:"fixed64,4,opt,name=Total,proto3" json:"Total,omitempty"`
	WinLine        []*WinLine             `protobuf:"bytes,5,rep,name=WinLine,proto3" json:"WinLine,omitempty"`
	ChaoscrewRound *ChaoscrewRound        `protobuf:"bytes,6,opt,name=ChaoscrewRound,proto3" json:"ChaoscrewRound,omitempty"`
	SumRecord      []int32                `protobuf:"varint,7,rep,packed,name=SumRecord,proto3" json:"SumRecord,omitempty"`
	Viscouss       []int32                `protobuf:"varint,8,rep,packed,name=Viscouss,proto3" json:"Viscouss,omitempty"`
	FreeSpinTime   int32                  `protobuf:"varint,9,opt,name=FreeSpinTime,proto3" json:"FreeSpinTime,omitempty"`
	LastSumRecord  []int32                `protobuf:"varint,10,rep,packed,name=LastSumRecord,proto3" json:"LastSumRecord,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EChaoscrewGrid) Reset() {
	*x = EChaoscrewGrid{}
	mi := &file_common_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EChaoscrewGrid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EChaoscrewGrid) ProtoMessage() {}

func (x *EChaoscrewGrid) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EChaoscrewGrid.ProtoReflect.Descriptor instead.
func (*EChaoscrewGrid) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{68}
}

func (x *EChaoscrewGrid) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *EChaoscrewGrid) GetMultiMesh() []int32 {
	if x != nil {
		return x.MultiMesh
	}
	return nil
}

func (x *EChaoscrewGrid) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *EChaoscrewGrid) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *EChaoscrewGrid) GetWinLine() []*WinLine {
	if x != nil {
		return x.WinLine
	}
	return nil
}

func (x *EChaoscrewGrid) GetChaoscrewRound() *ChaoscrewRound {
	if x != nil {
		return x.ChaoscrewRound
	}
	return nil
}

func (x *EChaoscrewGrid) GetSumRecord() []int32 {
	if x != nil {
		return x.SumRecord
	}
	return nil
}

func (x *EChaoscrewGrid) GetViscouss() []int32 {
	if x != nil {
		return x.Viscouss
	}
	return nil
}

func (x *EChaoscrewGrid) GetFreeSpinTime() int32 {
	if x != nil {
		return x.FreeSpinTime
	}
	return 0
}

func (x *EChaoscrewGrid) GetLastSumRecord() []int32 {
	if x != nil {
		return x.LastSumRecord
	}
	return nil
}

type ChaoscrewRole struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CR             *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	MathVersion    string                 `protobuf:"bytes,2,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	MultiMesh      []int32                `protobuf:"varint,3,rep,packed,name=MultiMesh,proto3" json:"MultiMesh,omitempty"`
	StuffMesh      []int32                `protobuf:"varint,4,rep,packed,name=StuffMesh,proto3" json:"StuffMesh,omitempty"`
	ChaoscrewRound *ChaoscrewRound        `protobuf:"bytes,5,opt,name=ChaoscrewRound,proto3" json:"ChaoscrewRound,omitempty"`
	SumRecord      []int32                `protobuf:"varint,6,rep,packed,name=SumRecord,proto3" json:"SumRecord,omitempty"`
	Viscouss       []int32                `protobuf:"varint,7,rep,packed,name=Viscouss,proto3" json:"Viscouss,omitempty"`
	IsEpicDrop     bool                   `protobuf:"varint,8,opt,name=IsEpicDrop,proto3" json:"IsEpicDrop,omitempty"`
	FSWin          float64                `protobuf:"fixed64,9,opt,name=FSWin,proto3" json:"FSWin,omitempty"`
	EGrids         []*EChaoscrewGrid      `protobuf:"bytes,10,rep,name=EGrids,proto3" json:"EGrids,omitempty"`
	LastSumRecord  []int32                `protobuf:"varint,11,rep,packed,name=LastSumRecord,proto3" json:"LastSumRecord,omitempty"`
	IsOverstep     bool                   `protobuf:"varint,12,opt,name=IsOverstep,proto3" json:"IsOverstep,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ChaoscrewRole) Reset() {
	*x = ChaoscrewRole{}
	mi := &file_common_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChaoscrewRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaoscrewRole) ProtoMessage() {}

func (x *ChaoscrewRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaoscrewRole.ProtoReflect.Descriptor instead.
func (*ChaoscrewRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{69}
}

func (x *ChaoscrewRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *ChaoscrewRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *ChaoscrewRole) GetMultiMesh() []int32 {
	if x != nil {
		return x.MultiMesh
	}
	return nil
}

func (x *ChaoscrewRole) GetStuffMesh() []int32 {
	if x != nil {
		return x.StuffMesh
	}
	return nil
}

func (x *ChaoscrewRole) GetChaoscrewRound() *ChaoscrewRound {
	if x != nil {
		return x.ChaoscrewRound
	}
	return nil
}

func (x *ChaoscrewRole) GetSumRecord() []int32 {
	if x != nil {
		return x.SumRecord
	}
	return nil
}

func (x *ChaoscrewRole) GetViscouss() []int32 {
	if x != nil {
		return x.Viscouss
	}
	return nil
}

func (x *ChaoscrewRole) GetIsEpicDrop() bool {
	if x != nil {
		return x.IsEpicDrop
	}
	return false
}

func (x *ChaoscrewRole) GetFSWin() float64 {
	if x != nil {
		return x.FSWin
	}
	return 0
}

func (x *ChaoscrewRole) GetEGrids() []*EChaoscrewGrid {
	if x != nil {
		return x.EGrids
	}
	return nil
}

func (x *ChaoscrewRole) GetLastSumRecord() []int32 {
	if x != nil {
		return x.LastSumRecord
	}
	return nil
}

func (x *ChaoscrewRole) GetIsOverstep() bool {
	if x != nil {
		return x.IsOverstep
	}
	return false
}

// ------------------------------------------------------------------------
// >>> Keepem <<<
type KeepEmStartEnd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         int32                  `protobuf:"varint,1,opt,name=Start,proto3" json:"Start,omitempty"`
	End           int32                  `protobuf:"varint,2,opt,name=End,proto3" json:"End,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeepEmStartEnd) Reset() {
	*x = KeepEmStartEnd{}
	mi := &file_common_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeepEmStartEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepEmStartEnd) ProtoMessage() {}

func (x *KeepEmStartEnd) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepEmStartEnd.ProtoReflect.Descriptor instead.
func (*KeepEmStartEnd) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{70}
}

func (x *KeepEmStartEnd) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *KeepEmStartEnd) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type KeepEmViscous struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         int32                  `protobuf:"varint,1,opt,name=Start,proto3" json:"Start,omitempty"`
	End           int32                  `protobuf:"varint,2,opt,name=End,proto3" json:"End,omitempty"`
	First         bool                   `protobuf:"varint,3,opt,name=First,proto3" json:"First,omitempty"`
	Symbol        int32                  `protobuf:"varint,4,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Multi         int32                  `protobuf:"varint,5,opt,name=Multi,proto3" json:"Multi,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeepEmViscous) Reset() {
	*x = KeepEmViscous{}
	mi := &file_common_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeepEmViscous) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepEmViscous) ProtoMessage() {}

func (x *KeepEmViscous) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepEmViscous.ProtoReflect.Descriptor instead.
func (*KeepEmViscous) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{71}
}

func (x *KeepEmViscous) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *KeepEmViscous) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *KeepEmViscous) GetFirst() bool {
	if x != nil {
		return x.First
	}
	return false
}

func (x *KeepEmViscous) GetSymbol() int32 {
	if x != nil {
		return x.Symbol
	}
	return 0
}

func (x *KeepEmViscous) GetMulti() int32 {
	if x != nil {
		return x.Multi
	}
	return 0
}

type KeepEmSuperCol struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cols          []int32                `protobuf:"varint,1,rep,packed,name=Cols,proto3" json:"Cols,omitempty"`
	NormalCols    []int32                `protobuf:"varint,2,rep,packed,name=NormalCols,proto3" json:"NormalCols,omitempty"`
	Expanse       *KeepEmStartEnd        `protobuf:"bytes,3,opt,name=Expanse,proto3" json:"Expanse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeepEmSuperCol) Reset() {
	*x = KeepEmSuperCol{}
	mi := &file_common_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeepEmSuperCol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepEmSuperCol) ProtoMessage() {}

func (x *KeepEmSuperCol) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepEmSuperCol.ProtoReflect.Descriptor instead.
func (*KeepEmSuperCol) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{72}
}

func (x *KeepEmSuperCol) GetCols() []int32 {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *KeepEmSuperCol) GetNormalCols() []int32 {
	if x != nil {
		return x.NormalCols
	}
	return nil
}

func (x *KeepEmSuperCol) GetExpanse() *KeepEmStartEnd {
	if x != nil {
		return x.Expanse
	}
	return nil
}

type KeepEmBoost struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Mul           int32                  `protobuf:"varint,2,opt,name=Mul,proto3" json:"Mul,omitempty"`
	AffectIndex   []int32                `protobuf:"varint,3,rep,packed,name=AffectIndex,proto3" json:"AffectIndex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeepEmBoost) Reset() {
	*x = KeepEmBoost{}
	mi := &file_common_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeepEmBoost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepEmBoost) ProtoMessage() {}

func (x *KeepEmBoost) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepEmBoost.ProtoReflect.Descriptor instead.
func (*KeepEmBoost) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{73}
}

func (x *KeepEmBoost) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *KeepEmBoost) GetMul() int32 {
	if x != nil {
		return x.Mul
	}
	return 0
}

func (x *KeepEmBoost) GetAffectIndex() []int32 {
	if x != nil {
		return x.AffectIndex
	}
	return nil
}

type KeepEmMoney struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Symbol        int32                  `protobuf:"varint,2,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeepEmMoney) Reset() {
	*x = KeepEmMoney{}
	mi := &file_common_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeepEmMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepEmMoney) ProtoMessage() {}

func (x *KeepEmMoney) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepEmMoney.ProtoReflect.Descriptor instead.
func (*KeepEmMoney) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{74}
}

func (x *KeepEmMoney) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *KeepEmMoney) GetSymbol() int32 {
	if x != nil {
		return x.Symbol
	}
	return 0
}

type KeepEmRole struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CR              *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	MathVersion     string                 `protobuf:"bytes,2,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	CascadeNum      int32                  `protobuf:"varint,3,opt,name=CascadeNum,proto3" json:"CascadeNum,omitempty"`
	CascadeIndex    int32                  `protobuf:"varint,4,opt,name=CascadeIndex,proto3" json:"CascadeIndex,omitempty"`
	CascadeLastNum  int32                  `protobuf:"varint,5,opt,name=CascadeLastNum,proto3" json:"CascadeLastNum,omitempty"`
	Viscous         []*KeepEmViscous       `protobuf:"bytes,6,rep,name=Viscous,proto3" json:"Viscous,omitempty"`
	MulNum          int32                  `protobuf:"varint,7,opt,name=MulNum,proto3" json:"MulNum,omitempty"`
	MulCurrentNum   int32                  `protobuf:"varint,8,opt,name=MulCurrentNum,proto3" json:"MulCurrentNum,omitempty"`
	SuperCol        *KeepEmSuperCol        `protobuf:"bytes,9,opt,name=SuperCol,proto3" json:"SuperCol,omitempty"`
	Boost           []*KeepEmBoost         `protobuf:"bytes,10,rep,name=Boost,proto3" json:"Boost,omitempty"`
	ModeSource      int32                  `protobuf:"varint,11,opt,name=ModeSource,proto3" json:"ModeSource,omitempty"`
	SessionScore    float64                `protobuf:"fixed64,12,opt,name=SessionScore,proto3" json:"SessionScore,omitempty"`
	RoundScore      float64                `protobuf:"fixed64,13,opt,name=RoundScore,proto3" json:"RoundScore,omitempty"`
	RoundCollectSet bool                   `protobuf:"varint,14,opt,name=RoundCollectSet,proto3" json:"RoundCollectSet,omitempty"`
	RoundMoneySet   bool                   `protobuf:"varint,15,opt,name=RoundMoneySet,proto3" json:"RoundMoneySet,omitempty"`
	RoundBoostSet   bool                   `protobuf:"varint,16,opt,name=RoundBoostSet,proto3" json:"RoundBoostSet,omitempty"`
	MoneyMulSave    map[int32]int32        `protobuf:"bytes,17,rep,name=MoneyMulSave,proto3" json:"MoneyMulSave,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ViscousBottom   map[int32]bool         `protobuf:"bytes,18,rep,name=ViscousBottom,proto3" json:"ViscousBottom,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Future          []*KeepEmRole          `protobuf:"bytes,19,rep,name=Future,proto3" json:"Future,omitempty"`
	NewPlayer       bool                   `protobuf:"varint,20,opt,name=NewPlayer,proto3" json:"NewPlayer,omitempty"`
	Rtp             int32                  `protobuf:"varint,21,opt,name=Rtp,proto3" json:"Rtp,omitempty"`
	IsRealNewPlayer bool                   `protobuf:"varint,22,opt,name=IsRealNewPlayer,proto3" json:"IsRealNewPlayer,omitempty"`
	RhinoOption     []int32                `protobuf:"varint,23,rep,packed,name=RhinoOption,proto3" json:"RhinoOption,omitempty"`
	LastBet         float64                `protobuf:"fixed64,24,opt,name=LastBet,proto3" json:"LastBet,omitempty"`
	Activities      []*NewActivity         `protobuf:"bytes,25,rep,name=Activities,proto3" json:"Activities,omitempty"`
	MoneyMulti      int32                  `protobuf:"varint,26,opt,name=MoneyMulti,proto3" json:"MoneyMulti,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *KeepEmRole) Reset() {
	*x = KeepEmRole{}
	mi := &file_common_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeepEmRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepEmRole) ProtoMessage() {}

func (x *KeepEmRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepEmRole.ProtoReflect.Descriptor instead.
func (*KeepEmRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{75}
}

func (x *KeepEmRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *KeepEmRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *KeepEmRole) GetCascadeNum() int32 {
	if x != nil {
		return x.CascadeNum
	}
	return 0
}

func (x *KeepEmRole) GetCascadeIndex() int32 {
	if x != nil {
		return x.CascadeIndex
	}
	return 0
}

func (x *KeepEmRole) GetCascadeLastNum() int32 {
	if x != nil {
		return x.CascadeLastNum
	}
	return 0
}

func (x *KeepEmRole) GetViscous() []*KeepEmViscous {
	if x != nil {
		return x.Viscous
	}
	return nil
}

func (x *KeepEmRole) GetMulNum() int32 {
	if x != nil {
		return x.MulNum
	}
	return 0
}

func (x *KeepEmRole) GetMulCurrentNum() int32 {
	if x != nil {
		return x.MulCurrentNum
	}
	return 0
}

func (x *KeepEmRole) GetSuperCol() *KeepEmSuperCol {
	if x != nil {
		return x.SuperCol
	}
	return nil
}

func (x *KeepEmRole) GetBoost() []*KeepEmBoost {
	if x != nil {
		return x.Boost
	}
	return nil
}

func (x *KeepEmRole) GetModeSource() int32 {
	if x != nil {
		return x.ModeSource
	}
	return 0
}

func (x *KeepEmRole) GetSessionScore() float64 {
	if x != nil {
		return x.SessionScore
	}
	return 0
}

func (x *KeepEmRole) GetRoundScore() float64 {
	if x != nil {
		return x.RoundScore
	}
	return 0
}

func (x *KeepEmRole) GetRoundCollectSet() bool {
	if x != nil {
		return x.RoundCollectSet
	}
	return false
}

func (x *KeepEmRole) GetRoundMoneySet() bool {
	if x != nil {
		return x.RoundMoneySet
	}
	return false
}

func (x *KeepEmRole) GetRoundBoostSet() bool {
	if x != nil {
		return x.RoundBoostSet
	}
	return false
}

func (x *KeepEmRole) GetMoneyMulSave() map[int32]int32 {
	if x != nil {
		return x.MoneyMulSave
	}
	return nil
}

func (x *KeepEmRole) GetViscousBottom() map[int32]bool {
	if x != nil {
		return x.ViscousBottom
	}
	return nil
}

func (x *KeepEmRole) GetFuture() []*KeepEmRole {
	if x != nil {
		return x.Future
	}
	return nil
}

func (x *KeepEmRole) GetNewPlayer() bool {
	if x != nil {
		return x.NewPlayer
	}
	return false
}

func (x *KeepEmRole) GetRtp() int32 {
	if x != nil {
		return x.Rtp
	}
	return 0
}

func (x *KeepEmRole) GetIsRealNewPlayer() bool {
	if x != nil {
		return x.IsRealNewPlayer
	}
	return false
}

func (x *KeepEmRole) GetRhinoOption() []int32 {
	if x != nil {
		return x.RhinoOption
	}
	return nil
}

func (x *KeepEmRole) GetLastBet() float64 {
	if x != nil {
		return x.LastBet
	}
	return 0
}

func (x *KeepEmRole) GetActivities() []*NewActivity {
	if x != nil {
		return x.Activities
	}
	return nil
}

func (x *KeepEmRole) GetMoneyMulti() int32 {
	if x != nil {
		return x.MoneyMulti
	}
	return 0
}

// ------------------------------------------------------------------------
// >>> Venom <<<
type VenomWildData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsFirst       bool                   `protobuf:"varint,1,opt,name=IsFirst,proto3" json:"IsFirst,omitempty"`
	NowIndex      int32                  `protobuf:"varint,2,opt,name=NowIndex,proto3" json:"NowIndex,omitempty"`
	NextIndex     int32                  `protobuf:"varint,3,opt,name=nextIndex,proto3" json:"nextIndex,omitempty"`
	Cover         int32                  `protobuf:"varint,4,opt,name=cover,proto3" json:"cover,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VenomWildData) Reset() {
	*x = VenomWildData{}
	mi := &file_common_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VenomWildData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VenomWildData) ProtoMessage() {}

func (x *VenomWildData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VenomWildData.ProtoReflect.Descriptor instead.
func (*VenomWildData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{76}
}

func (x *VenomWildData) GetIsFirst() bool {
	if x != nil {
		return x.IsFirst
	}
	return false
}

func (x *VenomWildData) GetNowIndex() int32 {
	if x != nil {
		return x.NowIndex
	}
	return 0
}

func (x *VenomWildData) GetNextIndex() int32 {
	if x != nil {
		return x.NextIndex
	}
	return 0
}

func (x *VenomWildData) GetCover() int32 {
	if x != nil {
		return x.Cover
	}
	return 0
}

type SCExpanseCol struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Col           int32                  `protobuf:"varint,1,opt,name=Col,proto3" json:"Col,omitempty"`
	Index         []int32                `protobuf:"varint,2,rep,packed,name=Index,proto3" json:"Index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCExpanseCol) Reset() {
	*x = SCExpanseCol{}
	mi := &file_common_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCExpanseCol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCExpanseCol) ProtoMessage() {}

func (x *SCExpanseCol) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCExpanseCol.ProtoReflect.Descriptor instead.
func (*SCExpanseCol) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{77}
}

func (x *SCExpanseCol) GetCol() int32 {
	if x != nil {
		return x.Col
	}
	return 0
}

func (x *SCExpanseCol) GetIndex() []int32 {
	if x != nil {
		return x.Index
	}
	return nil
}

type VenomRole struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CR             *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	MathVersion    string                 `protobuf:"bytes,2,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	ModeSource     int32                  `protobuf:"varint,3,opt,name=ModeSource,proto3" json:"ModeSource,omitempty"`
	WildList       []*VenomWildData       `protobuf:"bytes,4,rep,name=WildList,proto3" json:"WildList,omitempty"`
	SCSelect       int32                  `protobuf:"varint,5,opt,name=SCSelect,proto3" json:"SCSelect,omitempty"`
	SCExpanseCols  []*SCExpanseCol        `protobuf:"bytes,6,rep,name=SCExpanseCols,proto3" json:"SCExpanseCols,omitempty"`
	SCExpanseScore float64                `protobuf:"fixed64,7,opt,name=SCExpanseScore,proto3" json:"SCExpanseScore,omitempty"`
	SCCount        int32                  `protobuf:"varint,8,opt,name=SCCount,proto3" json:"SCCount,omitempty"`
	BaseMesh       []int32                `protobuf:"varint,9,rep,packed,name=BaseMesh,proto3" json:"BaseMesh,omitempty"`
	WildTotalScore float64                `protobuf:"fixed64,10,opt,name=WildTotalScore,proto3" json:"WildTotalScore,omitempty"`
	SessionScore   float64                `protobuf:"fixed64,11,opt,name=SessionScore,proto3" json:"SessionScore,omitempty"`
	FutureMesh     []*VenomRole_Mesh      `protobuf:"bytes,12,rep,name=FutureMesh,proto3" json:"FutureMesh,omitempty"`
	FutureWildList []*VenomRole_WL        `protobuf:"bytes,13,rep,name=FutureWildList,proto3" json:"FutureWildList,omitempty"`
	RoundScore     float64                `protobuf:"fixed64,14,opt,name=RoundScore,proto3" json:"RoundScore,omitempty"`
	NewPlayer      bool                   `protobuf:"varint,15,opt,name=NewPlayer,proto3" json:"NewPlayer,omitempty"`
	Activity       bool                   `protobuf:"varint,16,opt,name=Activity,proto3" json:"Activity,omitempty"`
	Activities     []*NewActivity         `protobuf:"bytes,17,rep,name=Activities,proto3" json:"Activities,omitempty"`
	RespinSource   int32                  `protobuf:"varint,18,opt,name=RespinSource,proto3" json:"RespinSource,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *VenomRole) Reset() {
	*x = VenomRole{}
	mi := &file_common_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VenomRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VenomRole) ProtoMessage() {}

func (x *VenomRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VenomRole.ProtoReflect.Descriptor instead.
func (*VenomRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{78}
}

func (x *VenomRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *VenomRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *VenomRole) GetModeSource() int32 {
	if x != nil {
		return x.ModeSource
	}
	return 0
}

func (x *VenomRole) GetWildList() []*VenomWildData {
	if x != nil {
		return x.WildList
	}
	return nil
}

func (x *VenomRole) GetSCSelect() int32 {
	if x != nil {
		return x.SCSelect
	}
	return 0
}

func (x *VenomRole) GetSCExpanseCols() []*SCExpanseCol {
	if x != nil {
		return x.SCExpanseCols
	}
	return nil
}

func (x *VenomRole) GetSCExpanseScore() float64 {
	if x != nil {
		return x.SCExpanseScore
	}
	return 0
}

func (x *VenomRole) GetSCCount() int32 {
	if x != nil {
		return x.SCCount
	}
	return 0
}

func (x *VenomRole) GetBaseMesh() []int32 {
	if x != nil {
		return x.BaseMesh
	}
	return nil
}

func (x *VenomRole) GetWildTotalScore() float64 {
	if x != nil {
		return x.WildTotalScore
	}
	return 0
}

func (x *VenomRole) GetSessionScore() float64 {
	if x != nil {
		return x.SessionScore
	}
	return 0
}

func (x *VenomRole) GetFutureMesh() []*VenomRole_Mesh {
	if x != nil {
		return x.FutureMesh
	}
	return nil
}

func (x *VenomRole) GetFutureWildList() []*VenomRole_WL {
	if x != nil {
		return x.FutureWildList
	}
	return nil
}

func (x *VenomRole) GetRoundScore() float64 {
	if x != nil {
		return x.RoundScore
	}
	return 0
}

func (x *VenomRole) GetNewPlayer() bool {
	if x != nil {
		return x.NewPlayer
	}
	return false
}

func (x *VenomRole) GetActivity() bool {
	if x != nil {
		return x.Activity
	}
	return false
}

func (x *VenomRole) GetActivities() []*NewActivity {
	if x != nil {
		return x.Activities
	}
	return nil
}

func (x *VenomRole) GetRespinSource() int32 {
	if x != nil {
		return x.RespinSource
	}
	return 0
}

// ------------------------------------------------------------------------
// >>> Razorshark <<<
type EyeData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Multiple      int32                  `protobuf:"varint,2,opt,name=Multiple,proto3" json:"Multiple,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EyeData) Reset() {
	*x = EyeData{}
	mi := &file_common_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EyeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EyeData) ProtoMessage() {}

func (x *EyeData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EyeData.ProtoReflect.Descriptor instead.
func (*EyeData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{79}
}

func (x *EyeData) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *EyeData) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

type NewActivity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	StartTime     int64                  `protobuf:"varint,3,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,4,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	TotalEndTime  int64                  `protobuf:"varint,5,opt,name=TotalEndTime,proto3" json:"TotalEndTime,omitempty"`
	TotalSpinNum  int64                  `protobuf:"varint,6,opt,name=TotalSpinNum,proto3" json:"TotalSpinNum,omitempty"`
	SpinNum       int64                  `protobuf:"varint,7,opt,name=SpinNum,proto3" json:"SpinNum,omitempty"`
	TotalScore    float64                `protobuf:"fixed64,8,opt,name=TotalScore,proto3" json:"TotalScore,omitempty"`
	Bet           float64                `protobuf:"fixed64,9,opt,name=Bet,proto3" json:"Bet,omitempty"`
	Type          int64                  `protobuf:"varint,10,opt,name=Type,proto3" json:"Type,omitempty"`
	Status        int64                  `protobuf:"varint,11,opt,name=Status,proto3" json:"Status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewActivity) Reset() {
	*x = NewActivity{}
	mi := &file_common_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewActivity) ProtoMessage() {}

func (x *NewActivity) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewActivity.ProtoReflect.Descriptor instead.
func (*NewActivity) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{80}
}

func (x *NewActivity) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewActivity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *NewActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *NewActivity) GetTotalEndTime() int64 {
	if x != nil {
		return x.TotalEndTime
	}
	return 0
}

func (x *NewActivity) GetTotalSpinNum() int64 {
	if x != nil {
		return x.TotalSpinNum
	}
	return 0
}

func (x *NewActivity) GetSpinNum() int64 {
	if x != nil {
		return x.SpinNum
	}
	return 0
}

func (x *NewActivity) GetTotalScore() float64 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *NewActivity) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *NewActivity) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *NewActivity) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type RazorsharkRole struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CR                *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	MathVersion       string                 `protobuf:"bytes,2,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	MultiMesh         []int32                `protobuf:"varint,3,rep,packed,name=MultiMesh,proto3" json:"MultiMesh,omitempty"`
	FSWin             float64                `protobuf:"fixed64,4,opt,name=FSWin,proto3" json:"FSWin,omitempty"`
	StopIndex         []int32                `protobuf:"varint,5,rep,packed,name=StopIndex,proto3" json:"StopIndex,omitempty"`
	ReelSetIndex      []int32                `protobuf:"varint,6,rep,packed,name=ReelSetIndex,proto3" json:"ReelSetIndex,omitempty"`
	HasSeaWeed        []bool                 `protobuf:"varint,7,rep,packed,name=HasSeaWeed,proto3" json:"HasSeaWeed,omitempty"`
	SeaweedStatus     []int32                `protobuf:"varint,8,rep,packed,name=SeaweedStatus,proto3" json:"SeaweedStatus,omitempty"`
	RoundMaxMine      int32                  `protobuf:"varint,9,opt,name=RoundMaxMine,proto3" json:"RoundMaxMine,omitempty"`
	Continued         bool                   `protobuf:"varint,10,opt,name=Continued,proto3" json:"Continued,omitempty"`
	MineCount         int32                  `protobuf:"varint,11,opt,name=MineCount,proto3" json:"MineCount,omitempty"`
	RefreshList       []int32                `protobuf:"varint,12,rep,packed,name=RefreshList,proto3" json:"RefreshList,omitempty"`
	RefreshRoll       []int32                `protobuf:"varint,13,rep,packed,name=RefreshRoll,proto3" json:"RefreshRoll,omitempty"`
	EyesData          []*EyeData             `protobuf:"bytes,14,rep,name=EyesData,proto3" json:"EyesData,omitempty"`
	RefreshBack       int32                  `protobuf:"varint,15,opt,name=RefreshBack,proto3" json:"RefreshBack,omitempty"`
	NgStopIndex       []int32                `protobuf:"varint,16,rep,packed,name=NgStopIndex,proto3" json:"NgStopIndex,omitempty"`
	NgReelSetIndex    []int32                `protobuf:"varint,17,rep,packed,name=NgReelSetIndex,proto3" json:"NgReelSetIndex,omitempty"`
	NgHasSeaWeed      []bool                 `protobuf:"varint,18,rep,packed,name=NgHasSeaWeed,proto3" json:"NgHasSeaWeed,omitempty"`
	NgRefreshList     []int32                `protobuf:"varint,19,rep,packed,name=NgRefreshList,proto3" json:"NgRefreshList,omitempty"`
	NgRefreshRoll     []int32                `protobuf:"varint,20,rep,packed,name=NgRefreshRoll,proto3" json:"NgRefreshRoll,omitempty"`
	NgMesh            []int32                `protobuf:"varint,21,rep,packed,name=NgMesh,proto3" json:"NgMesh,omitempty"`
	BeforeFreeMesh    []int32                `protobuf:"varint,22,rep,packed,name=BeforeFreeMesh,proto3" json:"BeforeFreeMesh,omitempty"`
	NgExpectScNum     int32                  `protobuf:"varint,23,opt,name=NgExpectScNum,proto3" json:"NgExpectScNum,omitempty"`
	NgExpectTotalNum  int32                  `protobuf:"varint,24,opt,name=NgExpectTotalNum,proto3" json:"NgExpectTotalNum,omitempty"`
	FrontBack         int32                  `protobuf:"varint,25,opt,name=FrontBack,proto3" json:"FrontBack,omitempty"`
	UseBet            bool                   `protobuf:"varint,26,opt,name=UseBet,proto3" json:"UseBet,omitempty"`
	RazorsharkBetRole []*RazorsharkRole      `protobuf:"bytes,27,rep,name=RazorsharkBetRole,proto3" json:"RazorsharkBetRole,omitempty"`
	NewPlayer         bool                   `protobuf:"varint,28,opt,name=NewPlayer,proto3" json:"NewPlayer,omitempty"`
	BonusStatus       bool                   `protobuf:"varint,29,opt,name=BonusStatus,proto3" json:"BonusStatus,omitempty"`
	NewActivity       []*NewActivity         `protobuf:"bytes,30,rep,name=NewActivity,proto3" json:"NewActivity,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RazorsharkRole) Reset() {
	*x = RazorsharkRole{}
	mi := &file_common_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RazorsharkRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RazorsharkRole) ProtoMessage() {}

func (x *RazorsharkRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RazorsharkRole.ProtoReflect.Descriptor instead.
func (*RazorsharkRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{81}
}

func (x *RazorsharkRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *RazorsharkRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *RazorsharkRole) GetMultiMesh() []int32 {
	if x != nil {
		return x.MultiMesh
	}
	return nil
}

func (x *RazorsharkRole) GetFSWin() float64 {
	if x != nil {
		return x.FSWin
	}
	return 0
}

func (x *RazorsharkRole) GetStopIndex() []int32 {
	if x != nil {
		return x.StopIndex
	}
	return nil
}

func (x *RazorsharkRole) GetReelSetIndex() []int32 {
	if x != nil {
		return x.ReelSetIndex
	}
	return nil
}

func (x *RazorsharkRole) GetHasSeaWeed() []bool {
	if x != nil {
		return x.HasSeaWeed
	}
	return nil
}

func (x *RazorsharkRole) GetSeaweedStatus() []int32 {
	if x != nil {
		return x.SeaweedStatus
	}
	return nil
}

func (x *RazorsharkRole) GetRoundMaxMine() int32 {
	if x != nil {
		return x.RoundMaxMine
	}
	return 0
}

func (x *RazorsharkRole) GetContinued() bool {
	if x != nil {
		return x.Continued
	}
	return false
}

func (x *RazorsharkRole) GetMineCount() int32 {
	if x != nil {
		return x.MineCount
	}
	return 0
}

func (x *RazorsharkRole) GetRefreshList() []int32 {
	if x != nil {
		return x.RefreshList
	}
	return nil
}

func (x *RazorsharkRole) GetRefreshRoll() []int32 {
	if x != nil {
		return x.RefreshRoll
	}
	return nil
}

func (x *RazorsharkRole) GetEyesData() []*EyeData {
	if x != nil {
		return x.EyesData
	}
	return nil
}

func (x *RazorsharkRole) GetRefreshBack() int32 {
	if x != nil {
		return x.RefreshBack
	}
	return 0
}

func (x *RazorsharkRole) GetNgStopIndex() []int32 {
	if x != nil {
		return x.NgStopIndex
	}
	return nil
}

func (x *RazorsharkRole) GetNgReelSetIndex() []int32 {
	if x != nil {
		return x.NgReelSetIndex
	}
	return nil
}

func (x *RazorsharkRole) GetNgHasSeaWeed() []bool {
	if x != nil {
		return x.NgHasSeaWeed
	}
	return nil
}

func (x *RazorsharkRole) GetNgRefreshList() []int32 {
	if x != nil {
		return x.NgRefreshList
	}
	return nil
}

func (x *RazorsharkRole) GetNgRefreshRoll() []int32 {
	if x != nil {
		return x.NgRefreshRoll
	}
	return nil
}

func (x *RazorsharkRole) GetNgMesh() []int32 {
	if x != nil {
		return x.NgMesh
	}
	return nil
}

func (x *RazorsharkRole) GetBeforeFreeMesh() []int32 {
	if x != nil {
		return x.BeforeFreeMesh
	}
	return nil
}

func (x *RazorsharkRole) GetNgExpectScNum() int32 {
	if x != nil {
		return x.NgExpectScNum
	}
	return 0
}

func (x *RazorsharkRole) GetNgExpectTotalNum() int32 {
	if x != nil {
		return x.NgExpectTotalNum
	}
	return 0
}

func (x *RazorsharkRole) GetFrontBack() int32 {
	if x != nil {
		return x.FrontBack
	}
	return 0
}

func (x *RazorsharkRole) GetUseBet() bool {
	if x != nil {
		return x.UseBet
	}
	return false
}

func (x *RazorsharkRole) GetRazorsharkBetRole() []*RazorsharkRole {
	if x != nil {
		return x.RazorsharkBetRole
	}
	return nil
}

func (x *RazorsharkRole) GetNewPlayer() bool {
	if x != nil {
		return x.NewPlayer
	}
	return false
}

func (x *RazorsharkRole) GetBonusStatus() bool {
	if x != nil {
		return x.BonusStatus
	}
	return false
}

func (x *RazorsharkRole) GetNewActivity() []*NewActivity {
	if x != nil {
		return x.NewActivity
	}
	return nil
}

// ------------------------------------------------------------------------
// >>> Activity <<<
type ActInnerModel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsTrig        bool                   `protobuf:"varint,1,opt,name=IsTrig,proto3" json:"IsTrig,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Key           int32                  `protobuf:"varint,3,opt,name=Key,proto3" json:"Key,omitempty"`
	State         int32                  `protobuf:"varint,4,opt,name=State,proto3" json:"State,omitempty"`
	Start         int32                  `protobuf:"varint,5,opt,name=Start,proto3" json:"Start,omitempty"`
	End           int32                  `protobuf:"varint,6,opt,name=End,proto3" json:"End,omitempty"`
	Score         float64                `protobuf:"fixed64,7,opt,name=Score,proto3" json:"Score,omitempty"`
	Bet           float64                `protobuf:"fixed64,8,opt,name=Bet,proto3" json:"Bet,omitempty"`
	Level         int32                  `protobuf:"varint,9,opt,name=Level,proto3" json:"Level,omitempty"`
	TotalEnd      int32                  `protobuf:"varint,10,opt,name=TotalEnd,proto3" json:"TotalEnd,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActInnerModel) Reset() {
	*x = ActInnerModel{}
	mi := &file_common_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActInnerModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActInnerModel) ProtoMessage() {}

func (x *ActInnerModel) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActInnerModel.ProtoReflect.Descriptor instead.
func (*ActInnerModel) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{82}
}

func (x *ActInnerModel) GetIsTrig() bool {
	if x != nil {
		return x.IsTrig
	}
	return false
}

func (x *ActInnerModel) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ActInnerModel) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ActInnerModel) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *ActInnerModel) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ActInnerModel) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *ActInnerModel) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ActInnerModel) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *ActInnerModel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ActInnerModel) GetTotalEnd() int32 {
	if x != nil {
		return x.TotalEnd
	}
	return 0
}

type FreeSpinActItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         int32                  `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"`
	Key           int32                  `protobuf:"varint,2,opt,name=Key,proto3" json:"Key,omitempty"`
	Start         int32                  `protobuf:"varint,3,opt,name=Start,proto3" json:"Start,omitempty"`
	End           int32                  `protobuf:"varint,4,opt,name=End,proto3" json:"End,omitempty"`
	Index         int32                  `protobuf:"varint,5,opt,name=Index,proto3" json:"Index,omitempty"`
	SpinNum       int32                  `protobuf:"varint,6,opt,name=SpinNum,proto3" json:"SpinNum,omitempty"`
	Bindex        int32                  `protobuf:"varint,7,opt,name=Bindex,proto3" json:"Bindex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FreeSpinActItem) Reset() {
	*x = FreeSpinActItem{}
	mi := &file_common_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FreeSpinActItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeSpinActItem) ProtoMessage() {}

func (x *FreeSpinActItem) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeSpinActItem.ProtoReflect.Descriptor instead.
func (*FreeSpinActItem) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{83}
}

func (x *FreeSpinActItem) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *FreeSpinActItem) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *FreeSpinActItem) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *FreeSpinActItem) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *FreeSpinActItem) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *FreeSpinActItem) GetSpinNum() int32 {
	if x != nil {
		return x.SpinNum
	}
	return 0
}

func (x *FreeSpinActItem) GetBindex() int32 {
	if x != nil {
		return x.Bindex
	}
	return 0
}

type FreeSpinExt struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpinNum       int32                  `protobuf:"varint,1,opt,name=SpinNum,proto3" json:"SpinNum,omitempty"`
	Index         int32                  `protobuf:"varint,2,opt,name=Index,proto3" json:"Index,omitempty"`
	Bindex        int32                  `protobuf:"varint,3,opt,name=Bindex,proto3" json:"Bindex,omitempty"`
	List          []*FreeSpinActItem     `protobuf:"bytes,4,rep,name=List,proto3" json:"List,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FreeSpinExt) Reset() {
	*x = FreeSpinExt{}
	mi := &file_common_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FreeSpinExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeSpinExt) ProtoMessage() {}

func (x *FreeSpinExt) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeSpinExt.ProtoReflect.Descriptor instead.
func (*FreeSpinExt) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{84}
}

func (x *FreeSpinExt) GetSpinNum() int32 {
	if x != nil {
		return x.SpinNum
	}
	return 0
}

func (x *FreeSpinExt) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *FreeSpinExt) GetBindex() int32 {
	if x != nil {
		return x.Bindex
	}
	return 0
}

func (x *FreeSpinExt) GetList() []*FreeSpinActItem {
	if x != nil {
		return x.List
	}
	return nil
}

type RankActItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         int32                  `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"`
	Key           int32                  `protobuf:"varint,2,opt,name=Key,proto3" json:"Key,omitempty"`
	Start         int32                  `protobuf:"varint,3,opt,name=Start,proto3" json:"Start,omitempty"`
	End           int32                  `protobuf:"varint,4,opt,name=End,proto3" json:"End,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RankActItem) Reset() {
	*x = RankActItem{}
	mi := &file_common_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RankActItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankActItem) ProtoMessage() {}

func (x *RankActItem) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankActItem.ProtoReflect.Descriptor instead.
func (*RankActItem) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{85}
}

func (x *RankActItem) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *RankActItem) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *RankActItem) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *RankActItem) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type RankExt struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*RankActItem         `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	Level         int32                  `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
	NotBet        bool                   `protobuf:"varint,3,opt,name=NotBet,proto3" json:"NotBet,omitempty"`
	RedDot        bool                   `protobuf:"varint,4,opt,name=RedDot,proto3" json:"RedDot,omitempty"`
	ShowIcon      bool                   `protobuf:"varint,5,opt,name=ShowIcon,proto3" json:"ShowIcon,omitempty"`
	Bet           float64                `protobuf:"fixed64,6,opt,name=Bet,proto3" json:"Bet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RankExt) Reset() {
	*x = RankExt{}
	mi := &file_common_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RankExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankExt) ProtoMessage() {}

func (x *RankExt) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankExt.ProtoReflect.Descriptor instead.
func (*RankExt) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{86}
}

func (x *RankExt) GetList() []*RankActItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RankExt) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *RankExt) GetNotBet() bool {
	if x != nil {
		return x.NotBet
	}
	return false
}

func (x *RankExt) GetRedDot() bool {
	if x != nil {
		return x.RedDot
	}
	return false
}

func (x *RankExt) GetShowIcon() bool {
	if x != nil {
		return x.ShowIcon
	}
	return false
}

func (x *RankExt) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

type ActModel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Leftover      bool                   `protobuf:"varint,1,opt,name=Leftover,proto3" json:"Leftover,omitempty"`
	Bonuses       float64                `protobuf:"fixed64,2,opt,name=Bonuses,proto3" json:"Bonuses,omitempty"`
	Act           *ActInnerModel         `protobuf:"bytes,3,opt,name=Act,proto3" json:"Act,omitempty"`
	FsExtend      *FreeSpinExt           `protobuf:"bytes,4,opt,name=FsExtend,proto3" json:"FsExtend,omitempty"`
	RankExt       *RankExt               `protobuf:"bytes,5,opt,name=RankExt,proto3" json:"RankExt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActModel) Reset() {
	*x = ActModel{}
	mi := &file_common_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActModel) ProtoMessage() {}

func (x *ActModel) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActModel.ProtoReflect.Descriptor instead.
func (*ActModel) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{87}
}

func (x *ActModel) GetLeftover() bool {
	if x != nil {
		return x.Leftover
	}
	return false
}

func (x *ActModel) GetBonuses() float64 {
	if x != nil {
		return x.Bonuses
	}
	return 0
}

func (x *ActModel) GetAct() *ActInnerModel {
	if x != nil {
		return x.Act
	}
	return nil
}

func (x *ActModel) GetFsExtend() *FreeSpinExt {
	if x != nil {
		return x.FsExtend
	}
	return nil
}

func (x *ActModel) GetRankExt() *RankExt {
	if x != nil {
		return x.RankExt
	}
	return nil
}

type StandardRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StandardRes) Reset() {
	*x = StandardRes{}
	mi := &file_common_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StandardRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardRes) ProtoMessage() {}

func (x *StandardRes) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardRes.ProtoReflect.Descriptor instead.
func (*StandardRes) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{88}
}

func (x *StandardRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *StandardRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Multi struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbols       []int32                `protobuf:"varint,1,rep,packed,name=Symbols,proto3" json:"Symbols,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Multi) Reset() {
	*x = Multi{}
	mi := &file_common_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Multi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Multi) ProtoMessage() {}

func (x *Multi) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Multi.ProtoReflect.Descriptor instead.
func (*Multi) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{89}
}

func (x *Multi) GetSymbols() []int32 {
	if x != nil {
		return x.Symbols
	}
	return nil
}

type ColMultiIndex struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HasMulti      bool                   `protobuf:"varint,1,opt,name=HasMulti,proto3" json:"HasMulti,omitempty"`
	Count         int32                  `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	RowIndex      int32                  `protobuf:"varint,3,opt,name=RowIndex,proto3" json:"RowIndex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColMultiIndex) Reset() {
	*x = ColMultiIndex{}
	mi := &file_common_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColMultiIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColMultiIndex) ProtoMessage() {}

func (x *ColMultiIndex) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColMultiIndex.ProtoReflect.Descriptor instead.
func (*ColMultiIndex) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{90}
}

func (x *ColMultiIndex) GetHasMulti() bool {
	if x != nil {
		return x.HasMulti
	}
	return false
}

func (x *ColMultiIndex) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ColMultiIndex) GetRowIndex() int32 {
	if x != nil {
		return x.RowIndex
	}
	return 0
}

type NeZhaRole struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CR               *CommonRole            `protobuf:"bytes,1,opt,name=CR,proto3" json:"CR,omitempty"`
	MathVersion      string                 `protobuf:"bytes,2,opt,name=MathVersion,proto3" json:"MathVersion,omitempty"`
	CascadeWinCount  int32                  `protobuf:"varint,3,opt,name=CascadeWinCount,proto3" json:"CascadeWinCount,omitempty"`
	NewPlayer        bool                   `protobuf:"varint,4,opt,name=NewPlayer,proto3" json:"NewPlayer,omitempty"`
	Chess            string                 `protobuf:"bytes,5,opt,name=Chess,proto3" json:"Chess,omitempty"`
	NewActivity      []*NewActivity         `protobuf:"bytes,6,rep,name=NewActivity,proto3" json:"NewActivity,omitempty"`
	RoundEnd         bool                   `protobuf:"varint,7,opt,name=RoundEnd,proto3" json:"RoundEnd,omitempty"`
	NextCascadeModel *NeZhaRole             `protobuf:"bytes,8,opt,name=NextCascadeModel,proto3" json:"NextCascadeModel,omitempty"`
	IsRealNewPlayer  bool                   `protobuf:"varint,9,opt,name=IsRealNewPlayer,proto3" json:"IsRealNewPlayer,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NeZhaRole) Reset() {
	*x = NeZhaRole{}
	mi := &file_common_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NeZhaRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeZhaRole) ProtoMessage() {}

func (x *NeZhaRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeZhaRole.ProtoReflect.Descriptor instead.
func (*NeZhaRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{91}
}

func (x *NeZhaRole) GetCR() *CommonRole {
	if x != nil {
		return x.CR
	}
	return nil
}

func (x *NeZhaRole) GetMathVersion() string {
	if x != nil {
		return x.MathVersion
	}
	return ""
}

func (x *NeZhaRole) GetCascadeWinCount() int32 {
	if x != nil {
		return x.CascadeWinCount
	}
	return 0
}

func (x *NeZhaRole) GetNewPlayer() bool {
	if x != nil {
		return x.NewPlayer
	}
	return false
}

func (x *NeZhaRole) GetChess() string {
	if x != nil {
		return x.Chess
	}
	return ""
}

func (x *NeZhaRole) GetNewActivity() []*NewActivity {
	if x != nil {
		return x.NewActivity
	}
	return nil
}

func (x *NeZhaRole) GetRoundEnd() bool {
	if x != nil {
		return x.RoundEnd
	}
	return false
}

func (x *NeZhaRole) GetNextCascadeModel() *NeZhaRole {
	if x != nil {
		return x.NextCascadeModel
	}
	return nil
}

func (x *NeZhaRole) GetIsRealNewPlayer() bool {
	if x != nil {
		return x.IsRealNewPlayer
	}
	return false
}

type GameEngineRole struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RoleId         string                 `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`                  // Role id
	ParentId       int64                  `protobuf:"varint,2,opt,name=ParentId,proto3" json:"ParentId,omitempty"`             // Bet id
	SubId          int64                  `protobuf:"varint,3,opt,name=SubId,proto3" json:"SubId,omitempty"`                   // Sub id of bet
	Bet            float64                `protobuf:"fixed64,4,opt,name=Bet,proto3" json:"Bet,omitempty"`                      // Bet Level
	Score          float64                `protobuf:"fixed64,5,opt,name=Score,proto3" json:"Score,omitempty"`                  // The final settlement score
	Mesh           []int32                `protobuf:"varint,6,rep,packed,name=Mesh,proto3" json:"Mesh,omitempty"`              // List of symbols
	GameState      int32                  `protobuf:"varint,7,opt,name=GameState,proto3" json:"GameState,omitempty"`           // Game state
	WinLines       []*WinLine             `protobuf:"bytes,8,rep,name=WinLines,proto3" json:"WinLines,omitempty"`              // Win lines
	Multiple       float64                `protobuf:"fixed64,9,opt,name=Multiple,proto3" json:"Multiple,omitempty"`            // Win multiple
	TotalScore     float64                `protobuf:"fixed64,10,opt,name=TotalScore,proto3" json:"TotalScore,omitempty"`       // Total win score
	FSNum          int32                  `protobuf:"varint,11,opt,name=FSNum,proto3" json:"FSNum,omitempty"`                  // Number of free spin
	FSTotalNum     int32                  `protobuf:"varint,12,opt,name=FSTotalNum,proto3" json:"FSTotalNum,omitempty"`        // Total number of free spin
	FSTotalScore   float64                `protobuf:"fixed64,13,opt,name=FSTotalScore,proto3" json:"FSTotalScore,omitempty"`   // total win score of free game
	RSNum          int32                  `protobuf:"varint,14,opt,name=RSNum,proto3" json:"RSNum,omitempty"`                  // Number of respin, when more than 0 will trigger respin
	Cascade        bool                   `protobuf:"varint,15,opt,name=Cascade,proto3" json:"Cascade,omitempty"`              // Cascade flag
	GameExtendInfo []byte                 `protobuf:"bytes,16,opt,name=GameExtendInfo,proto3" json:"GameExtendInfo,omitempty"` // 游戏扩展消息
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GameEngineRole) Reset() {
	*x = GameEngineRole{}
	mi := &file_common_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameEngineRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEngineRole) ProtoMessage() {}

func (x *GameEngineRole) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEngineRole.ProtoReflect.Descriptor instead.
func (*GameEngineRole) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{92}
}

func (x *GameEngineRole) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *GameEngineRole) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *GameEngineRole) GetSubId() int64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *GameEngineRole) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *GameEngineRole) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GameEngineRole) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

func (x *GameEngineRole) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

func (x *GameEngineRole) GetWinLines() []*WinLine {
	if x != nil {
		return x.WinLines
	}
	return nil
}

func (x *GameEngineRole) GetMultiple() float64 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *GameEngineRole) GetTotalScore() float64 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *GameEngineRole) GetFSNum() int32 {
	if x != nil {
		return x.FSNum
	}
	return 0
}

func (x *GameEngineRole) GetFSTotalNum() int32 {
	if x != nil {
		return x.FSTotalNum
	}
	return 0
}

func (x *GameEngineRole) GetFSTotalScore() float64 {
	if x != nil {
		return x.FSTotalScore
	}
	return 0
}

func (x *GameEngineRole) GetRSNum() int32 {
	if x != nil {
		return x.RSNum
	}
	return 0
}

func (x *GameEngineRole) GetCascade() bool {
	if x != nil {
		return x.Cascade
	}
	return false
}

func (x *GameEngineRole) GetGameExtendInfo() []byte {
	if x != nil {
		return x.GameExtendInfo
	}
	return nil
}

type VenomRole_Mesh struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mesh          []int32                `protobuf:"varint,1,rep,packed,name=mesh,proto3" json:"mesh,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VenomRole_Mesh) Reset() {
	*x = VenomRole_Mesh{}
	mi := &file_common_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VenomRole_Mesh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VenomRole_Mesh) ProtoMessage() {}

func (x *VenomRole_Mesh) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VenomRole_Mesh.ProtoReflect.Descriptor instead.
func (*VenomRole_Mesh) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{78, 0}
}

func (x *VenomRole_Mesh) GetMesh() []int32 {
	if x != nil {
		return x.Mesh
	}
	return nil
}

type VenomRole_WL struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WildList      []*VenomWildData       `protobuf:"bytes,1,rep,name=WildList,proto3" json:"WildList,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VenomRole_WL) Reset() {
	*x = VenomRole_WL{}
	mi := &file_common_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VenomRole_WL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VenomRole_WL) ProtoMessage() {}

func (x *VenomRole_WL) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VenomRole_WL.ProtoReflect.Descriptor instead.
func (*VenomRole_WL) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{78, 1}
}

func (x *VenomRole_WL) GetWildList() []*VenomWildData {
	if x != nil {
		return x.WildList
	}
	return nil
}

var File_common_proto protoreflect.FileDescriptor

const file_common_proto_rawDesc = "" +
	"\n" +
	"\fcommon.proto\x12\tpb_common\"\xcb\x01\n" +
	"\aWinLine\x12\x16\n" +
	"\x06LineId\x18\x01 \x01(\x05R\x06LineId\x12\x1e\n" +
	"\n" +
	"ElementNum\x18\x02 \x01(\x05R\n" +
	"ElementNum\x12\x18\n" +
	"\aElement\x18\x03 \x01(\x05R\aElement\x12\x14\n" +
	"\x05Score\x18\x05 \x01(\x01R\x05Score\x12\x1a\n" +
	"\bMultiple\x18\x06 \x01(\x05R\bMultiple\x12\x12\n" +
	"\x04Mesh\x18\a \x03(\x05R\x04Mesh\x12\x16\n" +
	"\x06Symbol\x18\b \x01(\x05R\x06Symbol\x12\x10\n" +
	"\x03Num\x18\t \x01(\x05R\x03Num\"3\n" +
	"\aJackpot\x12\x12\n" +
	"\x04Type\x18\x01 \x01(\x05R\x04Type\x12\x14\n" +
	"\x05Score\x18\x02 \x01(\x01R\x05Score\"\x93\x01\n" +
	"\aWinType\x12\x12\n" +
	"\x04Type\x18\x01 \x01(\x05R\x04Type\x12\x1c\n" +
	"\tWildTimes\x18\x02 \x01(\x05R\tWildTimes\x12\x10\n" +
	"\x03Num\x18\x03 \x01(\x05R\x03Num\x12\x14\n" +
	"\x05Score\x18\x04 \x01(\x01R\x05Score\x12\x12\n" +
	"\x04Mesh\x18\x05 \x03(\x05R\x04Mesh\x12\x1a\n" +
	"\bLineType\x18\x06 \x01(\x05R\bLineType\"\xb0\x02\n" +
	"\x02VS\x12\x14\n" +
	"\x05Index\x18\x01 \x01(\x05R\x05Index\x12\x16\n" +
	"\x06Symbol\x18\x02 \x01(\x05R\x06Symbol\x12\x16\n" +
	"\x06Index1\x18\x03 \x01(\x05R\x06Index1\x12 \n" +
	"\vMultiplier1\x18\x05 \x01(\x05R\vMultiplier1\x12\x16\n" +
	"\x06Index2\x18\x04 \x01(\x05R\x06Index2\x12 \n" +
	"\vMultiplier2\x18\x06 \x01(\x05R\vMultiplier2\x12\x1a\n" +
	"\bWinIndex\x18\a \x01(\x05R\bWinIndex\x12$\n" +
	"\rWinMultiplier\x18\b \x01(\x05R\rWinMultiplier\x12\"\n" +
	"\fReplacedMesh\x18\t \x03(\x05R\fReplacedMesh\x12\"\n" +
	"\fTargetSymbol\x18\n" +
	" \x01(\x05R\fTargetSymbol\"\xa6\x03\n" +
	"\n" +
	"CommonRole\x12\x16\n" +
	"\x06RoleId\x18\x01 \x01(\tR\x06RoleId\x12\x1a\n" +
	"\bParentId\x18\x02 \x01(\x03R\bParentId\x12\x14\n" +
	"\x05SubId\x18\x03 \x01(\x03R\x05SubId\x12\x10\n" +
	"\x03Bet\x18\x04 \x01(\x01R\x03Bet\x12\x14\n" +
	"\x05Score\x18\x05 \x01(\x01R\x05Score\x12\x12\n" +
	"\x04Mesh\x18\x06 \x03(\x05R\x04Mesh\x12\x1c\n" +
	"\tGameState\x18\a \x01(\x05R\tGameState\x12.\n" +
	"\bWinLines\x18\b \x03(\v2\x12.pb_common.WinLineR\bWinLines\x12\x1a\n" +
	"\bMultiple\x18\t \x01(\x01R\bMultiple\x12\x1e\n" +
	"\n" +
	"TotalScore\x18\n" +
	" \x01(\x01R\n" +
	"TotalScore\x12\x14\n" +
	"\x05FSNum\x18\v \x01(\x05R\x05FSNum\x12\x1e\n" +
	"\n" +
	"FSTotalNum\x18\f \x01(\x05R\n" +
	"FSTotalNum\x12\"\n" +
	"\fFSTotalScore\x18\r \x01(\x01R\fFSTotalScore\x12\x14\n" +
	"\x05RSNum\x18\x0e \x01(\x05R\x05RSNum\x12\x18\n" +
	"\aCascade\x18\x0f \x01(\bR\aCascade\"V\n" +
	"\n" +
	"Multiplier\x12\x14\n" +
	"\x05Index\x18\x01 \x01(\x05R\x05Index\x12\x16\n" +
	"\x06Symbol\x18\x02 \x01(\x05R\x06Symbol\x12\x1a\n" +
	"\bMultiple\x18\x03 \x01(\x05R\bMultiple\"]\n" +
	"\tBetLevels\x12\x12\n" +
	"\x04Data\x18\x01 \x03(\x01R\x04Data\x12\"\n" +
	"\fCurrencyCode\x18\x02 \x01(\tR\fCurrencyCode\x12\x18\n" +
	"\aInitBet\x18\x03 \x01(\x01R\aInitBet\"\x9b\x03\n" +
	"\rMOperatorRole\x12*\n" +
	"\x10OperatorPlayerId\x18\x01 \x01(\tR\x10OperatorPlayerId\x12$\n" +
	"\rOperatorToken\x18\x02 \x01(\tR\rOperatorToken\x120\n" +
	"\x13OperatorPlayerToken\x18\x03 \x01(\tR\x13OperatorPlayerToken\x12&\n" +
	"\x0eOperatorCbLink\x18\x04 \x01(\tR\x0eOperatorCbLink\x122\n" +
	"\x14OperatorCurrencyCode\x18\x05 \x01(\tR\x14OperatorCurrencyCode\x12*\n" +
	"\x10OperatorNickName\x18\x06 \x01(\tR\x10OperatorNickName\x12,\n" +
	"\x11OperatorSessionId\x18\a \x01(\tR\x11OperatorSessionId\x12\x1c\n" +
	"\tSecretKey\x18\b \x01(\tR\tSecretKey\x122\n" +
	"\x14OperatorCurrencyMult\x18\t \x01(\x03R\x14OperatorCurrencyMult\"E\n" +
	"\vSuppleChess\x12\x1c\n" +
	"\tMeshIndex\x18\x01 \x01(\x05R\tMeshIndex\x12\x18\n" +
	"\aElement\x18\x02 \x01(\x05R\aElement\"7\n" +
	"\tBetToList\x12\x10\n" +
	"\x03Bet\x18\x01 \x01(\x01R\x03Bet\x12\x18\n" +
	"\aElement\x18\x02 \x03(\x05R\aElement\"\xe6\x04\n" +
	"\n" +
	"MDoggyRole\x12\x16\n" +
	"\x06RoleId\x18\x01 \x01(\tR\x06RoleId\x12\x1a\n" +
	"\bParentId\x18\x02 \x01(\x03R\bParentId\x12\x14\n" +
	"\x05SubId\x18\x03 \x01(\x03R\x05SubId\x12\x14\n" +
	"\x05Score\x18\x04 \x01(\x01R\x05Score\x12\x10\n" +
	"\x03Bet\x18\x05 \x01(\x01R\x03Bet\x12\x12\n" +
	"\x04Mesh\x18\x06 \x03(\x05R\x04Mesh\x12\x18\n" +
	"\aWinMesh\x18\a \x03(\x05R\aWinMesh\x12\x16\n" +
	"\x06Status\x18\b \x01(\x05R\x06Status\x12\x14\n" +
	"\x05FSNum\x18\t \x01(\x05R\x05FSNum\x12\x1e\n" +
	"\n" +
	"TotalFSNum\x18\n" +
	" \x01(\x05R\n" +
	"TotalFSNum\x12.\n" +
	"\x12TotalFreeSpinScore\x18\v \x01(\x01R\x12TotalFreeSpinScore\x12 \n" +
	"\vFSChessList\x18\f \x03(\x05R\vFSChessList\x12\x18\n" +
	"\aFSChess\x18\r \x01(\x05R\aFSChess\x12\x1a\n" +
	"\bMultiple\x18\x0e \x01(\x05R\bMultiple\x12\x1a\n" +
	"\bCoverage\x18\x0f \x03(\x05R\bCoverage\x126\n" +
	"\n" +
	"SuppleMesh\x18\x10 \x03(\v2\x16.pb_common.SuppleChessR\n" +
	"SuppleMesh\x12 \n" +
	"\vBeforeScore\x18\x11 \x01(\x01R\vBeforeScore\x12\x1a\n" +
	"\bBoomMesh\x18\x12 \x03(\x05R\bBoomMesh\x12\x16\n" +
	"\x06IsShow\x18\x13 \x01(\x05R\x06IsShow\x128\n" +
	"\fBetChessMesh\x18\x14 \x03(\v2\x14.pb_common.BetToListR\fBetChessMesh\"\x85\x01\n" +
	"\x05Bonus\x12\x12\n" +
	"\x04Type\x18\x01 \x01(\x05R\x04Type\x12 \n" +
	"\vOldMultiple\x18\x02 \x01(\x01R\vOldMultiple\x12\x1a\n" +
	"\bMultiple\x18\x03 \x01(\x01R\bMultiple\x12\x10\n" +
	"\x03Pos\x18\x04 \x01(\x05R\x03Pos\x12\x18\n" +
	"\aEffects\x18\x05 \x03(\x05R\aEffects\"\xf8\a\n" +
	"\x0eMoneytrainRole\x12\x16\n" +
	"\x06RoleId\x18\x01 \x01(\tR\x06RoleId\x12\x1a\n" +
	"\bParentId\x18\x02 \x01(\x03R\bParentId\x12\x14\n" +
	"\x05SubId\x18\x03 \x01(\x03R\x05SubId\x12\x14\n" +
	"\x05Score\x18\x04 \x01(\x01R\x05Score\x12\x1a\n" +
	"\bMultiple\x18\x05 \x01(\x01R\bMultiple\x12(\n" +
	"\x0fRSTotalMultiple\x18\x06 \x01(\x01R\x0fRSTotalMultiple\x12\x10\n" +
	"\x03Bet\x18\a \x01(\x01R\x03Bet\x12\x12\n" +
	"\x04Mesh\x18\b \x03(\x05R\x04Mesh\x12.\n" +
	"\bWinLines\x18\t \x03(\v2\x12.pb_common.WinLineR\bWinLines\x12\x16\n" +
	"\x06Status\x18\n" +
	" \x01(\x05R\x06Status\x12\x14\n" +
	"\x05FSNum\x18\v \x01(\x05R\x05FSNum\x12\x1a\n" +
	"\bFSNumHis\x18\f \x03(\x05R\bFSNumHis\x12\x1e\n" +
	"\n" +
	"FSResetNum\x18\r \x01(\x05R\n" +
	"FSResetNum\x12(\n" +
	"\x0fFSTotalMultiple\x18\x0e \x01(\x01R\x0fFSTotalMultiple\x12\x1a\n" +
	"\bFSColNum\x18\x0f \x01(\x05R\bFSColNum\x12F\n" +
	"\tBonusInfo\x18\x10 \x03(\v2(.pb_common.MoneytrainRole.BonusInfoEntryR\tBonusInfo\x12O\n" +
	"\fNewBonusInfo\x18\x11 \x03(\v2+.pb_common.MoneytrainRole.NewBonusInfoEntryR\fNewBonusInfo\x12d\n" +
	"\x13PresistentBonusInfo\x18\x12 \x03(\v22.pb_common.MoneytrainRole.PresistentBonusInfoEntryR\x13PresistentBonusInfo\x12>\n" +
	"\x11NecromancyEffects\x18\x13 \x03(\v2\x10.pb_common.BonusR\x11NecromancyEffects\x1aN\n" +
	"\x0eBonusInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.pb_common.BonusR\x05value:\x028\x01\x1aQ\n" +
	"\x11NewBonusInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.pb_common.BonusR\x05value:\x028\x01\x1aX\n" +
	"\x18PresistentBonusInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.pb_common.BonusR\x05value:\x028\x01\"\x8f\x01\n" +
	"\aVsChess\x12\x14\n" +
	"\x05Index\x18\x01 \x01(\x05R\x05Index\x12\x1a\n" +
	"\bColIndex\x18\x02 \x01(\x05R\bColIndex\x12\x1c\n" +
	"\tDragonMul\x18\x03 \x01(\x05R\tDragonMul\x12\x1c\n" +
	"\tSlayerMul\x18\x04 \x01(\x05R\tSlayerMul\x12\x16\n" +
	"\x06WinMul\x18\x05 \x01(\x05R\x06WinMul\"\xfe\x04\n" +
	"\x11MDragonSlayerRole\x12\x16\n" +
	"\x06RoleId\x18\x01 \x01(\tR\x06RoleId\x12\x1a\n" +
	"\bParentId\x18\x02 \x01(\x03R\bParentId\x12\x14\n" +
	"\x05SubId\x18\x03 \x01(\x03R\x05SubId\x12\x14\n" +
	"\x05Score\x18\x04 \x01(\x01R\x05Score\x12\x10\n" +
	"\x03Bet\x18\x05 \x01(\x01R\x03Bet\x12\x1a\n" +
	"\bMultiple\x18\x06 \x01(\x01R\bMultiple\x12\x12\n" +
	"\x04Mesh\x18\a \x03(\x05R\x04Mesh\x12.\n" +
	"\bWinLines\x18\b \x03(\v2\x12.pb_common.WinLineR\bWinLines\x12\x16\n" +
	"\x06Status\x18\t \x01(\x05R\x06Status\x12\x14\n" +
	"\x05FSNum\x18\n" +
	" \x01(\x05R\x05FSNum\x12\x1e\n" +
	"\n" +
	"TotalFSNum\x18\v \x01(\x05R\n" +
	"TotalFSNum\x12\"\n" +
	"\fFSTotalScore\x18\f \x01(\x01R\fFSTotalScore\x12\x1e\n" +
	"\n" +
	"AddWildNum\x18\r \x01(\x05R\n" +
	"AddWildNum\x12 \n" +
	"\vAddMultiple\x18\x0e \x01(\x05R\vAddMultiple\x12\x16\n" +
	"\x06FSType\x18\x0f \x01(\x05R\x06FSType\x12\x1a\n" +
	"\bWildMesh\x18\x10 \x03(\x05R\bWildMesh\x12@\n" +
	"\x06VSList\x18\x11 \x03(\v2(.pb_common.MDragonSlayerRole.VSListEntryR\x06VSList\x12\x1e\n" +
	"\n" +
	"FSWinScore\x18\x12 \x01(\x01R\n" +
	"FSWinScore\x1aM\n" +
	"\vVSListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.pb_common.VsChessR\x05value:\x028\x01\"\x86\x01\n" +
	"\bWantedVS\x12\x1c\n" +
	"\tMultiple1\x18\x01 \x01(\x05R\tMultiple1\x12\x1c\n" +
	"\tMultiple2\x18\x02 \x01(\x05R\tMultiple2\x12 \n" +
	"\vWinMultiple\x18\x03 \x01(\x05R\vWinMultiple\x12\x1c\n" +
	"\tMeshIndex\x18\x04 \x01(\x05R\tMeshIndex\"\x8f\x04\n" +
	"\n" +
	"WantedRole\x12\x16\n" +
	"\x06RoleId\x18\x01 \x01(\tR\x06RoleId\x12\x1a\n" +
	"\bParentId\x18\x02 \x01(\x03R\bParentId\x12\x14\n" +
	"\x05SubId\x18\x03 \x01(\x03R\x05SubId\x12\x14\n" +
	"\x05Score\x18\x04 \x01(\x01R\x05Score\x12\x10\n" +
	"\x03Bet\x18\x05 \x01(\x01R\x03Bet\x12\x12\n" +
	"\x04Mesh\x18\x06 \x03(\x05R\x04Mesh\x12\x1c\n" +
	"\tGameState\x18\a \x01(\x05R\tGameState\x12.\n" +
	"\bWinTypes\x18\b \x03(\v2\x12.pb_common.WinTypeR\bWinTypes\x12\x1a\n" +
	"\bTotalWin\x18\t \x01(\x01R\bTotalWin\x12\"\n" +
	"\fFreeSpinTime\x18\n" +
	" \x01(\x05R\fFreeSpinTime\x12,\n" +
	"\x11TotalFreeSpinTime\x18\v \x01(\x05R\x11TotalFreeSpinTime\x12.\n" +
	"\x12TotalFreeSpinScore\x18\f \x01(\x01R\x12TotalFreeSpinScore\x12\x1a\n" +
	"\bTopWilds\x18\r \x01(\x05R\bTopWilds\x12 \n" +
	"\vTopMultiple\x18\x0e \x01(\x05R\vTopMultiple\x12/\n" +
	"\bWantedVS\x18\x0f \x03(\v2\x13.pb_common.WantedVSR\bWantedVS\x12 \n" +
	"\vMathVersion\x18\x10 \x01(\tR\vMathVersion\"c\n" +
	"\rSpecialSymbol\x12\x1c\n" +
	"\tMeshIndex\x18\x01 \x01(\x05R\tMeshIndex\x12\x1e\n" +
	"\n" +
	"SymbolType\x18\x02 \x01(\x05R\n" +
	"SymbolType\x12\x14\n" +
	"\x05Multi\x18\x03 \x01(\x05R\x05Multi\"|\n" +
	"\fWinClearList\x12\x16\n" +
	"\x06Symbol\x18\x01 \x01(\x05R\x06Symbol\x12\x14\n" +
	"\x05Count\x18\x02 \x01(\x05R\x05Count\x12\x14\n" +
	"\x05Multi\x18\x03 \x01(\x01R\x05Multi\x12\x14\n" +
	"\x05Score\x18\x04 \x01(\x01R\x05Score\x12\x12\n" +
	"\x04Mesh\x18\x05 \x03(\x05R\x04Mesh\"\xc2\b\n" +
	"\x10HandOfAnubisRole\x12\x16\n" +
	"\x06RoleId\x18\x01 \x01(\tR\x06RoleId\x12\x1a\n" +
	"\bParentId\x18\x02 \x01(\x03R\bParentId\x12\x14\n" +
	"\x05SubId\x18\x03 \x01(\x03R\x05SubId\x12\x14\n" +
	"\x05Score\x18\x04 \x01(\x01R\x05Score\x12\x10\n" +
	"\x03Bet\x18\x05 \x01(\x01R\x03Bet\x12\x12\n" +
	"\x04Mesh\x18\x06 \x03(\x05R\x04Mesh\x12\x1c\n" +
	"\tGameState\x18\a \x01(\x05R\tGameState\x12;\n" +
	"\fWinClearList\x18\b \x03(\v2\x17.pb_common.WinClearListR\fWinClearList\x12\x1a\n" +
	"\bTotalWin\x18\t \x01(\x01R\bTotalWin\x12\"\n" +
	"\fFreeSpinTime\x18\n" +
	" \x01(\x05R\fFreeSpinTime\x12,\n" +
	"\x11TotalFreeSpinTime\x18\v \x01(\x05R\x11TotalFreeSpinTime\x12.\n" +
	"\x12TotalFreeSpinScore\x18\f \x01(\x01R\x12TotalFreeSpinScore\x124\n" +
	"\tStuffMesh\x18\r \x03(\v2\x16.pb_common.SuppleChessR\tStuffMesh\x12(\n" +
	"\x0fUnderworldMulti\x18\x0e \x03(\x05R\x0fUnderworldMulti\x12:\n" +
	"\x18UnderworldActivatedMulti\x18\x0f \x03(\x05R\x18UnderworldActivatedMulti\x12$\n" +
	"\rJudgmentMulti\x18\x10 \x03(\x05R\rJudgmentMulti\x12\x1c\n" +
	"\tMultiMesh\x18\x11 \x03(\x05R\tMultiMesh\x12@\n" +
	"\x0eSpecialSymbols\x18\x12 \x03(\v2\x18.pb_common.SpecialSymbolR\x0eSpecialSymbols\x12\x18\n" +
	"\aCascape\x18\x13 \x01(\bR\aCascape\x122\n" +
	"\x14IsMultiBlockDropDown\x18\x14 \x01(\bR\x14IsMultiBlockDropDown\x12$\n" +
	"\rOffsetColList\x18\x15 \x03(\x05R\rOffsetColList\x12Q\n" +
	"\fSoulOrbState\x18\x16 \x03(\v2-.pb_common.HandOfAnubisRole.SoulOrbStateEntryR\fSoulOrbState\x12 \n" +
	"\vMathVersion\x18\x17 \x01(\tR\vMathVersion\x12\x1a\n" +
	"\bRoundEnd\x18\x18 \x01(\bR\bRoundEnd\x12G\n" +
	"\x10NextCascadeModel\x18\x19 \x01(\v2\x1b.pb_common.HandOfAnubisRoleR\x10NextCascadeModel\x1a?\n" +
	"\x11SoulOrbStateEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"\x86\x01\n" +
	"\bDragonVS\x12\x1c\n" +
	"\tMultiple1\x18\x01 \x01(\x05R\tMultiple1\x12\x1c\n" +
	"\tMultiple2\x18\x02 \x01(\x05R\tMultiple2\x12 \n" +
	"\vWinMultiple\x18\x03 \x01(\x05R\vWinMultiple\x12\x1c\n" +
	"\tMeshIndex\x18\x04 \x01(\x05R\tMeshIndex\"_\n" +
	"\tDragonEgg\x12\x1a\n" +
	"\bMultiple\x18\x01 \x01(\x05R\bMultiple\x12\x18\n" +
	"\aEggType\x18\x02 \x01(\x05R\aEggType\x12\x1c\n" +
	"\tMeshIndex\x18\x03 \x01(\x05R\tMeshIndex\"\xde\x05\n" +
	"\n" +
	"DragonRole\x12\x16\n" +
	"\x06RoleId\x18\x01 \x01(\tR\x06RoleId\x12\x1a\n" +
	"\bParentId\x18\x02 \x01(\x03R\bParentId\x12\x14\n" +
	"\x05SubId\x18\x03 \x01(\x03R\x05SubId\x12\x14\n" +
	"\x05Score\x18\x04 \x01(\x01R\x05Score\x12\x10\n" +
	"\x03Bet\x18\x05 \x01(\x01R\x03Bet\x12\x12\n" +
	"\x04Mesh\x18\x06 \x03(\x05R\x04Mesh\x12\x1c\n" +
	"\tGameState\x18\a \x01(\x05R\tGameState\x12\x1a\n" +
	"\bTotalWin\x18\b \x01(\x01R\bTotalWin\x12.\n" +
	"\bWinTypes\x18\t \x03(\v2\x12.pb_common.WinTypeR\bWinTypes\x12\"\n" +
	"\fFreeSpinTime\x18\n" +
	" \x01(\x05R\fFreeSpinTime\x12,\n" +
	"\x11TotalFreeSpinTime\x18\v \x01(\x05R\x11TotalFreeSpinTime\x12.\n" +
	"\x12TotalFreeSpinScore\x18\f \x01(\x01R\x12TotalFreeSpinScore\x12/\n" +
	"\bDragonVS\x18\r \x03(\v2\x13.pb_common.DragonVSR\bDragonVS\x12&\n" +
	"\x0eArenaReelMulti\x18\x0e \x03(\x05R\x0eArenaReelMulti\x12&\n" +
	"\x0eBeastReelMulti\x18\x0f \x03(\x05R\x0eBeastReelMulti\x122\n" +
	"\tDragonEgg\x18\x10 \x03(\v2\x14.pb_common.DragonEggR\tDragonEgg\x12(\n" +
	"\x0fBeastReelIsOpen\x18\x11 \x03(\x05R\x0fBeastReelIsOpen\x12 \n" +
	"\vMathVersion\x18\x12 \x01(\tR\vMathVersion\x12\x1a\n" +
	"\bRoundEnd\x18\x13 \x01(\bR\bRoundEnd\x12A\n" +
	"\x10NextCascadeModel\x18\x14 \x01(\v2\x15.pb_common.DragonRoleR\x10NextCascadeModel\"\xdc\x02\n" +
	"\n" +
	"SwitchData\x12\"\n" +
	"\fTargetSymbol\x18\x01 \x01(\x05R\fTargetSymbol\x12&\n" +
	"\x0eSwitchSpinTime\x18\x02 \x01(\x05R\x0eSwitchSpinTime\x12T\n" +
	"\x0fReplacedSymbols\x18\x03 \x03(\v2*.pb_common.SwitchData.ReplacedSymbolsEntryR\x0fReplacedSymbols\x12\"\n" +
	"\fReplacedMesh\x18\x04 \x03(\x05R\fReplacedMesh\x12*\n" +
	"\x10LastTargetSymbol\x18\x05 \x01(\x05R\x10LastTargetSymbol\x12\x18\n" +
	"\anRespin\x18\x06 \x01(\x05R\anRespin\x1aB\n" +
	"\x14ReplacedSymbolsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x8e\x05\n" +
	"\fJohnWildRole\x12\x16\n" +
	"\x06RoleId\x18\x01 \x01(\tR\x06RoleId\x12\x1a\n" +
	"\bParentId\x18\x02 \x01(\x03R\bParentId\x12\x14\n" +
	"\x05SubId\x18\x03 \x01(\x03R\x05SubId\x12\x14\n" +
	"\x05Score\x18\x04 \x01(\x01R\x05Score\x12\x10\n" +
	"\x03Bet\x18\x05 \x01(\x01R\x03Bet\x12\x12\n" +
	"\x04Mesh\x18\x06 \x03(\x05R\x04Mesh\x12\x1c\n" +
	"\tGameState\x18\a \x01(\x05R\tGameState\x12\x1a\n" +
	"\bTotalWin\x18\b \x01(\x01R\bTotalWin\x12.\n" +
	"\bWinTypes\x18\t \x03(\v2\x12.pb_common.WinTypeR\bWinTypes\x12\"\n" +
	"\fFreeSpinTime\x18\n" +
	" \x01(\x05R\fFreeSpinTime\x12,\n" +
	"\x11TotalFreeSpinTime\x18\v \x01(\x05R\x11TotalFreeSpinTime\x12.\n" +
	"\x12TotalFreeSpinScore\x18\f \x01(\x01R\x12TotalFreeSpinScore\x12-\n" +
	"\x06Switch\x18\r \x01(\v2\x15.pb_common.SwitchDataR\x06Switch\x12\x1a\n" +
	"\bIsReSpin\x18\x0e \x01(\bR\bIsReSpin\x12\x1e\n" +
	"\n" +
	"StartFree1\x18\x0f \x01(\bR\n" +
	"StartFree1\x12\x1e\n" +
	"\n" +
	"StartFree2\x18\x10 \x01(\bR\n" +
	"StartFree2\x12 \n" +
	"\vMathVersion\x18\x11 \x01(\tR\vMathVersion\x12\x1a\n" +
	"\bRoundEnd\x18\x12 \x01(\bR\bRoundEnd\x12C\n" +
	"\x10NextCascadeModel\x18\x13 \x01(\v2\x17.pb_common.JohnWildRoleR\x10NextCascadeModel\"\x93\x01\n" +
	"\aCatData\x12\x10\n" +
	"\x03Col\x18\x01 \x01(\x05R\x03Col\x12\x1c\n" +
	"\tMeshIndex\x18\x02 \x03(\x05R\tMeshIndex\x12$\n" +
	"\rWildMeshIndex\x18\x03 \x01(\x05R\rWildMeshIndex\x12\x1a\n" +
	"\bMultiple\x18\x04 \x01(\x05R\bMultiple\x12\x16\n" +
	"\x06isFull\x18\x05 \x01(\x05R\x06isFull\"\xed\x03\n" +
	"\vRipCityRole\x12\x16\n" +
	"\x06RoleId\x18\x01 \x01(\tR\x06RoleId\x12\x1a\n" +
	"\bParentId\x18\x02 \x01(\x03R\bParentId\x12\x14\n" +
	"\x05SubId\x18\x03 \x01(\x03R\x05SubId\x12\x14\n" +
	"\x05Score\x18\x04 \x01(\x01R\x05Score\x12\x10\n" +
	"\x03Bet\x18\x05 \x01(\x01R\x03Bet\x12\x12\n" +
	"\x04Mesh\x18\x06 \x03(\x05R\x04Mesh\x12\x1c\n" +
	"\tGameState\x18\a \x01(\x05R\tGameState\x12\x1a\n" +
	"\bTotalWin\x18\b \x01(\x01R\bTotalWin\x12.\n" +
	"\bWinTypes\x18\t \x03(\v2\x12.pb_common.WinTypeR\bWinTypes\x12\"\n" +
	"\fFreeSpinTime\x18\n" +
	" \x01(\x05R\fFreeSpinTime\x12,\n" +
	"\x11TotalFreeSpinTime\x18\v \x01(\x05R\x11TotalFreeSpinTime\x12.\n" +
	"\x12TotalFreeSpinScore\x18\f \x01(\x01R\x12TotalFreeSpinScore\x12\x1c\n" +
	"\tHighlight\x18\x0e \x03(\x05R\tHighlight\x12,\n" +
	"\aCatData\x18\x0f \x03(\v2\x12.pb_common.CatDataR\aCatData\x12 \n" +
	"\vMathVersion\x18\x10 \x01(\tR\vMathVersion\"\xd6\x04\n" +
	"\x0fWarriorWaysRole\x12\x16\n" +
	"\x06RoleId\x18\x01 \x01(\tR\x06RoleId\x12\x1a\n" +
	"\bParentId\x18\x02 \x01(\x03R\bParentId\x12\x14\n" +
	"\x05SubId\x18\x03 \x01(\x03R\x05SubId\x12\x14\n" +
	"\x05Score\x18\x04 \x01(\x01R\x05Score\x12\x10\n" +
	"\x03Bet\x18\x05 \x01(\x01R\x03Bet\x12\x12\n" +
	"\x04Mesh\x18\x06 \x03(\x05R\x04Mesh\x12\x1c\n" +
	"\tGameState\x18\a \x01(\x05R\tGameState\x12\x1a\n" +
	"\bTotalWin\x18\b \x01(\x01R\bTotalWin\x12.\n" +
	"\bWinTypes\x18\t \x03(\v2\x12.pb_common.WinTypeR\bWinTypes\x12\"\n" +
	"\fFreeSpinTime\x18\n" +
	" \x01(\x05R\fFreeSpinTime\x12,\n" +
	"\x11TotalFreeSpinTime\x18\v \x01(\x05R\x11TotalFreeSpinTime\x12.\n" +
	"\x12TotalFreeSpinScore\x18\f \x01(\x01R\x12TotalFreeSpinScore\x12\x1d\n" +
	"\x02VS\x18\r \x01(\v2\r.pb_common.VSR\x02VS\x12 \n" +
	"\vTotalValues\x18\x0e \x03(\x05R\vTotalValues\x12\x16\n" +
	"\x06Values\x18\x0f \x03(\x05R\x06Values\x12\x1a\n" +
	"\bScenario\x18\x10 \x01(\x05R\bScenario\x12\x1c\n" +
	"\tMiniSpins\x18\x11 \x01(\x05R\tMiniSpins\x12\x1c\n" +
	"\tMiniMuler\x18\x12 \x01(\x05R\tMiniMuler\x12 \n" +
	"\vMathVersion\x18\x13 \x01(\tR\vMathVersion\"\xb0\x03\n" +
	"\n" +
	"EIteroGrid\x12\x14\n" +
	"\x05Score\x18\x01 \x01(\x01R\x05Score\x12\x12\n" +
	"\x04Mesh\x18\x02 \x03(\x05R\x04Mesh\x12\x1c\n" +
	"\tGameState\x18\x03 \x01(\x05R\tGameState\x12.\n" +
	"\bWinLines\x18\x04 \x03(\v2\x12.pb_common.WinLineR\bWinLines\x12\x1a\n" +
	"\bMultiple\x18\x05 \x01(\x01R\bMultiple\x12\x1e\n" +
	"\n" +
	"TotalScore\x18\x06 \x01(\x01R\n" +
	"TotalScore\x12\x14\n" +
	"\x05FSNum\x18\a \x01(\x05R\x05FSNum\x12\x1e\n" +
	"\n" +
	"FSTotalNum\x18\b \x01(\x05R\n" +
	"FSTotalNum\x12\"\n" +
	"\fFSTotalScore\x18\t \x01(\x01R\fFSTotalScore\x12\x18\n" +
	"\aCascade\x18\n" +
	" \x01(\bR\aCascade\x12\x14\n" +
	"\x05RSNum\x18\v \x01(\x05R\x05RSNum\x12(\n" +
	"\x0fCollectMultiple\x18\f \x01(\x05R\x0fCollectMultiple\x12 \n" +
	"\vMathVersion\x18\r \x01(\tR\vMathVersion\x12\x18\n" +
	"\aIsRsNum\x18\x0e \x01(\bR\aIsRsNum\"\xcf\x01\n" +
	"\tIteroRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12(\n" +
	"\x0fCollectMultiple\x18\x02 \x01(\x05R\x0fCollectMultiple\x12 \n" +
	"\vMathVersion\x18\x03 \x01(\tR\vMathVersion\x12\x18\n" +
	"\aIsRsNum\x18\x04 \x01(\bR\aIsRsNum\x125\n" +
	"\n" +
	"EIteroGrid\x18\x05 \x03(\v2\x15.pb_common.EIteroGridR\n" +
	"EIteroGrid\"\xb4\x02\n" +
	"\rSugarRushRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12\x1c\n" +
	"\tMultiMesh\x18\x02 \x03(\x05R\tMultiMesh\x12\x1c\n" +
	"\tStuffMesh\x18\x03 \x03(\x05R\tStuffMesh\x12 \n" +
	"\vReelsOffset\x18\x04 \x03(\x05R\vReelsOffset\x12 \n" +
	"\vMathVersion\x18\x05 \x01(\tR\vMathVersion\x12\x1a\n" +
	"\bBetCount\x18\x06 \x01(\x03R\bBetCount\x12\x1a\n" +
	"\bRoundEnd\x18\a \x01(\bR\bRoundEnd\x12D\n" +
	"\x10NextCascadeModel\x18\b \x01(\v2\x18.pb_common.SugarRushRoleR\x10NextCascadeModel\"\x9c\x02\n" +
	"\x10SweetBonanzaRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12\x1e\n" +
	"\n" +
	"MeshOffset\x18\x02 \x03(\x05R\n" +
	"MeshOffset\x12\x1c\n" +
	"\tMeshStuff\x18\x03 \x03(\x05R\tMeshStuff\x12\x1c\n" +
	"\tMeshMulti\x18\x04 \x03(\x05R\tMeshMulti\x12 \n" +
	"\vMathVersion\x18\x05 \x01(\tR\vMathVersion\x12\x1a\n" +
	"\bRoundEnd\x18\x06 \x01(\bR\bRoundEnd\x12G\n" +
	"\x10NextCascadeModel\x18\a \x01(\v2\x1b.pb_common.SweetBonanzaRoleR\x10NextCascadeModel\"\xe5\x01\n" +
	"\fWildGangRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12 \n" +
	"\vMathVersion\x18\x02 \x01(\tR\vMathVersion\x12$\n" +
	"\rMisteryTarget\x18\x03 \x01(\x05R\rMisteryTarget\x12\x1e\n" +
	"\n" +
	"Multiplier\x18\x04 \x01(\x05R\n" +
	"Multiplier\x12(\n" +
	"\x0fWildMultipliers\x18\x05 \x03(\x05R\x0fWildMultipliers\x12\x1c\n" +
	"\tWildTimes\x18\x06 \x03(\x05R\tWildTimes\"\xc6\x03\n" +
	"\x12GatesOfOlympusRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12 \n" +
	"\vMathVersion\x18\x02 \x01(\tR\vMathVersion\x12\x1e\n" +
	"\n" +
	"Multiplier\x18\x03 \x01(\x05R\n" +
	"Multiplier\x12\x1c\n" +
	"\tMeshStuff\x18\x04 \x03(\x05R\tMeshStuff\x12\x1e\n" +
	"\n" +
	"MeshOffset\x18\x05 \x03(\x05R\n" +
	"MeshOffset\x12\x1a\n" +
	"\bMeshReel\x18\x06 \x01(\x05R\bMeshReel\x12 \n" +
	"\vFSMultiType\x18\a \x01(\x05R\vFSMultiType\x12\x14\n" +
	"\x05FSWin\x18\b \x01(\x01R\x05FSWin\x12 \n" +
	"\vMeshRandCol\x18\t \x03(\x05R\vMeshRandCol\x12,\n" +
	"\x11FGGameStateBefore\x18\n" +
	" \x01(\x05R\x11FGGameStateBefore\x12\x1a\n" +
	"\bRoundEnd\x18\v \x01(\bR\bRoundEnd\x12I\n" +
	"\x10NextCascadeModel\x18\f \x01(\v2\x1d.pb_common.GatesOfOlympusRoleR\x10NextCascadeModel\"\xc4\x03\n" +
	"\x11BeautifulgirlRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12 \n" +
	"\vMathVersion\x18\x02 \x01(\tR\vMathVersion\x12\x1e\n" +
	"\n" +
	"Multiplier\x18\x03 \x01(\x05R\n" +
	"Multiplier\x12\x1c\n" +
	"\tMeshStuff\x18\x04 \x03(\x05R\tMeshStuff\x12\x1e\n" +
	"\n" +
	"MeshOffset\x18\x05 \x03(\x05R\n" +
	"MeshOffset\x12\x1a\n" +
	"\bMeshReel\x18\x06 \x01(\x05R\bMeshReel\x12 \n" +
	"\vFSMultiType\x18\a \x01(\x05R\vFSMultiType\x12\x14\n" +
	"\x05FSWin\x18\b \x01(\x01R\x05FSWin\x12 \n" +
	"\vMeshRandCol\x18\t \x03(\x05R\vMeshRandCol\x12,\n" +
	"\x11FGGameStateBefore\x18\n" +
	" \x01(\x05R\x11FGGameStateBefore\x12\x1a\n" +
	"\bRoundEnd\x18\v \x01(\bR\bRoundEnd\x12H\n" +
	"\x10NextCascadeModel\x18\f \x01(\v2\x1c.pb_common.BeautifulgirlRoleR\x10NextCascadeModel\"\x93\x01\n" +
	"\fDogHouseRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12 \n" +
	"\vMathVersion\x18\x02 \x01(\tR\vMathVersion\x12 \n" +
	"\vStickyWilds\x18\x03 \x03(\x05R\vStickyWilds\x12\x18\n" +
	"\aSCCount\x18\x04 \x01(\x05R\aSCCount\"\x8b\x01\n" +
	"\rMagicalMineVS\x12\x1c\n" +
	"\tMultiple1\x18\x01 \x01(\x05R\tMultiple1\x12\x1c\n" +
	"\tMultiple2\x18\x02 \x01(\x05R\tMultiple2\x12 \n" +
	"\vWinMultiple\x18\x03 \x01(\x05R\vWinMultiple\x12\x1c\n" +
	"\tMeshIndex\x18\x04 \x01(\x05R\tMeshIndex\"\xa3\x04\n" +
	"\x0fMagicalMineRole\x12\x16\n" +
	"\x06RoleId\x18\x01 \x01(\tR\x06RoleId\x12\x1a\n" +
	"\bParentId\x18\x02 \x01(\x03R\bParentId\x12\x14\n" +
	"\x05SubId\x18\x03 \x01(\x03R\x05SubId\x12\x14\n" +
	"\x05Score\x18\x04 \x01(\x01R\x05Score\x12\x10\n" +
	"\x03Bet\x18\x05 \x01(\x01R\x03Bet\x12\x12\n" +
	"\x04Mesh\x18\x06 \x03(\x05R\x04Mesh\x12\x1c\n" +
	"\tGameState\x18\a \x01(\x05R\tGameState\x12.\n" +
	"\bWinTypes\x18\b \x03(\v2\x12.pb_common.WinTypeR\bWinTypes\x12\x1a\n" +
	"\bTotalWin\x18\t \x01(\x01R\bTotalWin\x12\"\n" +
	"\fFreeSpinTime\x18\n" +
	" \x01(\x05R\fFreeSpinTime\x12,\n" +
	"\x11TotalFreeSpinTime\x18\v \x01(\x05R\x11TotalFreeSpinTime\x12.\n" +
	"\x12TotalFreeSpinScore\x18\f \x01(\x01R\x12TotalFreeSpinScore\x12\x1a\n" +
	"\bTopWilds\x18\r \x01(\x05R\bTopWilds\x12 \n" +
	"\vTopMultiple\x18\x0e \x01(\x05R\vTopMultiple\x12>\n" +
	"\rMagicalMineVS\x18\x0f \x03(\v2\x18.pb_common.MagicalMineVSR\rMagicalMineVS\x12 \n" +
	"\vMathVersion\x18\x10 \x01(\tR\vMathVersion\"z\n" +
	"\x10BigBassMoneyData\x12\x14\n" +
	"\x05Index\x18\x01 \x01(\x05R\x05Index\x12\x14\n" +
	"\x05Score\x18\x02 \x01(\x02R\x05Score\x12\x1a\n" +
	"\bMultiple\x18\x03 \x01(\x05R\bMultiple\x12\x1e\n" +
	"\n" +
	"Activation\x18\x04 \x01(\bR\n" +
	"Activation\">\n" +
	"\x12BigBassRandColData\x12\x14\n" +
	"\x05Index\x18\x01 \x01(\x05R\x05Index\x12\x12\n" +
	"\x04Cell\x18\x02 \x01(\x05R\x04Cell\"\xf7\n" +
	"\n" +
	"\vBigBassRole\x12\x16\n" +
	"\x06RoleId\x18\x01 \x01(\tR\x06RoleId\x12\x1a\n" +
	"\bParentId\x18\x02 \x01(\x03R\bParentId\x12\x14\n" +
	"\x05SubId\x18\x03 \x01(\x03R\x05SubId\x12\x14\n" +
	"\x05Score\x18\x04 \x01(\x01R\x05Score\x12\x10\n" +
	"\x03Bet\x18\x05 \x01(\x01R\x03Bet\x12\x12\n" +
	"\x04Mesh\x18\x06 \x03(\x05R\x04Mesh\x12\x1c\n" +
	"\tGameState\x18\a \x01(\x05R\tGameState\x12.\n" +
	"\bWinTypes\x18\b \x03(\v2\x12.pb_common.WinTypeR\bWinTypes\x12\x1a\n" +
	"\bTotalWin\x18\t \x01(\x01R\bTotalWin\x12 \n" +
	"\vRandScatter\x18\n" +
	" \x01(\x05R\vRandScatter\x12;\n" +
	"\n" +
	"MoneyDatas\x18\v \x03(\v2\x1b.pb_common.BigBassMoneyDataR\n" +
	"MoneyDatas\x12&\n" +
	"\x0eMoneyTriggered\x18\f \x01(\bR\x0eMoneyTriggered\x12\"\n" +
	"\fFreeSpinTime\x18\r \x01(\x05R\fFreeSpinTime\x12,\n" +
	"\x11TotalFreeSpinTime\x18\x0e \x01(\x05R\x11TotalFreeSpinTime\x12.\n" +
	"\x12TotalFreeSpinScore\x18\x0f \x01(\x01R\x12TotalFreeSpinScore\x12,\n" +
	"\x11MoneyMultipleMesh\x18\x10 \x03(\x05R\x11MoneyMultipleMesh\x12\x1c\n" +
	"\tWildCount\x18\x11 \x01(\x05R\tWildCount\x12*\n" +
	"\x10WildTriggeredNum\x18\x12 \x01(\x05R\x10WildTriggeredNum\x12\x1e\n" +
	"\n" +
	"RandMoneys\x18\x13 \x03(\x05R\n" +
	"RandMoneys\x12 \n" +
	"\vRandAllMesh\x18\x14 \x03(\x05R\vRandAllMesh\x12A\n" +
	"\fRandColDatas\x18\x15 \x03(\v2\x1d.pb_common.BigBassRandColDataR\fRandColDatas\x12$\n" +
	"\rScatterInMesh\x18\x16 \x01(\bR\rScatterInMesh\x12\"\n" +
	"\fMustWildTime\x18\x17 \x01(\x05R\fMustWildTime\x12$\n" +
	"\rMustWildCount\x18\x18 \x01(\x05R\rMustWildCount\x12,\n" +
	"\x11FreeSpinStartTime\x18\x19 \x01(\x05R\x11FreeSpinStartTime\x122\n" +
	"\x14RandColSpinDirection\x18\x1a \x01(\x05R\x14RandColSpinDirection\x12*\n" +
	"\x10RandColSpinCount\x18\x1b \x01(\x05R\x10RandColSpinCount\x12$\n" +
	"\rLastLayoutsID\x18\x1c \x01(\x05R\rLastLayoutsID\x12$\n" +
	"\rLastPositions\x18\x1d \x03(\x05R\rLastPositions\x12\"\n" +
	"\fWinLineScore\x18\x1e \x01(\x05R\fWinLineScore\x12&\n" +
	"\x0eFGWinLineScore\x18\x1f \x01(\x05R\x0eFGWinLineScore\x12,\n" +
	"\x11FreeSpinTimeBegin\x18  \x01(\x05R\x11FreeSpinTimeBegin\x12,\n" +
	"\x11FGGameStateBefore\x18! \x01(\x05R\x11FGGameStateBefore\x12 \n" +
	"\vMathVersion\x18\" \x01(\tR\vMathVersion\x12\x1a\n" +
	"\bRoundEnd\x18# \x01(\bR\bRoundEnd\x12B\n" +
	"\x10NextCascadeModel\x18$ \x01(\v2\x16.pb_common.BigBassRoleR\x10NextCascadeModel\"|\n" +
	"\x10ClashCashCounter\x12\x14\n" +
	"\x05Level\x18\x01 \x01(\x05R\x05Level\x12\x14\n" +
	"\x05Count\x18\x02 \x01(\x05R\x05Count\x12\x18\n" +
	"\aTrigger\x18\x03 \x01(\bR\aTrigger\x12\"\n" +
	"\fLevelTrigger\x18\x04 \x01(\bR\fLevelTrigger\"J\n" +
	"\x12ClashCashGlovesMul\x12\x14\n" +
	"\x05Index\x18\x01 \x01(\x05R\x05Index\x12\x1e\n" +
	"\n" +
	"Multiplier\x18\x02 \x01(\x05R\n" +
	"Multiplier\"\xa4\x01\n" +
	"\x0fClashCashGloves\x12\x14\n" +
	"\x05Index\x18\x01 \x01(\x05R\x05Index\x12\x18\n" +
	"\aTrigger\x18\x02 \x01(\bR\aTrigger\x12(\n" +
	"\x0fTotalMultiplier\x18\x03 \x01(\x05R\x0fTotalMultiplier\x127\n" +
	"\aMulData\x18\x04 \x03(\v2\x1d.pb_common.ClashCashGlovesMulR\aMulData\"\xfb\x01\n" +
	"\rClashCashRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12 \n" +
	"\vMathVersion\x18\x02 \x01(\tR\vMathVersion\x12:\n" +
	"\n" +
	"GlovesData\x18\x03 \x03(\v2\x1a.pb_common.ClashCashGlovesR\n" +
	"GlovesData\x127\n" +
	"\bCounters\x18\x04 \x03(\v2\x1b.pb_common.ClashCashCounterR\bCounters\x12,\n" +
	"\x11FGGameStateBefore\x18\x05 \x01(\x05R\x11FGGameStateBefore\"\xc4\x03\n" +
	"\x11GlodOfOlympusRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12 \n" +
	"\vMathVersion\x18\x02 \x01(\tR\vMathVersion\x12\x1e\n" +
	"\n" +
	"Multiplier\x18\x03 \x01(\x05R\n" +
	"Multiplier\x12\x1c\n" +
	"\tMeshStuff\x18\x04 \x03(\x05R\tMeshStuff\x12\x1e\n" +
	"\n" +
	"MeshOffset\x18\x05 \x03(\x05R\n" +
	"MeshOffset\x12\x1a\n" +
	"\bMeshReel\x18\x06 \x01(\x05R\bMeshReel\x12 \n" +
	"\vFSMultiType\x18\a \x01(\x05R\vFSMultiType\x12\x14\n" +
	"\x05FSWin\x18\b \x01(\x01R\x05FSWin\x12 \n" +
	"\vMeshRandCol\x18\t \x03(\x05R\vMeshRandCol\x12,\n" +
	"\x11FGGameStateBefore\x18\n" +
	" \x01(\x05R\x11FGGameStateBefore\x12\x1a\n" +
	"\bRoundEnd\x18\v \x01(\bR\bRoundEnd\x12H\n" +
	"\x10NextCascadeModel\x18\f \x01(\v2\x1c.pb_common.GlodOfOlympusRoleR\x10NextCascadeModel\"\xe3\x02\n" +
	"\x16GatesCopyOfOlympusRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12 \n" +
	"\vMathVersion\x18\x02 \x01(\tR\vMathVersion\x12\x1e\n" +
	"\n" +
	"Multiplier\x18\x03 \x01(\x05R\n" +
	"Multiplier\x12\x1c\n" +
	"\tMeshStuff\x18\x04 \x03(\x05R\tMeshStuff\x12\x1e\n" +
	"\n" +
	"MeshOffset\x18\x05 \x03(\x05R\n" +
	"MeshOffset\x12\x1a\n" +
	"\bMeshReel\x18\x06 \x01(\x05R\bMeshReel\x12 \n" +
	"\vFSMultiType\x18\a \x01(\x05R\vFSMultiType\x12\x14\n" +
	"\x05FSWin\x18\b \x01(\x01R\x05FSWin\x12 \n" +
	"\vMeshRandCol\x18\t \x03(\x05R\vMeshRandCol\x12,\n" +
	"\x11FGGameStateBefore\x18\n" +
	" \x01(\x05R\x11FGGameStateBefore\"\xd6\x01\n" +
	"\x11SugarCopyRushRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12\x1c\n" +
	"\tMultiMesh\x18\x02 \x03(\x05R\tMultiMesh\x12\x1c\n" +
	"\tStuffMesh\x18\x03 \x03(\x05R\tStuffMesh\x12 \n" +
	"\vReelsOffset\x18\x04 \x03(\x05R\vReelsOffset\x12 \n" +
	"\vMathVersion\x18\x05 \x01(\tR\vMathVersion\x12\x1a\n" +
	"\bBetCount\x18\x06 \x01(\x03R\bBetCount\"\x8a\x01\n" +
	"\fJacksCryptVS\x12\x1c\n" +
	"\tMultiple1\x18\x01 \x01(\x05R\tMultiple1\x12\x1c\n" +
	"\tMultiple2\x18\x02 \x01(\x05R\tMultiple2\x12 \n" +
	"\vWinMultiple\x18\x03 \x01(\x05R\vWinMultiple\x12\x1c\n" +
	"\tMeshIndex\x18\x04 \x01(\x05R\tMeshIndex\"\x9f\x04\n" +
	"\x0eJacksCryptRole\x12\x16\n" +
	"\x06RoleId\x18\x01 \x01(\tR\x06RoleId\x12\x1a\n" +
	"\bParentId\x18\x02 \x01(\x03R\bParentId\x12\x14\n" +
	"\x05SubId\x18\x03 \x01(\x03R\x05SubId\x12\x14\n" +
	"\x05Score\x18\x04 \x01(\x01R\x05Score\x12\x10\n" +
	"\x03Bet\x18\x05 \x01(\x01R\x03Bet\x12\x12\n" +
	"\x04Mesh\x18\x06 \x03(\x05R\x04Mesh\x12\x1c\n" +
	"\tGameState\x18\a \x01(\x05R\tGameState\x12.\n" +
	"\bWinTypes\x18\b \x03(\v2\x12.pb_common.WinTypeR\bWinTypes\x12\x1a\n" +
	"\bTotalWin\x18\t \x01(\x01R\bTotalWin\x12\"\n" +
	"\fFreeSpinTime\x18\n" +
	" \x01(\x05R\fFreeSpinTime\x12,\n" +
	"\x11TotalFreeSpinTime\x18\v \x01(\x05R\x11TotalFreeSpinTime\x12.\n" +
	"\x12TotalFreeSpinScore\x18\f \x01(\x01R\x12TotalFreeSpinScore\x12\x1a\n" +
	"\bTopWilds\x18\r \x01(\x05R\bTopWilds\x12 \n" +
	"\vTopMultiple\x18\x0e \x01(\x05R\vTopMultiple\x12;\n" +
	"\fJacksCryptVS\x18\x0f \x03(\v2\x17.pb_common.JacksCryptVSR\fJacksCryptVS\x12 \n" +
	"\vMathVersion\x18\x10 \x01(\tR\vMathVersion\"=\n" +
	"\rMergeWildData\x12\x14\n" +
	"\x05Index\x18\x01 \x01(\x05R\x05Index\x12\x16\n" +
	"\x06Target\x18\x02 \x03(\x05R\x06Target\"\xfc\a\n" +
	"\x11ArcanePortalsRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12 \n" +
	"\vMathVersion\x18\x02 \x01(\tR\vMathVersion\x12\x1c\n" +
	"\tMultiMesh\x18\x03 \x03(\x05R\tMultiMesh\x12\x1c\n" +
	"\tStuffMesh\x18\x04 \x03(\x05R\tStuffMesh\x12\x1e\n" +
	"\n" +
	"MeshOffset\x18\x05 \x03(\x05R\n" +
	"MeshOffset\x12\x1a\n" +
	"\bMeshReel\x18\x06 \x01(\x05R\bMeshReel\x12*\n" +
	"\x10ClusterWinningID\x18\a \x01(\x05R\x10ClusterWinningID\x12 \n" +
	"\vClusterWild\x18\b \x03(\x05R\vClusterWild\x12 \n" +
	"\vWinningMark\x18\t \x03(\x05R\vWinningMark\x12$\n" +
	"\rAvalancheMark\x18\n" +
	" \x03(\x05R\rAvalancheMark\x12&\n" +
	"\x0eMultiplierMark\x18\v \x03(\x01R\x0eMultiplierMark\x124\n" +
	"\x15MaxClusterWildsNumber\x18\f \x01(\x05R\x15MaxClusterWildsNumber\x12(\n" +
	"\x0fPlayAreaWildNew\x18\r \x03(\x05R\x0fPlayAreaWildNew\x12.\n" +
	"\x12PlayAreaWildDelete\x18\x0e \x03(\x05R\x12PlayAreaWildDelete\x12*\n" +
	"\x10PlayAreaWildJump\x18\x0f \x03(\x05R\x10PlayAreaWildJump\x12\x1a\n" +
	"\bWildsMul\x18\x10 \x03(\x01R\bWildsMul\x12>\n" +
	"\rMergeWildData\x18\x11 \x03(\v2\x18.pb_common.MergeWildDataR\rMergeWildData\x12\x1a\n" +
	"\bJumpWild\x18\x12 \x03(\x05R\bJumpWild\x12,\n" +
	"\x11MeshReelColOffset\x18\x13 \x03(\x05R\x11MeshReelColOffset\x12$\n" +
	"\rMaxMultiplier\x18\x14 \x01(\x01R\rMaxMultiplier\x122\n" +
	"\x14StickyWildMultiplier\x18\x15 \x03(\x01R\x14StickyWildMultiplier\x12\x14\n" +
	"\x05FSWin\x18\x16 \x01(\x01R\x05FSWin\x120\n" +
	"\x13MergeMultiplierMark\x18\x17 \x03(\x01R\x13MergeMultiplierMark\x12\x1a\n" +
	"\bRoundEnd\x18\x18 \x01(\bR\bRoundEnd\x12H\n" +
	"\x10NextCascadeModel\x18\x19 \x01(\v2\x1c.pb_common.ArcanePortalsRoleR\x10NextCascadeModel\"\xf6\x02\n" +
	"\x0ePlatformFSData\x12\x1e\n" +
	"\n" +
	"OperatorId\x18\x01 \x01(\tR\n" +
	"OperatorId\x12\x1e\n" +
	"\n" +
	"CreateTime\x18\x02 \x01(\x05R\n" +
	"CreateTime\x12\x1a\n" +
	"\bIsCancel\x18\x03 \x01(\bR\bIsCancel\x12\x1c\n" +
	"\tStartTime\x18\x04 \x01(\x01R\tStartTime\x12\x18\n" +
	"\aEndTime\x18\x05 \x01(\x01R\aEndTime\x12\x1e\n" +
	"\n" +
	"TotalScore\x18\x06 \x01(\x01R\n" +
	"TotalScore\x12\x18\n" +
	"\aSpinNum\x18\a \x01(\x05R\aSpinNum\x12\"\n" +
	"\fTotalSpinNum\x18\b \x01(\x05R\fTotalSpinNum\x12\x10\n" +
	"\x03Bet\x18\t \x01(\x01R\x03Bet\x12\x1c\n" +
	"\tIsTrigger\x18\n" +
	" \x01(\bR\tIsTrigger\x12\"\n" +
	"\fCurrencyCode\x18\v \x01(\tR\fCurrencyCode\x12\x1e\n" +
	"\n" +
	"FreeSpinId\x18\f \x01(\tR\n" +
	"FreeSpinId\"a\n" +
	"\rDisappearData\x12\x14\n" +
	"\x05Index\x18\x01 \x01(\x05R\x05Index\x12\x16\n" +
	"\x06Symbol\x18\x02 \x01(\x05R\x06Symbol\x12\x10\n" +
	"\x03Bet\x18\x03 \x01(\x01R\x03Bet\x12\x10\n" +
	"\x03End\x18\x04 \x01(\x01R\x03End\"\xed\a\n" +
	"\vEWuKongGrid\x12\x14\n" +
	"\x05Score\x18\x01 \x01(\x01R\x05Score\x12\x12\n" +
	"\x04Mesh\x18\x02 \x03(\x05R\x04Mesh\x12\x1c\n" +
	"\tGameState\x18\x03 \x01(\x05R\tGameState\x12.\n" +
	"\bWinLines\x18\x04 \x03(\v2\x12.pb_common.WinLineR\bWinLines\x12\x1a\n" +
	"\bMultiple\x18\x05 \x01(\x01R\bMultiple\x12\x1e\n" +
	"\n" +
	"TotalScore\x18\x06 \x01(\x01R\n" +
	"TotalScore\x12\x14\n" +
	"\x05FSNum\x18\a \x01(\x05R\x05FSNum\x12\x1e\n" +
	"\n" +
	"FSTotalNum\x18\b \x01(\x05R\n" +
	"FSTotalNum\x12\"\n" +
	"\fFSTotalScore\x18\t \x01(\x01R\fFSTotalScore\x12\x18\n" +
	"\aCascade\x18\n" +
	" \x01(\bR\aCascade\x12\x1e\n" +
	"\n" +
	"MeshOffset\x18\v \x03(\x05R\n" +
	"MeshOffset\x12\x1a\n" +
	"\bMeshReel\x18\f \x01(\x05R\bMeshReel\x12\x1c\n" +
	"\tMeshStuff\x18\r \x03(\x05R\tMeshStuff\x12\x1e\n" +
	"\n" +
	"GoldenMesh\x18\x0e \x03(\x05R\n" +
	"GoldenMesh\x12\x18\n" +
	"\aCoinNum\x18\x0f \x01(\x05R\aCoinNum\x12&\n" +
	"\x0ePotOfGoldCount\x18\x10 \x01(\x05R\x0ePotOfGoldCount\x12$\n" +
	"\rFourLeafCount\x18\x11 \x01(\x05R\rFourLeafCount\x12\"\n" +
	"\fCoinTypeGrid\x18\x12 \x03(\x05R\fCoinTypeGrid\x12$\n" +
	"\rFinalCoinGrid\x18\x13 \x03(\x01R\rFinalCoinGrid\x12\x1a\n" +
	"\bCoinGrid\x18\x14 \x03(\x01R\bCoinGrid\x12 \n" +
	"\vInDisappear\x18\x15 \x01(\bR\vInDisappear\x126\n" +
	"\tDisappear\x18\x16 \x03(\v2\x18.pb_common.DisappearDataR\tDisappear\x12\x14\n" +
	"\x05Extra\x18\x17 \x03(\x05R\x05Extra\x12$\n" +
	"\rLastPotOfGold\x18\x18 \x01(\x05R\rLastPotOfGold\x12.\n" +
	"\x12IsHasRainbowInFree\x18\x19 \x01(\bR\x12IsHasRainbowInFree\x120\n" +
	"\x13IsNeedRainbowInFree\x18\x1a \x01(\bR\x13IsNeedRainbowInFree\x12(\n" +
	"\x0fClearGoldenMesh\x18\x1b \x01(\bR\x0fClearGoldenMesh\x12$\n" +
	"\rNewPotOfGolds\x18\x1c \x03(\x05R\rNewPotOfGolds\x12&\n" +
	"\x0eRetryFreeCount\x18\x1d \x01(\bR\x0eRetryFreeCount\"\xb3\a\n" +
	"\n" +
	"WuKongRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12 \n" +
	"\vMathVersion\x18\x02 \x01(\tR\vMathVersion\x12\x1e\n" +
	"\n" +
	"MeshOffset\x18\x03 \x03(\x05R\n" +
	"MeshOffset\x12\x1a\n" +
	"\bMeshReel\x18\x04 \x01(\x05R\bMeshReel\x12\x1c\n" +
	"\tMeshStuff\x18\x05 \x03(\x05R\tMeshStuff\x12\x1e\n" +
	"\n" +
	"GoldenMesh\x18\x06 \x03(\x05R\n" +
	"GoldenMesh\x12\x18\n" +
	"\aCoinNum\x18\b \x01(\x05R\aCoinNum\x12&\n" +
	"\x0ePotOfGoldCount\x18\t \x01(\x05R\x0ePotOfGoldCount\x12$\n" +
	"\rFourLeafCount\x18\n" +
	" \x01(\x05R\rFourLeafCount\x12\"\n" +
	"\fCoinTypeGrid\x18\v \x03(\x05R\fCoinTypeGrid\x12$\n" +
	"\rFinalCoinGrid\x18\f \x03(\x01R\rFinalCoinGrid\x12\x1a\n" +
	"\bCoinGrid\x18\r \x03(\x01R\bCoinGrid\x12 \n" +
	"\vInDisappear\x18\x0e \x01(\bR\vInDisappear\x126\n" +
	"\tDisappear\x18\x0f \x03(\v2\x18.pb_common.DisappearDataR\tDisappear\x12\x14\n" +
	"\x05Extra\x18\x10 \x03(\x05R\x05Extra\x12$\n" +
	"\rLastPotOfGold\x18\x11 \x01(\x05R\rLastPotOfGold\x12.\n" +
	"\x12IsHasRainbowInFree\x18\x12 \x01(\bR\x12IsHasRainbowInFree\x120\n" +
	"\x13IsNeedRainbowInFree\x18\x13 \x01(\bR\x13IsNeedRainbowInFree\x12(\n" +
	"\x0fClearGoldenMesh\x18\x14 \x01(\bR\x0fClearGoldenMesh\x12$\n" +
	"\rNewPotOfGolds\x18\x15 \x03(\x05R\rNewPotOfGolds\x12&\n" +
	"\x0eRetryFreeCount\x18\x16 \x01(\bR\x0eRetryFreeCount\x12/\n" +
	"\bActivity\x18\x17 \x01(\v2\x13.pb_common.ActModelR\bActivity\x129\n" +
	"\n" +
	"PlatformFS\x18\x18 \x03(\v2\x19.pb_common.PlatformFSDataR\n" +
	"PlatformFS\x128\n" +
	"\vEWuKongGrid\x18\x19 \x03(\v2\x16.pb_common.EWuKongGridR\vEWuKongGrid\"\x7f\n" +
	"\vDisruptLine\x12\x10\n" +
	"\x03Col\x18\x01 \x01(\x05R\x03Col\x12\x10\n" +
	"\x03Row\x18\x02 \x01(\x05R\x03Row\x12\x16\n" +
	"\x06MIndex\x18\x03 \x01(\x05R\x06MIndex\x12 \n" +
	"\vMIndexRange\x18\x04 \x03(\x05R\vMIndexRange\x12\x12\n" +
	"\x04Mult\x18\x05 \x01(\x05R\x04Mult\"J\n" +
	"\fDropDnSymbol\x12\x10\n" +
	"\x03Col\x18\x01 \x01(\x05R\x03Col\x12\x16\n" +
	"\x06MIndex\x18\x02 \x01(\x05R\x06MIndex\x12\x10\n" +
	"\x03Sym\x18\x03 \x01(\x05R\x03Sym\"\xc5\x02\n" +
	"\n" +
	"EJellyGrid\x12\x12\n" +
	"\x04Mesh\x18\x01 \x03(\x05R\x04Mesh\x12\x14\n" +
	"\x05Score\x18\x02 \x01(\x01R\x05Score\x12\x14\n" +
	"\x05Total\x18\x03 \x01(\x01R\x05Total\x12,\n" +
	"\x05Mults\x18\x04 \x03(\v2\x16.pb_common.DisruptLineR\x05Mults\x12-\n" +
	"\x05Drops\x18\x05 \x03(\v2\x17.pb_common.DropDnSymbolR\x05Drops\x12,\n" +
	"\aWinLine\x18\x06 \x03(\v2\x12.pb_common.WinTypeR\aWinLine\x12\x18\n" +
	"\aCascape\x18\a \x01(\bR\aCascape\x12\x1a\n" +
	"\bSymScNum\x18\b \x01(\x05R\bSymScNum\x12\x18\n" +
	"\aSpinNum\x18\t \x01(\x05R\aSpinNum\x12\x1c\n" +
	"\tMeshStuff\x18\n" +
	" \x03(\x05R\tMeshStuff\"\xe7\x05\n" +
	"\tJellyRole\x12\x16\n" +
	"\x06RoleId\x18\x01 \x01(\tR\x06RoleId\x12\x1a\n" +
	"\bParentId\x18\x02 \x01(\x03R\bParentId\x12\x14\n" +
	"\x05SubId\x18\x03 \x01(\x03R\x05SubId\x12\x14\n" +
	"\x05Score\x18\x04 \x01(\x01R\x05Score\x12\x10\n" +
	"\x03Bet\x18\x05 \x01(\x01R\x03Bet\x12\x12\n" +
	"\x04Mesh\x18\x06 \x03(\x05R\x04Mesh\x12\x1c\n" +
	"\tGameState\x18\a \x01(\x05R\tGameState\x12\x1a\n" +
	"\bTotalWin\x18\b \x01(\x01R\bTotalWin\x12.\n" +
	"\bWinTypes\x18\t \x03(\v2\x12.pb_common.WinTypeR\bWinTypes\x12\"\n" +
	"\fFreeSpinTime\x18\n" +
	" \x01(\x05R\fFreeSpinTime\x12,\n" +
	"\x11TotalFreeSpinTime\x18\v \x01(\x05R\x11TotalFreeSpinTime\x12.\n" +
	"\x12TotalFreeSpinScore\x18\f \x01(\x01R\x12TotalFreeSpinScore\x12\x18\n" +
	"\aCascape\x18\r \x01(\bR\aCascape\x12\x1c\n" +
	"\tmeshStuff\x18\x0e \x03(\x05R\tmeshStuff\x128\n" +
	"\vDisruptLine\x18\x0f \x03(\v2\x16.pb_common.DisruptLineR\vDisruptLine\x12;\n" +
	"\fDropDnSymbol\x18\x10 \x03(\v2\x17.pb_common.DropDnSymbolR\fDropDnSymbol\x12\x16\n" +
	"\x06RIndex\x18\x11 \x01(\x05R\x06RIndex\x12\x18\n" +
	"\aOffsets\x18\x12 \x03(\x05R\aOffsets\x12\x16\n" +
	"\x06EScore\x18\x13 \x01(\x01R\x06EScore\x12\x1e\n" +
	"\n" +
	"EFreeScore\x18\x14 \x01(\x01R\n" +
	"EFreeScore\x12-\n" +
	"\x06EGrids\x18\x15 \x03(\v2\x15.pb_common.EJellyGridR\x06EGrids\x12 \n" +
	"\vMathVersion\x18\x16 \x01(\tR\vMathVersion\"\xee\x02\n" +
	"\rECashcrewGrid\x12\x12\n" +
	"\x04Mesh\x18\x01 \x03(\x05R\x04Mesh\x12\x1c\n" +
	"\tMultiMesh\x18\x02 \x03(\x05R\tMultiMesh\x12\x14\n" +
	"\x05Score\x18\x03 \x01(\x01R\x05Score\x12\x14\n" +
	"\x05Total\x18\x04 \x01(\x01R\x05Total\x12,\n" +
	"\aWinLine\x18\x05 \x03(\v2\x12.pb_common.WinLineR\aWinLine\x12\x1a\n" +
	"\bSymScNum\x18\x06 \x01(\x05R\bSymScNum\x12\"\n" +
	"\fFreeSpinTime\x18\a \x01(\x05R\fFreeSpinTime\x12;\n" +
	"\fWildSurround\x18\b \x03(\v2\x17.pb_common.WildSurroundR\fWildSurround\x124\n" +
	"\n" +
	"MoneyDatas\x18\t \x03(\v2\x14.pb_common.MoneyDataR\n" +
	"MoneyDatas\x12\x1e\n" +
	"\n" +
	"FsAddTimes\x18\n" +
	" \x01(\x05R\n" +
	"FsAddTimes\"d\n" +
	"\fWildSurround\x12\x1a\n" +
	"\bMeshGold\x18\x01 \x03(\x05R\bMeshGold\x12\x1c\n" +
	"\tWildIndex\x18\x02 \x01(\x05R\tWildIndex\x12\x1a\n" +
	"\bMultiple\x18\x03 \x01(\x05R\bMultiple\"{\n" +
	"\tMoneyData\x12\x14\n" +
	"\x05Index\x18\x01 \x01(\x05R\x05Index\x12\x1c\n" +
	"\tMultipleN\x18\x02 \x01(\x05R\tMultipleN\x12\x1a\n" +
	"\bMultiple\x18\x03 \x01(\x05R\bMultiple\x12\x1e\n" +
	"\n" +
	"Activation\x18\x04 \x01(\bR\n" +
	"Activation\"\xfe\x03\n" +
	"\fCashcrewRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12 \n" +
	"\vMathVersion\x18\x02 \x01(\tR\vMathVersion\x12\x1c\n" +
	"\tMultiMesh\x18\x03 \x03(\x05R\tMultiMesh\x12;\n" +
	"\fWildSurround\x18\x04 \x03(\v2\x17.pb_common.WildSurroundR\fWildSurround\x124\n" +
	"\n" +
	"MoneyDatas\x18\x05 \x03(\v2\x14.pb_common.MoneyDataR\n" +
	"MoneyDatas\x12\x1e\n" +
	"\n" +
	"FsAddTimes\x18\x06 \x01(\x05R\n" +
	"FsAddTimes\x120\n" +
	"\x06EGrids\x18\a \x03(\v2\x18.pb_common.ECashcrewGridR\x06EGrids\x12\x1e\n" +
	"\n" +
	"EFreeScore\x18\b \x01(\x01R\n" +
	"EFreeScore\x12\x16\n" +
	"\x06EScore\x18\t \x01(\x01R\x06EScore\x12 \n" +
	"\vLockedWilds\x18\n" +
	" \x03(\bR\vLockedWilds\x12(\n" +
	"\x0fLandedWildCoors\x18\v \x03(\x05R\x0fLandedWildCoors\x12\x1a\n" +
	"\bForcedSC\x18\f \x01(\x05R\bForcedSC\x12\"\n" +
	"\fBetterConfig\x18\r \x01(\bR\fBetterConfig\"S\n" +
	"\x13GoldenYearDisappear\x12\x14\n" +
	"\x05Index\x18\x01 \x01(\x05R\x05Index\x12\x12\n" +
	"\x04Type\x18\x02 \x01(\x05R\x04Type\x12\x12\n" +
	"\x04Mesh\x18\x03 \x03(\x05R\x04Mesh\"\x8a\x01\n" +
	"\x10GoldenYearChange\x12\x16\n" +
	"\x06Parent\x18\x01 \x01(\x05R\x06Parent\x12\x12\n" +
	"\x04Type\x18\x02 \x01(\x05R\x04Type\x12\x12\n" +
	"\x04Mesh\x18\x03 \x03(\x05R\x04Mesh\x12 \n" +
	"\vReplaceMesh\x18\x04 \x03(\x05R\vReplaceMesh\x12\x14\n" +
	"\x05Index\x18\x05 \x01(\x05R\x05Index\"\xd7\a\n" +
	"\x0eGoldenYearRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12 \n" +
	"\vMathVersion\x18\x02 \x01(\tR\vMathVersion\x12\x1e\n" +
	"\n" +
	"MeshOffset\x18\x03 \x03(\x05R\n" +
	"MeshOffset\x12\x1a\n" +
	"\bMeshReel\x18\x04 \x01(\x05R\bMeshReel\x12\x1c\n" +
	"\tMeshStuff\x18\x05 \x03(\x05R\tMeshStuff\x12\x1a\n" +
	"\bEyeIndex\x18\x06 \x01(\x05R\bEyeIndex\x12\x18\n" +
	"\aEyeOpen\x18\a \x01(\bR\aEyeOpen\x12&\n" +
	"\x0eCollectedPoint\x18\b \x01(\x05R\x0eCollectedPoint\x12\"\n" +
	"\fPortalEffect\x18\t \x01(\x05R\fPortalEffect\x12*\n" +
	"\x10EyeOpenTriggered\x18\n" +
	" \x01(\bR\x10EyeOpenTriggered\x12,\n" +
	"\x11CollectedPointWin\x18\v \x01(\x05R\x11CollectedPointWin\x12<\n" +
	"\tDisappear\x18\f \x03(\v2\x1e.pb_common.GoldenYearDisappearR\tDisappear\x12,\n" +
	"\x11CollectedPointNow\x18\r \x01(\x05R\x11CollectedPointNow\x12&\n" +
	"\x0eActivatedWilds\x18\x0e \x03(\x05R\x0eActivatedWilds\x125\n" +
	"\aChanges\x18\x0f \x03(\v2\x1b.pb_common.GoldenYearChangeR\aChanges\x120\n" +
	"\x13PortalEffectTrigger\x18\x10 \x01(\x05R\x13PortalEffectTrigger\x12\"\n" +
	"\fFS1EyesIndex\x18\x11 \x03(\bR\fFS1EyesIndex\x12 \n" +
	"\vFS1EyesOpen\x18\x12 \x03(\bR\vFS1EyesOpen\x12 \n" +
	"\vFS2MegaWild\x18\x13 \x03(\x05R\vFS2MegaWild\x12$\n" +
	"\rFS2BatterGame\x18\x14 \x01(\bR\rFS2BatterGame\x12\x18\n" +
	"\aEyeBase\x18\x15 \x03(\x05R\aEyeBase\x12\x1e\n" +
	"\n" +
	"FS1EyeBase\x18\x16 \x03(\x05R\n" +
	"FS1EyeBase\x12\x1e\n" +
	"\n" +
	"FS1EyeLast\x18\x17 \x03(\x05R\n" +
	"FS1EyeLast\x12\x1a\n" +
	"\bRoundEnd\x18\x18 \x01(\bR\bRoundEnd\x12E\n" +
	"\x10NextCascadeModel\x18\x19 \x01(\v2\x19.pb_common.GoldenYearRoleR\x10NextCascadeModel\"8\n" +
	"\x0eChaoscrewRound\x12\x0e\n" +
	"\x02Id\x18\x01 \x01(\x05R\x02Id\x12\x16\n" +
	"\x06Record\x18\x02 \x03(\x01R\x06Record\"\xe3\x02\n" +
	"\x0eEChaoscrewGrid\x12\x12\n" +
	"\x04Mesh\x18\x01 \x03(\x05R\x04Mesh\x12\x1c\n" +
	"\tMultiMesh\x18\x02 \x03(\x05R\tMultiMesh\x12\x14\n" +
	"\x05Score\x18\x03 \x01(\x01R\x05Score\x12\x14\n" +
	"\x05Total\x18\x04 \x01(\x01R\x05Total\x12,\n" +
	"\aWinLine\x18\x05 \x03(\v2\x12.pb_common.WinLineR\aWinLine\x12A\n" +
	"\x0eChaoscrewRound\x18\x06 \x01(\v2\x19.pb_common.ChaoscrewRoundR\x0eChaoscrewRound\x12\x1c\n" +
	"\tSumRecord\x18\a \x03(\x05R\tSumRecord\x12\x1a\n" +
	"\bViscouss\x18\b \x03(\x05R\bViscouss\x12\"\n" +
	"\fFreeSpinTime\x18\t \x01(\x05R\fFreeSpinTime\x12$\n" +
	"\rLastSumRecord\x18\n" +
	" \x03(\x05R\rLastSumRecord\"\xc0\x03\n" +
	"\rChaoscrewRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12 \n" +
	"\vMathVersion\x18\x02 \x01(\tR\vMathVersion\x12\x1c\n" +
	"\tMultiMesh\x18\x03 \x03(\x05R\tMultiMesh\x12\x1c\n" +
	"\tStuffMesh\x18\x04 \x03(\x05R\tStuffMesh\x12A\n" +
	"\x0eChaoscrewRound\x18\x05 \x01(\v2\x19.pb_common.ChaoscrewRoundR\x0eChaoscrewRound\x12\x1c\n" +
	"\tSumRecord\x18\x06 \x03(\x05R\tSumRecord\x12\x1a\n" +
	"\bViscouss\x18\a \x03(\x05R\bViscouss\x12\x1e\n" +
	"\n" +
	"IsEpicDrop\x18\b \x01(\bR\n" +
	"IsEpicDrop\x12\x14\n" +
	"\x05FSWin\x18\t \x01(\x01R\x05FSWin\x121\n" +
	"\x06EGrids\x18\n" +
	" \x03(\v2\x19.pb_common.EChaoscrewGridR\x06EGrids\x12$\n" +
	"\rLastSumRecord\x18\v \x03(\x05R\rLastSumRecord\x12\x1e\n" +
	"\n" +
	"IsOverstep\x18\f \x01(\bR\n" +
	"IsOverstep\"8\n" +
	"\x0eKeepEmStartEnd\x12\x14\n" +
	"\x05Start\x18\x01 \x01(\x05R\x05Start\x12\x10\n" +
	"\x03End\x18\x02 \x01(\x05R\x03End\"{\n" +
	"\rKeepEmViscous\x12\x14\n" +
	"\x05Start\x18\x01 \x01(\x05R\x05Start\x12\x10\n" +
	"\x03End\x18\x02 \x01(\x05R\x03End\x12\x14\n" +
	"\x05First\x18\x03 \x01(\bR\x05First\x12\x16\n" +
	"\x06Symbol\x18\x04 \x01(\x05R\x06Symbol\x12\x14\n" +
	"\x05Multi\x18\x05 \x01(\x05R\x05Multi\"y\n" +
	"\x0eKeepEmSuperCol\x12\x12\n" +
	"\x04Cols\x18\x01 \x03(\x05R\x04Cols\x12\x1e\n" +
	"\n" +
	"NormalCols\x18\x02 \x03(\x05R\n" +
	"NormalCols\x123\n" +
	"\aExpanse\x18\x03 \x01(\v2\x19.pb_common.KeepEmStartEndR\aExpanse\"W\n" +
	"\vKeepEmBoost\x12\x14\n" +
	"\x05Index\x18\x01 \x01(\x05R\x05Index\x12\x10\n" +
	"\x03Mul\x18\x02 \x01(\x05R\x03Mul\x12 \n" +
	"\vAffectIndex\x18\x03 \x03(\x05R\vAffectIndex\";\n" +
	"\vKeepEmMoney\x12\x14\n" +
	"\x05Index\x18\x01 \x01(\x05R\x05Index\x12\x16\n" +
	"\x06Symbol\x18\x02 \x01(\x05R\x06Symbol\"\xaf\t\n" +
	"\n" +
	"KeepEmRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12 \n" +
	"\vMathVersion\x18\x02 \x01(\tR\vMathVersion\x12\x1e\n" +
	"\n" +
	"CascadeNum\x18\x03 \x01(\x05R\n" +
	"CascadeNum\x12\"\n" +
	"\fCascadeIndex\x18\x04 \x01(\x05R\fCascadeIndex\x12&\n" +
	"\x0eCascadeLastNum\x18\x05 \x01(\x05R\x0eCascadeLastNum\x122\n" +
	"\aViscous\x18\x06 \x03(\v2\x18.pb_common.KeepEmViscousR\aViscous\x12\x16\n" +
	"\x06MulNum\x18\a \x01(\x05R\x06MulNum\x12$\n" +
	"\rMulCurrentNum\x18\b \x01(\x05R\rMulCurrentNum\x125\n" +
	"\bSuperCol\x18\t \x01(\v2\x19.pb_common.KeepEmSuperColR\bSuperCol\x12,\n" +
	"\x05Boost\x18\n" +
	" \x03(\v2\x16.pb_common.KeepEmBoostR\x05Boost\x12\x1e\n" +
	"\n" +
	"ModeSource\x18\v \x01(\x05R\n" +
	"ModeSource\x12\"\n" +
	"\fSessionScore\x18\f \x01(\x01R\fSessionScore\x12\x1e\n" +
	"\n" +
	"RoundScore\x18\r \x01(\x01R\n" +
	"RoundScore\x12(\n" +
	"\x0fRoundCollectSet\x18\x0e \x01(\bR\x0fRoundCollectSet\x12$\n" +
	"\rRoundMoneySet\x18\x0f \x01(\bR\rRoundMoneySet\x12$\n" +
	"\rRoundBoostSet\x18\x10 \x01(\bR\rRoundBoostSet\x12K\n" +
	"\fMoneyMulSave\x18\x11 \x03(\v2'.pb_common.KeepEmRole.MoneyMulSaveEntryR\fMoneyMulSave\x12N\n" +
	"\rViscousBottom\x18\x12 \x03(\v2(.pb_common.KeepEmRole.ViscousBottomEntryR\rViscousBottom\x12-\n" +
	"\x06Future\x18\x13 \x03(\v2\x15.pb_common.KeepEmRoleR\x06Future\x12\x1c\n" +
	"\tNewPlayer\x18\x14 \x01(\bR\tNewPlayer\x12\x10\n" +
	"\x03Rtp\x18\x15 \x01(\x05R\x03Rtp\x12(\n" +
	"\x0fIsRealNewPlayer\x18\x16 \x01(\bR\x0fIsRealNewPlayer\x12 \n" +
	"\vRhinoOption\x18\x17 \x03(\x05R\vRhinoOption\x12\x18\n" +
	"\aLastBet\x18\x18 \x01(\x01R\aLastBet\x126\n" +
	"\n" +
	"Activities\x18\x19 \x03(\v2\x16.pb_common.NewActivityR\n" +
	"Activities\x12\x1e\n" +
	"\n" +
	"MoneyMulti\x18\x1a \x01(\x05R\n" +
	"MoneyMulti\x1a?\n" +
	"\x11MoneyMulSaveEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a@\n" +
	"\x12ViscousBottomEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"y\n" +
	"\rVenomWildData\x12\x18\n" +
	"\aIsFirst\x18\x01 \x01(\bR\aIsFirst\x12\x1a\n" +
	"\bNowIndex\x18\x02 \x01(\x05R\bNowIndex\x12\x1c\n" +
	"\tnextIndex\x18\x03 \x01(\x05R\tnextIndex\x12\x14\n" +
	"\x05cover\x18\x04 \x01(\x05R\x05cover\"6\n" +
	"\fSCExpanseCol\x12\x10\n" +
	"\x03Col\x18\x01 \x01(\x05R\x03Col\x12\x14\n" +
	"\x05Index\x18\x02 \x03(\x05R\x05Index\"\xb9\x06\n" +
	"\tVenomRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12 \n" +
	"\vMathVersion\x18\x02 \x01(\tR\vMathVersion\x12\x1e\n" +
	"\n" +
	"ModeSource\x18\x03 \x01(\x05R\n" +
	"ModeSource\x124\n" +
	"\bWildList\x18\x04 \x03(\v2\x18.pb_common.VenomWildDataR\bWildList\x12\x1a\n" +
	"\bSCSelect\x18\x05 \x01(\x05R\bSCSelect\x12=\n" +
	"\rSCExpanseCols\x18\x06 \x03(\v2\x17.pb_common.SCExpanseColR\rSCExpanseCols\x12&\n" +
	"\x0eSCExpanseScore\x18\a \x01(\x01R\x0eSCExpanseScore\x12\x18\n" +
	"\aSCCount\x18\b \x01(\x05R\aSCCount\x12\x1a\n" +
	"\bBaseMesh\x18\t \x03(\x05R\bBaseMesh\x12&\n" +
	"\x0eWildTotalScore\x18\n" +
	" \x01(\x01R\x0eWildTotalScore\x12\"\n" +
	"\fSessionScore\x18\v \x01(\x01R\fSessionScore\x129\n" +
	"\n" +
	"FutureMesh\x18\f \x03(\v2\x19.pb_common.VenomRole.MeshR\n" +
	"FutureMesh\x12?\n" +
	"\x0eFutureWildList\x18\r \x03(\v2\x17.pb_common.VenomRole.WLR\x0eFutureWildList\x12\x1e\n" +
	"\n" +
	"RoundScore\x18\x0e \x01(\x01R\n" +
	"RoundScore\x12\x1c\n" +
	"\tNewPlayer\x18\x0f \x01(\bR\tNewPlayer\x12\x1a\n" +
	"\bActivity\x18\x10 \x01(\bR\bActivity\x126\n" +
	"\n" +
	"Activities\x18\x11 \x03(\v2\x16.pb_common.NewActivityR\n" +
	"Activities\x12\"\n" +
	"\fRespinSource\x18\x12 \x01(\x05R\fRespinSource\x1a\x1a\n" +
	"\x04Mesh\x12\x12\n" +
	"\x04mesh\x18\x01 \x03(\x05R\x04mesh\x1a:\n" +
	"\x02WL\x124\n" +
	"\bWildList\x18\x01 \x03(\v2\x18.pb_common.VenomWildDataR\bWildList\";\n" +
	"\aEyeData\x12\x14\n" +
	"\x05Index\x18\x01 \x01(\x05R\x05Index\x12\x1a\n" +
	"\bMultiple\x18\x02 \x01(\x05R\bMultiple\"\xa9\x02\n" +
	"\vNewActivity\x12\x0e\n" +
	"\x02Id\x18\x01 \x01(\x03R\x02Id\x12\x12\n" +
	"\x04Name\x18\x02 \x01(\tR\x04Name\x12\x1c\n" +
	"\tStartTime\x18\x03 \x01(\x03R\tStartTime\x12\x18\n" +
	"\aEndTime\x18\x04 \x01(\x03R\aEndTime\x12\"\n" +
	"\fTotalEndTime\x18\x05 \x01(\x03R\fTotalEndTime\x12\"\n" +
	"\fTotalSpinNum\x18\x06 \x01(\x03R\fTotalSpinNum\x12\x18\n" +
	"\aSpinNum\x18\a \x01(\x03R\aSpinNum\x12\x1e\n" +
	"\n" +
	"TotalScore\x18\b \x01(\x01R\n" +
	"TotalScore\x12\x10\n" +
	"\x03Bet\x18\t \x01(\x01R\x03Bet\x12\x12\n" +
	"\x04Type\x18\n" +
	" \x01(\x03R\x04Type\x12\x16\n" +
	"\x06Status\x18\v \x01(\x03R\x06Status\"\xd0\b\n" +
	"\x0eRazorsharkRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12 \n" +
	"\vMathVersion\x18\x02 \x01(\tR\vMathVersion\x12\x1c\n" +
	"\tMultiMesh\x18\x03 \x03(\x05R\tMultiMesh\x12\x14\n" +
	"\x05FSWin\x18\x04 \x01(\x01R\x05FSWin\x12\x1c\n" +
	"\tStopIndex\x18\x05 \x03(\x05R\tStopIndex\x12\"\n" +
	"\fReelSetIndex\x18\x06 \x03(\x05R\fReelSetIndex\x12\x1e\n" +
	"\n" +
	"HasSeaWeed\x18\a \x03(\bR\n" +
	"HasSeaWeed\x12$\n" +
	"\rSeaweedStatus\x18\b \x03(\x05R\rSeaweedStatus\x12\"\n" +
	"\fRoundMaxMine\x18\t \x01(\x05R\fRoundMaxMine\x12\x1c\n" +
	"\tContinued\x18\n" +
	" \x01(\bR\tContinued\x12\x1c\n" +
	"\tMineCount\x18\v \x01(\x05R\tMineCount\x12 \n" +
	"\vRefreshList\x18\f \x03(\x05R\vRefreshList\x12 \n" +
	"\vRefreshRoll\x18\r \x03(\x05R\vRefreshRoll\x12.\n" +
	"\bEyesData\x18\x0e \x03(\v2\x12.pb_common.EyeDataR\bEyesData\x12 \n" +
	"\vRefreshBack\x18\x0f \x01(\x05R\vRefreshBack\x12 \n" +
	"\vNgStopIndex\x18\x10 \x03(\x05R\vNgStopIndex\x12&\n" +
	"\x0eNgReelSetIndex\x18\x11 \x03(\x05R\x0eNgReelSetIndex\x12\"\n" +
	"\fNgHasSeaWeed\x18\x12 \x03(\bR\fNgHasSeaWeed\x12$\n" +
	"\rNgRefreshList\x18\x13 \x03(\x05R\rNgRefreshList\x12$\n" +
	"\rNgRefreshRoll\x18\x14 \x03(\x05R\rNgRefreshRoll\x12\x16\n" +
	"\x06NgMesh\x18\x15 \x03(\x05R\x06NgMesh\x12&\n" +
	"\x0eBeforeFreeMesh\x18\x16 \x03(\x05R\x0eBeforeFreeMesh\x12$\n" +
	"\rNgExpectScNum\x18\x17 \x01(\x05R\rNgExpectScNum\x12*\n" +
	"\x10NgExpectTotalNum\x18\x18 \x01(\x05R\x10NgExpectTotalNum\x12\x1c\n" +
	"\tFrontBack\x18\x19 \x01(\x05R\tFrontBack\x12\x16\n" +
	"\x06UseBet\x18\x1a \x01(\bR\x06UseBet\x12G\n" +
	"\x11RazorsharkBetRole\x18\x1b \x03(\v2\x19.pb_common.RazorsharkRoleR\x11RazorsharkBetRole\x12\x1c\n" +
	"\tNewPlayer\x18\x1c \x01(\bR\tNewPlayer\x12 \n" +
	"\vBonusStatus\x18\x1d \x01(\bR\vBonusStatus\x128\n" +
	"\vNewActivity\x18\x1e \x03(\v2\x16.pb_common.NewActivityR\vNewActivity\"\xe5\x01\n" +
	"\rActInnerModel\x12\x16\n" +
	"\x06IsTrig\x18\x01 \x01(\bR\x06IsTrig\x12\x12\n" +
	"\x04Type\x18\x02 \x01(\tR\x04Type\x12\x10\n" +
	"\x03Key\x18\x03 \x01(\x05R\x03Key\x12\x14\n" +
	"\x05State\x18\x04 \x01(\x05R\x05State\x12\x14\n" +
	"\x05Start\x18\x05 \x01(\x05R\x05Start\x12\x10\n" +
	"\x03End\x18\x06 \x01(\x05R\x03End\x12\x14\n" +
	"\x05Score\x18\a \x01(\x01R\x05Score\x12\x10\n" +
	"\x03Bet\x18\b \x01(\x01R\x03Bet\x12\x14\n" +
	"\x05Level\x18\t \x01(\x05R\x05Level\x12\x1a\n" +
	"\bTotalEnd\x18\n" +
	" \x01(\x05R\bTotalEnd\"\xa9\x01\n" +
	"\x0fFreeSpinActItem\x12\x14\n" +
	"\x05State\x18\x01 \x01(\x05R\x05State\x12\x10\n" +
	"\x03Key\x18\x02 \x01(\x05R\x03Key\x12\x14\n" +
	"\x05Start\x18\x03 \x01(\x05R\x05Start\x12\x10\n" +
	"\x03End\x18\x04 \x01(\x05R\x03End\x12\x14\n" +
	"\x05Index\x18\x05 \x01(\x05R\x05Index\x12\x18\n" +
	"\aSpinNum\x18\x06 \x01(\x05R\aSpinNum\x12\x16\n" +
	"\x06Bindex\x18\a \x01(\x05R\x06Bindex\"\x85\x01\n" +
	"\vFreeSpinExt\x12\x18\n" +
	"\aSpinNum\x18\x01 \x01(\x05R\aSpinNum\x12\x14\n" +
	"\x05Index\x18\x02 \x01(\x05R\x05Index\x12\x16\n" +
	"\x06Bindex\x18\x03 \x01(\x05R\x06Bindex\x12.\n" +
	"\x04List\x18\x04 \x03(\v2\x1a.pb_common.FreeSpinActItemR\x04List\"]\n" +
	"\vRankActItem\x12\x14\n" +
	"\x05State\x18\x01 \x01(\x05R\x05State\x12\x10\n" +
	"\x03Key\x18\x02 \x01(\x05R\x03Key\x12\x14\n" +
	"\x05Start\x18\x03 \x01(\x05R\x05Start\x12\x10\n" +
	"\x03End\x18\x04 \x01(\x05R\x03End\"\xa9\x01\n" +
	"\aRankExt\x12*\n" +
	"\x04List\x18\x01 \x03(\v2\x16.pb_common.RankActItemR\x04List\x12\x14\n" +
	"\x05Level\x18\x02 \x01(\x05R\x05Level\x12\x16\n" +
	"\x06NotBet\x18\x03 \x01(\bR\x06NotBet\x12\x16\n" +
	"\x06RedDot\x18\x04 \x01(\bR\x06RedDot\x12\x1a\n" +
	"\bShowIcon\x18\x05 \x01(\bR\bShowIcon\x12\x10\n" +
	"\x03Bet\x18\x06 \x01(\x01R\x03Bet\"\xce\x01\n" +
	"\bActModel\x12\x1a\n" +
	"\bLeftover\x18\x01 \x01(\bR\bLeftover\x12\x18\n" +
	"\aBonuses\x18\x02 \x01(\x01R\aBonuses\x12*\n" +
	"\x03Act\x18\x03 \x01(\v2\x18.pb_common.ActInnerModelR\x03Act\x122\n" +
	"\bFsExtend\x18\x04 \x01(\v2\x16.pb_common.FreeSpinExtR\bFsExtend\x12,\n" +
	"\aRankExt\x18\x05 \x01(\v2\x12.pb_common.RankExtR\aRankExt\";\n" +
	"\vStandardRes\x12\x12\n" +
	"\x04Code\x18\x01 \x01(\x05R\x04Code\x12\x18\n" +
	"\aMessage\x18\x02 \x01(\tR\aMessage\"!\n" +
	"\x05Multi\x12\x18\n" +
	"\aSymbols\x18\x01 \x03(\x05R\aSymbols\"]\n" +
	"\rColMultiIndex\x12\x1a\n" +
	"\bHasMulti\x18\x01 \x01(\bR\bHasMulti\x12\x14\n" +
	"\x05Count\x18\x02 \x01(\x05R\x05Count\x12\x1a\n" +
	"\bRowIndex\x18\x03 \x01(\x05R\bRowIndex\"\xf4\x02\n" +
	"\tNeZhaRole\x12%\n" +
	"\x02CR\x18\x01 \x01(\v2\x15.pb_common.CommonRoleR\x02CR\x12 \n" +
	"\vMathVersion\x18\x02 \x01(\tR\vMathVersion\x12(\n" +
	"\x0fCascadeWinCount\x18\x03 \x01(\x05R\x0fCascadeWinCount\x12\x1c\n" +
	"\tNewPlayer\x18\x04 \x01(\bR\tNewPlayer\x12\x14\n" +
	"\x05Chess\x18\x05 \x01(\tR\x05Chess\x128\n" +
	"\vNewActivity\x18\x06 \x03(\v2\x16.pb_common.NewActivityR\vNewActivity\x12\x1a\n" +
	"\bRoundEnd\x18\a \x01(\bR\bRoundEnd\x12@\n" +
	"\x10NextCascadeModel\x18\b \x01(\v2\x14.pb_common.NeZhaRoleR\x10NextCascadeModel\x12(\n" +
	"\x0fIsRealNewPlayer\x18\t \x01(\bR\x0fIsRealNewPlayer\"\xd2\x03\n" +
	"\x0eGameEngineRole\x12\x16\n" +
	"\x06RoleId\x18\x01 \x01(\tR\x06RoleId\x12\x1a\n" +
	"\bParentId\x18\x02 \x01(\x03R\bParentId\x12\x14\n" +
	"\x05SubId\x18\x03 \x01(\x03R\x05SubId\x12\x10\n" +
	"\x03Bet\x18\x04 \x01(\x01R\x03Bet\x12\x14\n" +
	"\x05Score\x18\x05 \x01(\x01R\x05Score\x12\x12\n" +
	"\x04Mesh\x18\x06 \x03(\x05R\x04Mesh\x12\x1c\n" +
	"\tGameState\x18\a \x01(\x05R\tGameState\x12.\n" +
	"\bWinLines\x18\b \x03(\v2\x12.pb_common.WinLineR\bWinLines\x12\x1a\n" +
	"\bMultiple\x18\t \x01(\x01R\bMultiple\x12\x1e\n" +
	"\n" +
	"TotalScore\x18\n" +
	" \x01(\x01R\n" +
	"TotalScore\x12\x14\n" +
	"\x05FSNum\x18\v \x01(\x05R\x05FSNum\x12\x1e\n" +
	"\n" +
	"FSTotalNum\x18\f \x01(\x05R\n" +
	"FSTotalNum\x12\"\n" +
	"\fFSTotalScore\x18\r \x01(\x01R\fFSTotalScore\x12\x14\n" +
	"\x05RSNum\x18\x0e \x01(\x05R\x05RSNum\x12\x18\n" +
	"\aCascade\x18\x0f \x01(\bR\aCascade\x12&\n" +
	"\x0eGameExtendInfo\x18\x10 \x01(\fR\x0eGameExtendInfoB,Z*cocogame-max/slots-conn-gw/proto/pb_commonb\x06proto3"

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData []byte
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_common_proto_rawDesc), len(file_common_proto_rawDesc)))
	})
	return file_common_proto_rawDescData
}

var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 103)
var file_common_proto_goTypes = []any{
	(*WinLine)(nil),                // 0: pb_common.WinLine
	(*Jackpot)(nil),                // 1: pb_common.Jackpot
	(*WinType)(nil),                // 2: pb_common.WinType
	(*VS)(nil),                     // 3: pb_common.VS
	(*CommonRole)(nil),             // 4: pb_common.CommonRole
	(*Multiplier)(nil),             // 5: pb_common.Multiplier
	(*BetLevels)(nil),              // 6: pb_common.BetLevels
	(*MOperatorRole)(nil),          // 7: pb_common.MOperatorRole
	(*SuppleChess)(nil),            // 8: pb_common.SuppleChess
	(*BetToList)(nil),              // 9: pb_common.BetToList
	(*MDoggyRole)(nil),             // 10: pb_common.MDoggyRole
	(*Bonus)(nil),                  // 11: pb_common.Bonus
	(*MoneytrainRole)(nil),         // 12: pb_common.MoneytrainRole
	(*VsChess)(nil),                // 13: pb_common.VsChess
	(*MDragonSlayerRole)(nil),      // 14: pb_common.MDragonSlayerRole
	(*WantedVS)(nil),               // 15: pb_common.WantedVS
	(*WantedRole)(nil),             // 16: pb_common.WantedRole
	(*SpecialSymbol)(nil),          // 17: pb_common.SpecialSymbol
	(*WinClearList)(nil),           // 18: pb_common.WinClearList
	(*HandOfAnubisRole)(nil),       // 19: pb_common.HandOfAnubisRole
	(*DragonVS)(nil),               // 20: pb_common.DragonVS
	(*DragonEgg)(nil),              // 21: pb_common.DragonEgg
	(*DragonRole)(nil),             // 22: pb_common.DragonRole
	(*SwitchData)(nil),             // 23: pb_common.SwitchData
	(*JohnWildRole)(nil),           // 24: pb_common.JohnWildRole
	(*CatData)(nil),                // 25: pb_common.CatData
	(*RipCityRole)(nil),            // 26: pb_common.RipCityRole
	(*WarriorWaysRole)(nil),        // 27: pb_common.WarriorWaysRole
	(*EIteroGrid)(nil),             // 28: pb_common.EIteroGrid
	(*IteroRole)(nil),              // 29: pb_common.IteroRole
	(*SugarRushRole)(nil),          // 30: pb_common.SugarRushRole
	(*SweetBonanzaRole)(nil),       // 31: pb_common.SweetBonanzaRole
	(*WildGangRole)(nil),           // 32: pb_common.WildGangRole
	(*GatesOfOlympusRole)(nil),     // 33: pb_common.GatesOfOlympusRole
	(*BeautifulgirlRole)(nil),      // 34: pb_common.BeautifulgirlRole
	(*DogHouseRole)(nil),           // 35: pb_common.DogHouseRole
	(*MagicalMineVS)(nil),          // 36: pb_common.MagicalMineVS
	(*MagicalMineRole)(nil),        // 37: pb_common.MagicalMineRole
	(*BigBassMoneyData)(nil),       // 38: pb_common.BigBassMoneyData
	(*BigBassRandColData)(nil),     // 39: pb_common.BigBassRandColData
	(*BigBassRole)(nil),            // 40: pb_common.BigBassRole
	(*ClashCashCounter)(nil),       // 41: pb_common.ClashCashCounter
	(*ClashCashGlovesMul)(nil),     // 42: pb_common.ClashCashGlovesMul
	(*ClashCashGloves)(nil),        // 43: pb_common.ClashCashGloves
	(*ClashCashRole)(nil),          // 44: pb_common.ClashCashRole
	(*GlodOfOlympusRole)(nil),      // 45: pb_common.GlodOfOlympusRole
	(*GatesCopyOfOlympusRole)(nil), // 46: pb_common.GatesCopyOfOlympusRole
	(*SugarCopyRushRole)(nil),      // 47: pb_common.SugarCopyRushRole
	(*JacksCryptVS)(nil),           // 48: pb_common.JacksCryptVS
	(*JacksCryptRole)(nil),         // 49: pb_common.JacksCryptRole
	(*MergeWildData)(nil),          // 50: pb_common.MergeWildData
	(*ArcanePortalsRole)(nil),      // 51: pb_common.ArcanePortalsRole
	(*PlatformFSData)(nil),         // 52: pb_common.PlatformFSData
	(*DisappearData)(nil),          // 53: pb_common.DisappearData
	(*EWuKongGrid)(nil),            // 54: pb_common.EWuKongGrid
	(*WuKongRole)(nil),             // 55: pb_common.WuKongRole
	(*DisruptLine)(nil),            // 56: pb_common.DisruptLine
	(*DropDnSymbol)(nil),           // 57: pb_common.DropDnSymbol
	(*EJellyGrid)(nil),             // 58: pb_common.EJellyGrid
	(*JellyRole)(nil),              // 59: pb_common.JellyRole
	(*ECashcrewGrid)(nil),          // 60: pb_common.ECashcrewGrid
	(*WildSurround)(nil),           // 61: pb_common.WildSurround
	(*MoneyData)(nil),              // 62: pb_common.MoneyData
	(*CashcrewRole)(nil),           // 63: pb_common.CashcrewRole
	(*GoldenYearDisappear)(nil),    // 64: pb_common.GoldenYearDisappear
	(*GoldenYearChange)(nil),       // 65: pb_common.GoldenYearChange
	(*GoldenYearRole)(nil),         // 66: pb_common.GoldenYearRole
	(*ChaoscrewRound)(nil),         // 67: pb_common.ChaoscrewRound
	(*EChaoscrewGrid)(nil),         // 68: pb_common.EChaoscrewGrid
	(*ChaoscrewRole)(nil),          // 69: pb_common.ChaoscrewRole
	(*KeepEmStartEnd)(nil),         // 70: pb_common.KeepEmStartEnd
	(*KeepEmViscous)(nil),          // 71: pb_common.KeepEmViscous
	(*KeepEmSuperCol)(nil),         // 72: pb_common.KeepEmSuperCol
	(*KeepEmBoost)(nil),            // 73: pb_common.KeepEmBoost
	(*KeepEmMoney)(nil),            // 74: pb_common.KeepEmMoney
	(*KeepEmRole)(nil),             // 75: pb_common.KeepEmRole
	(*VenomWildData)(nil),          // 76: pb_common.VenomWildData
	(*SCExpanseCol)(nil),           // 77: pb_common.SCExpanseCol
	(*VenomRole)(nil),              // 78: pb_common.VenomRole
	(*EyeData)(nil),                // 79: pb_common.EyeData
	(*NewActivity)(nil),            // 80: pb_common.NewActivity
	(*RazorsharkRole)(nil),         // 81: pb_common.RazorsharkRole
	(*ActInnerModel)(nil),          // 82: pb_common.ActInnerModel
	(*FreeSpinActItem)(nil),        // 83: pb_common.FreeSpinActItem
	(*FreeSpinExt)(nil),            // 84: pb_common.FreeSpinExt
	(*RankActItem)(nil),            // 85: pb_common.RankActItem
	(*RankExt)(nil),                // 86: pb_common.RankExt
	(*ActModel)(nil),               // 87: pb_common.ActModel
	(*StandardRes)(nil),            // 88: pb_common.StandardRes
	(*Multi)(nil),                  // 89: pb_common.Multi
	(*ColMultiIndex)(nil),          // 90: pb_common.ColMultiIndex
	(*NeZhaRole)(nil),              // 91: pb_common.NeZhaRole
	(*GameEngineRole)(nil),         // 92: pb_common.GameEngineRole
	nil,                            // 93: pb_common.MoneytrainRole.BonusInfoEntry
	nil,                            // 94: pb_common.MoneytrainRole.NewBonusInfoEntry
	nil,                            // 95: pb_common.MoneytrainRole.PresistentBonusInfoEntry
	nil,                            // 96: pb_common.MDragonSlayerRole.VSListEntry
	nil,                            // 97: pb_common.HandOfAnubisRole.SoulOrbStateEntry
	nil,                            // 98: pb_common.SwitchData.ReplacedSymbolsEntry
	nil,                            // 99: pb_common.KeepEmRole.MoneyMulSaveEntry
	nil,                            // 100: pb_common.KeepEmRole.ViscousBottomEntry
	(*VenomRole_Mesh)(nil),         // 101: pb_common.VenomRole.Mesh
	(*VenomRole_WL)(nil),           // 102: pb_common.VenomRole.WL
}
var file_common_proto_depIdxs = []int32{
	0,   // 0: pb_common.CommonRole.WinLines:type_name -> pb_common.WinLine
	8,   // 1: pb_common.MDoggyRole.SuppleMesh:type_name -> pb_common.SuppleChess
	9,   // 2: pb_common.MDoggyRole.BetChessMesh:type_name -> pb_common.BetToList
	0,   // 3: pb_common.MoneytrainRole.WinLines:type_name -> pb_common.WinLine
	93,  // 4: pb_common.MoneytrainRole.BonusInfo:type_name -> pb_common.MoneytrainRole.BonusInfoEntry
	94,  // 5: pb_common.MoneytrainRole.NewBonusInfo:type_name -> pb_common.MoneytrainRole.NewBonusInfoEntry
	95,  // 6: pb_common.MoneytrainRole.PresistentBonusInfo:type_name -> pb_common.MoneytrainRole.PresistentBonusInfoEntry
	11,  // 7: pb_common.MoneytrainRole.NecromancyEffects:type_name -> pb_common.Bonus
	0,   // 8: pb_common.MDragonSlayerRole.WinLines:type_name -> pb_common.WinLine
	96,  // 9: pb_common.MDragonSlayerRole.VSList:type_name -> pb_common.MDragonSlayerRole.VSListEntry
	2,   // 10: pb_common.WantedRole.WinTypes:type_name -> pb_common.WinType
	15,  // 11: pb_common.WantedRole.WantedVS:type_name -> pb_common.WantedVS
	18,  // 12: pb_common.HandOfAnubisRole.WinClearList:type_name -> pb_common.WinClearList
	8,   // 13: pb_common.HandOfAnubisRole.StuffMesh:type_name -> pb_common.SuppleChess
	17,  // 14: pb_common.HandOfAnubisRole.SpecialSymbols:type_name -> pb_common.SpecialSymbol
	97,  // 15: pb_common.HandOfAnubisRole.SoulOrbState:type_name -> pb_common.HandOfAnubisRole.SoulOrbStateEntry
	19,  // 16: pb_common.HandOfAnubisRole.NextCascadeModel:type_name -> pb_common.HandOfAnubisRole
	2,   // 17: pb_common.DragonRole.WinTypes:type_name -> pb_common.WinType
	20,  // 18: pb_common.DragonRole.DragonVS:type_name -> pb_common.DragonVS
	21,  // 19: pb_common.DragonRole.DragonEgg:type_name -> pb_common.DragonEgg
	22,  // 20: pb_common.DragonRole.NextCascadeModel:type_name -> pb_common.DragonRole
	98,  // 21: pb_common.SwitchData.ReplacedSymbols:type_name -> pb_common.SwitchData.ReplacedSymbolsEntry
	2,   // 22: pb_common.JohnWildRole.WinTypes:type_name -> pb_common.WinType
	23,  // 23: pb_common.JohnWildRole.Switch:type_name -> pb_common.SwitchData
	24,  // 24: pb_common.JohnWildRole.NextCascadeModel:type_name -> pb_common.JohnWildRole
	2,   // 25: pb_common.RipCityRole.WinTypes:type_name -> pb_common.WinType
	25,  // 26: pb_common.RipCityRole.CatData:type_name -> pb_common.CatData
	2,   // 27: pb_common.WarriorWaysRole.WinTypes:type_name -> pb_common.WinType
	3,   // 28: pb_common.WarriorWaysRole.VS:type_name -> pb_common.VS
	0,   // 29: pb_common.EIteroGrid.WinLines:type_name -> pb_common.WinLine
	4,   // 30: pb_common.IteroRole.CR:type_name -> pb_common.CommonRole
	28,  // 31: pb_common.IteroRole.EIteroGrid:type_name -> pb_common.EIteroGrid
	4,   // 32: pb_common.SugarRushRole.CR:type_name -> pb_common.CommonRole
	30,  // 33: pb_common.SugarRushRole.NextCascadeModel:type_name -> pb_common.SugarRushRole
	4,   // 34: pb_common.SweetBonanzaRole.CR:type_name -> pb_common.CommonRole
	31,  // 35: pb_common.SweetBonanzaRole.NextCascadeModel:type_name -> pb_common.SweetBonanzaRole
	4,   // 36: pb_common.WildGangRole.CR:type_name -> pb_common.CommonRole
	4,   // 37: pb_common.GatesOfOlympusRole.CR:type_name -> pb_common.CommonRole
	33,  // 38: pb_common.GatesOfOlympusRole.NextCascadeModel:type_name -> pb_common.GatesOfOlympusRole
	4,   // 39: pb_common.BeautifulgirlRole.CR:type_name -> pb_common.CommonRole
	34,  // 40: pb_common.BeautifulgirlRole.NextCascadeModel:type_name -> pb_common.BeautifulgirlRole
	4,   // 41: pb_common.DogHouseRole.CR:type_name -> pb_common.CommonRole
	2,   // 42: pb_common.MagicalMineRole.WinTypes:type_name -> pb_common.WinType
	36,  // 43: pb_common.MagicalMineRole.MagicalMineVS:type_name -> pb_common.MagicalMineVS
	2,   // 44: pb_common.BigBassRole.WinTypes:type_name -> pb_common.WinType
	38,  // 45: pb_common.BigBassRole.MoneyDatas:type_name -> pb_common.BigBassMoneyData
	39,  // 46: pb_common.BigBassRole.RandColDatas:type_name -> pb_common.BigBassRandColData
	40,  // 47: pb_common.BigBassRole.NextCascadeModel:type_name -> pb_common.BigBassRole
	42,  // 48: pb_common.ClashCashGloves.MulData:type_name -> pb_common.ClashCashGlovesMul
	4,   // 49: pb_common.ClashCashRole.CR:type_name -> pb_common.CommonRole
	43,  // 50: pb_common.ClashCashRole.GlovesData:type_name -> pb_common.ClashCashGloves
	41,  // 51: pb_common.ClashCashRole.Counters:type_name -> pb_common.ClashCashCounter
	4,   // 52: pb_common.GlodOfOlympusRole.CR:type_name -> pb_common.CommonRole
	45,  // 53: pb_common.GlodOfOlympusRole.NextCascadeModel:type_name -> pb_common.GlodOfOlympusRole
	4,   // 54: pb_common.GatesCopyOfOlympusRole.CR:type_name -> pb_common.CommonRole
	4,   // 55: pb_common.SugarCopyRushRole.CR:type_name -> pb_common.CommonRole
	2,   // 56: pb_common.JacksCryptRole.WinTypes:type_name -> pb_common.WinType
	48,  // 57: pb_common.JacksCryptRole.JacksCryptVS:type_name -> pb_common.JacksCryptVS
	4,   // 58: pb_common.ArcanePortalsRole.CR:type_name -> pb_common.CommonRole
	50,  // 59: pb_common.ArcanePortalsRole.MergeWildData:type_name -> pb_common.MergeWildData
	51,  // 60: pb_common.ArcanePortalsRole.NextCascadeModel:type_name -> pb_common.ArcanePortalsRole
	0,   // 61: pb_common.EWuKongGrid.WinLines:type_name -> pb_common.WinLine
	53,  // 62: pb_common.EWuKongGrid.Disappear:type_name -> pb_common.DisappearData
	4,   // 63: pb_common.WuKongRole.CR:type_name -> pb_common.CommonRole
	53,  // 64: pb_common.WuKongRole.Disappear:type_name -> pb_common.DisappearData
	87,  // 65: pb_common.WuKongRole.Activity:type_name -> pb_common.ActModel
	52,  // 66: pb_common.WuKongRole.PlatformFS:type_name -> pb_common.PlatformFSData
	54,  // 67: pb_common.WuKongRole.EWuKongGrid:type_name -> pb_common.EWuKongGrid
	56,  // 68: pb_common.EJellyGrid.Mults:type_name -> pb_common.DisruptLine
	57,  // 69: pb_common.EJellyGrid.Drops:type_name -> pb_common.DropDnSymbol
	2,   // 70: pb_common.EJellyGrid.WinLine:type_name -> pb_common.WinType
	2,   // 71: pb_common.JellyRole.WinTypes:type_name -> pb_common.WinType
	56,  // 72: pb_common.JellyRole.DisruptLine:type_name -> pb_common.DisruptLine
	57,  // 73: pb_common.JellyRole.DropDnSymbol:type_name -> pb_common.DropDnSymbol
	58,  // 74: pb_common.JellyRole.EGrids:type_name -> pb_common.EJellyGrid
	0,   // 75: pb_common.ECashcrewGrid.WinLine:type_name -> pb_common.WinLine
	61,  // 76: pb_common.ECashcrewGrid.WildSurround:type_name -> pb_common.WildSurround
	62,  // 77: pb_common.ECashcrewGrid.MoneyDatas:type_name -> pb_common.MoneyData
	4,   // 78: pb_common.CashcrewRole.CR:type_name -> pb_common.CommonRole
	61,  // 79: pb_common.CashcrewRole.WildSurround:type_name -> pb_common.WildSurround
	62,  // 80: pb_common.CashcrewRole.MoneyDatas:type_name -> pb_common.MoneyData
	60,  // 81: pb_common.CashcrewRole.EGrids:type_name -> pb_common.ECashcrewGrid
	4,   // 82: pb_common.GoldenYearRole.CR:type_name -> pb_common.CommonRole
	64,  // 83: pb_common.GoldenYearRole.Disappear:type_name -> pb_common.GoldenYearDisappear
	65,  // 84: pb_common.GoldenYearRole.Changes:type_name -> pb_common.GoldenYearChange
	66,  // 85: pb_common.GoldenYearRole.NextCascadeModel:type_name -> pb_common.GoldenYearRole
	0,   // 86: pb_common.EChaoscrewGrid.WinLine:type_name -> pb_common.WinLine
	67,  // 87: pb_common.EChaoscrewGrid.ChaoscrewRound:type_name -> pb_common.ChaoscrewRound
	4,   // 88: pb_common.ChaoscrewRole.CR:type_name -> pb_common.CommonRole
	67,  // 89: pb_common.ChaoscrewRole.ChaoscrewRound:type_name -> pb_common.ChaoscrewRound
	68,  // 90: pb_common.ChaoscrewRole.EGrids:type_name -> pb_common.EChaoscrewGrid
	70,  // 91: pb_common.KeepEmSuperCol.Expanse:type_name -> pb_common.KeepEmStartEnd
	4,   // 92: pb_common.KeepEmRole.CR:type_name -> pb_common.CommonRole
	71,  // 93: pb_common.KeepEmRole.Viscous:type_name -> pb_common.KeepEmViscous
	72,  // 94: pb_common.KeepEmRole.SuperCol:type_name -> pb_common.KeepEmSuperCol
	73,  // 95: pb_common.KeepEmRole.Boost:type_name -> pb_common.KeepEmBoost
	99,  // 96: pb_common.KeepEmRole.MoneyMulSave:type_name -> pb_common.KeepEmRole.MoneyMulSaveEntry
	100, // 97: pb_common.KeepEmRole.ViscousBottom:type_name -> pb_common.KeepEmRole.ViscousBottomEntry
	75,  // 98: pb_common.KeepEmRole.Future:type_name -> pb_common.KeepEmRole
	80,  // 99: pb_common.KeepEmRole.Activities:type_name -> pb_common.NewActivity
	4,   // 100: pb_common.VenomRole.CR:type_name -> pb_common.CommonRole
	76,  // 101: pb_common.VenomRole.WildList:type_name -> pb_common.VenomWildData
	77,  // 102: pb_common.VenomRole.SCExpanseCols:type_name -> pb_common.SCExpanseCol
	101, // 103: pb_common.VenomRole.FutureMesh:type_name -> pb_common.VenomRole.Mesh
	102, // 104: pb_common.VenomRole.FutureWildList:type_name -> pb_common.VenomRole.WL
	80,  // 105: pb_common.VenomRole.Activities:type_name -> pb_common.NewActivity
	4,   // 106: pb_common.RazorsharkRole.CR:type_name -> pb_common.CommonRole
	79,  // 107: pb_common.RazorsharkRole.EyesData:type_name -> pb_common.EyeData
	81,  // 108: pb_common.RazorsharkRole.RazorsharkBetRole:type_name -> pb_common.RazorsharkRole
	80,  // 109: pb_common.RazorsharkRole.NewActivity:type_name -> pb_common.NewActivity
	83,  // 110: pb_common.FreeSpinExt.List:type_name -> pb_common.FreeSpinActItem
	85,  // 111: pb_common.RankExt.List:type_name -> pb_common.RankActItem
	82,  // 112: pb_common.ActModel.Act:type_name -> pb_common.ActInnerModel
	84,  // 113: pb_common.ActModel.FsExtend:type_name -> pb_common.FreeSpinExt
	86,  // 114: pb_common.ActModel.RankExt:type_name -> pb_common.RankExt
	4,   // 115: pb_common.NeZhaRole.CR:type_name -> pb_common.CommonRole
	80,  // 116: pb_common.NeZhaRole.NewActivity:type_name -> pb_common.NewActivity
	91,  // 117: pb_common.NeZhaRole.NextCascadeModel:type_name -> pb_common.NeZhaRole
	0,   // 118: pb_common.GameEngineRole.WinLines:type_name -> pb_common.WinLine
	11,  // 119: pb_common.MoneytrainRole.BonusInfoEntry.value:type_name -> pb_common.Bonus
	11,  // 120: pb_common.MoneytrainRole.NewBonusInfoEntry.value:type_name -> pb_common.Bonus
	11,  // 121: pb_common.MoneytrainRole.PresistentBonusInfoEntry.value:type_name -> pb_common.Bonus
	13,  // 122: pb_common.MDragonSlayerRole.VSListEntry.value:type_name -> pb_common.VsChess
	76,  // 123: pb_common.VenomRole.WL.WildList:type_name -> pb_common.VenomWildData
	124, // [124:124] is the sub-list for method output_type
	124, // [124:124] is the sub-list for method input_type
	124, // [124:124] is the sub-list for extension type_name
	124, // [124:124] is the sub-list for extension extendee
	0,   // [0:124] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_common_proto_rawDesc), len(file_common_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   103,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
