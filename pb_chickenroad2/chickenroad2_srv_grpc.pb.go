// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: chickenroad2_srv.proto

package pb_chickenroad2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChickenRoad2SrvClient is the client API for ChickenRoad2Srv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChickenRoad2SrvClient interface {
	Auth(ctx context.Context, in *ChickenRoad2_Auth, opts ...grpc.CallOption) (*ChickenRoad2_AuthResp, error)
	Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*Empty, error)
}

type chickenRoad2SrvClient struct {
	cc grpc.ClientConnInterface
}

func NewChickenRoad2SrvClient(cc grpc.ClientConnInterface) ChickenRoad2SrvClient {
	return &chickenRoad2SrvClient{cc}
}

func (c *chickenRoad2SrvClient) Auth(ctx context.Context, in *ChickenRoad2_Auth, opts ...grpc.CallOption) (*ChickenRoad2_AuthResp, error) {
	out := new(ChickenRoad2_AuthResp)
	err := c.cc.Invoke(ctx, "/pb_chickenroad2.ChickenRoad2_srv/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chickenRoad2SrvClient) Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb_chickenroad2.ChickenRoad2_srv/Receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChickenRoad2SrvServer is the server API for ChickenRoad2Srv service.
// All implementations must embed UnimplementedChickenRoad2SrvServer
// for forward compatibility
type ChickenRoad2SrvServer interface {
	Auth(context.Context, *ChickenRoad2_Auth) (*ChickenRoad2_AuthResp, error)
	Receive(context.Context, *ReceiveRequest) (*Empty, error)
	mustEmbedUnimplementedChickenRoad2SrvServer()
}

// UnimplementedChickenRoad2SrvServer must be embedded to have forward compatible implementations.
type UnimplementedChickenRoad2SrvServer struct {
}

func (UnimplementedChickenRoad2SrvServer) Auth(context.Context, *ChickenRoad2_Auth) (*ChickenRoad2_AuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedChickenRoad2SrvServer) Receive(context.Context, *ReceiveRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedChickenRoad2SrvServer) mustEmbedUnimplementedChickenRoad2SrvServer() {}

// UnsafeChickenRoad2SrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChickenRoad2SrvServer will
// result in compilation errors.
type UnsafeChickenRoad2SrvServer interface {
	mustEmbedUnimplementedChickenRoad2SrvServer()
}

func RegisterChickenRoad2SrvServer(s grpc.ServiceRegistrar, srv ChickenRoad2SrvServer) {
	s.RegisterService(&ChickenRoad2Srv_ServiceDesc, srv)
}

func _ChickenRoad2Srv_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChickenRoad2_Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChickenRoad2SrvServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_chickenroad2.ChickenRoad2_srv/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChickenRoad2SrvServer).Auth(ctx, req.(*ChickenRoad2_Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChickenRoad2Srv_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChickenRoad2SrvServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_chickenroad2.ChickenRoad2_srv/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChickenRoad2SrvServer).Receive(ctx, req.(*ReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChickenRoad2Srv_ServiceDesc is the grpc.ServiceDesc for ChickenRoad2Srv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChickenRoad2Srv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb_chickenroad2.ChickenRoad2_srv",
	HandlerType: (*ChickenRoad2SrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _ChickenRoad2Srv_Auth_Handler,
		},
		{
			MethodName: "Receive",
			Handler:    _ChickenRoad2Srv_Receive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chickenroad2_srv.proto",
}
