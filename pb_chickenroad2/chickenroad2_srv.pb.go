// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.9
// source: chickenroad2_srv.proto

package pb_chickenroad2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChickenRoad2_Auth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator  string `protobuf:"bytes,1,opt,name=Operator,proto3" json:"Operator,omitempty"`
	AuthToken string `protobuf:"bytes,2,opt,name=AuthToken,proto3" json:"AuthToken,omitempty"`
	Currency  string `protobuf:"bytes,3,opt,name=Currency,proto3" json:"Currency,omitempty"`
	Ip        string `protobuf:"bytes,4,opt,name=Ip,proto3" json:"Ip,omitempty"`
}

func (x *ChickenRoad2_Auth) Reset() {
	*x = ChickenRoad2_Auth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chickenroad2_srv_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChickenRoad2_Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChickenRoad2_Auth) ProtoMessage() {}

func (x *ChickenRoad2_Auth) ProtoReflect() protoreflect.Message {
	mi := &file_chickenroad2_srv_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChickenRoad2_Auth.ProtoReflect.Descriptor instead.
func (*ChickenRoad2_Auth) Descriptor() ([]byte, []int) {
	return file_chickenroad2_srv_proto_rawDescGZIP(), []int{0}
}

func (x *ChickenRoad2_Auth) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *ChickenRoad2_Auth) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *ChickenRoad2_Auth) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ChickenRoad2_Auth) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type ChickenRoad2_AuthResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *ChickenRoad2_AuthResp) Reset() {
	*x = ChickenRoad2_AuthResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chickenroad2_srv_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChickenRoad2_AuthResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChickenRoad2_AuthResp) ProtoMessage() {}

func (x *ChickenRoad2_AuthResp) ProtoReflect() protoreflect.Message {
	mi := &file_chickenroad2_srv_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChickenRoad2_AuthResp.ProtoReflect.Descriptor instead.
func (*ChickenRoad2_AuthResp) Descriptor() ([]byte, []int) {
	return file_chickenroad2_srv_proto_rawDescGZIP(), []int{1}
}

func (x *ChickenRoad2_AuthResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chickenroad2_srv_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_chickenroad2_srv_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_chickenroad2_srv_proto_rawDescGZIP(), []int{2}
}

type GameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coefficients *Coefficients `protobuf:"bytes,1,opt,name=coefficients,proto3" json:"coefficients,omitempty"`
	LastWin      *LastWin      `protobuf:"bytes,2,opt,name=lastWin,proto3" json:"lastWin,omitempty"`
}

func (x *GameConfig) Reset() {
	*x = GameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chickenroad2_srv_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameConfig) ProtoMessage() {}

func (x *GameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chickenroad2_srv_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameConfig.ProtoReflect.Descriptor instead.
func (*GameConfig) Descriptor() ([]byte, []int) {
	return file_chickenroad2_srv_proto_rawDescGZIP(), []int{3}
}

func (x *GameConfig) GetCoefficients() *Coefficients {
	if x != nil {
		return x.Coefficients
	}
	return nil
}

func (x *GameConfig) GetLastWin() *LastWin {
	if x != nil {
		return x.LastWin
	}
	return nil
}

type Coefficients struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EASY      []string `protobuf:"bytes,1,rep,name=EASY,proto3" json:"EASY,omitempty"`
	MEDIUM    []string `protobuf:"bytes,2,rep,name=MEDIUM,proto3" json:"MEDIUM,omitempty"`
	HARD      []string `protobuf:"bytes,3,rep,name=HARD,proto3" json:"HARD,omitempty"`
	DAREDEVIL []string `protobuf:"bytes,4,rep,name=DAREDEVIL,proto3" json:"DAREDEVIL,omitempty"`
}

func (x *Coefficients) Reset() {
	*x = Coefficients{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chickenroad2_srv_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coefficients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coefficients) ProtoMessage() {}

func (x *Coefficients) ProtoReflect() protoreflect.Message {
	mi := &file_chickenroad2_srv_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coefficients.ProtoReflect.Descriptor instead.
func (*Coefficients) Descriptor() ([]byte, []int) {
	return file_chickenroad2_srv_proto_rawDescGZIP(), []int{4}
}

func (x *Coefficients) GetEASY() []string {
	if x != nil {
		return x.EASY
	}
	return nil
}

func (x *Coefficients) GetMEDIUM() []string {
	if x != nil {
		return x.MEDIUM
	}
	return nil
}

func (x *Coefficients) GetHARD() []string {
	if x != nil {
		return x.HARD
	}
	return nil
}

func (x *Coefficients) GetDAREDEVIL() []string {
	if x != nil {
		return x.DAREDEVIL
	}
	return nil
}

type LastWin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Avatar      string `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	CountryCode string `protobuf:"bytes,3,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
	WinAmount   string `protobuf:"bytes,4,opt,name=winAmount,proto3" json:"winAmount,omitempty"`
	Currency    string `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *LastWin) Reset() {
	*x = LastWin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chickenroad2_srv_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastWin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastWin) ProtoMessage() {}

func (x *LastWin) ProtoReflect() protoreflect.Message {
	mi := &file_chickenroad2_srv_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastWin.ProtoReflect.Descriptor instead.
func (*LastWin) Descriptor() ([]byte, []int) {
	return file_chickenroad2_srv_proto_rawDescGZIP(), []int{5}
}

func (x *LastWin) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LastWin) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *LastWin) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *LastWin) GetWinAmount() string {
	if x != nil {
		return x.WinAmount
	}
	return ""
}

func (x *LastWin) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action  string         `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Payload *ActionPayload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chickenroad2_srv_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_chickenroad2_srv_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_chickenroad2_srv_proto_rawDescGZIP(), []int{6}
}

func (x *Action) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Action) GetPayload() *ActionPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ActionPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetAmount   string `protobuf:"bytes,1,opt,name=betAmount,proto3" json:"betAmount,omitempty"`
	Currency    string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Difficulty  string `protobuf:"bytes,3,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	CountryCode string `protobuf:"bytes,4,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
	LineNumber  int32  `protobuf:"varint,5,opt,name=lineNumber,proto3" json:"lineNumber,omitempty"`
}

func (x *ActionPayload) Reset() {
	*x = ActionPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chickenroad2_srv_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionPayload) ProtoMessage() {}

func (x *ActionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_chickenroad2_srv_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionPayload.ProtoReflect.Descriptor instead.
func (*ActionPayload) Descriptor() ([]byte, []int) {
	return file_chickenroad2_srv_proto_rawDescGZIP(), []int{7}
}

func (x *ActionPayload) GetBetAmount() string {
	if x != nil {
		return x.BetAmount
	}
	return ""
}

func (x *ActionPayload) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ActionPayload) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *ActionPayload) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *ActionPayload) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

type GameStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished         bool    `protobuf:"varint,1,opt,name=isFinished,proto3" json:"isFinished"`
	Currency           string  `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	BetAmount          string  `protobuf:"bytes,3,opt,name=betAmount,proto3" json:"betAmount,omitempty"`
	Coeff              string  `protobuf:"bytes,4,opt,name=coeff,proto3" json:"coeff,omitempty"`
	WinAmount          string  `protobuf:"bytes,5,opt,name=winAmount,proto3" json:"winAmount,omitempty"`
	Difficulty         string  `protobuf:"bytes,6,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	LineNumber         int32   `protobuf:"varint,7,opt,name=lineNumber,proto3" json:"lineNumber"`
	CollisionPositions []int32 `protobuf:"varint,8,rep,packed,name=collisionPositions,proto3" json:"collisionPositions,omitempty"`
	IsWin              bool    `protobuf:"varint,9,opt,name=isWin,proto3" json:"isWin,omitempty"`
}

func (x *GameStep) Reset() {
	*x = GameStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chickenroad2_srv_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStep) ProtoMessage() {}

func (x *GameStep) ProtoReflect() protoreflect.Message {
	mi := &file_chickenroad2_srv_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStep.ProtoReflect.Descriptor instead.
func (*GameStep) Descriptor() ([]byte, []int) {
	return file_chickenroad2_srv_proto_rawDescGZIP(), []int{8}
}

func (x *GameStep) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *GameStep) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *GameStep) GetBetAmount() string {
	if x != nil {
		return x.BetAmount
	}
	return ""
}

func (x *GameStep) GetCoeff() string {
	if x != nil {
		return x.Coeff
	}
	return ""
}

func (x *GameStep) GetWinAmount() string {
	if x != nil {
		return x.WinAmount
	}
	return ""
}

func (x *GameStep) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *GameStep) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *GameStep) GetCollisionPositions() []int32 {
	if x != nil {
		return x.CollisionPositions
	}
	return nil
}

func (x *GameStep) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt     string    `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	GameId        int32     `protobuf:"varint,3,opt,name=gameId,proto3" json:"gameId,omitempty"`
	FinishCoeff   float64   `protobuf:"fixed64,4,opt,name=finishCoeff,proto3" json:"finishCoeff,omitempty"`
	Fairness      *Fairness `protobuf:"bytes,5,opt,name=fairness,proto3" json:"fairness,omitempty"`
	BetAmount     float64   `protobuf:"fixed64,6,opt,name=betAmount,proto3" json:"betAmount,omitempty"`
	Win           float64   `protobuf:"fixed64,7,opt,name=win,proto3" json:"win,omitempty"`
	WithdrawCoeff float64   `protobuf:"fixed64,8,opt,name=withdrawCoeff,proto3" json:"withdrawCoeff,omitempty"`
	OperatorId    string    `protobuf:"bytes,9,opt,name=operatorId,proto3" json:"operatorId,omitempty"`
	UserId        string    `protobuf:"bytes,10,opt,name=userId,proto3" json:"userId,omitempty"`
	Currency      string    `protobuf:"bytes,11,opt,name=currency,proto3" json:"currency,omitempty"`
	GameMeta      *GameMeta `protobuf:"bytes,12,opt,name=gameMeta,proto3" json:"gameMeta,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chickenroad2_srv_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_chickenroad2_srv_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_chickenroad2_srv_proto_rawDescGZIP(), []int{9}
}

func (x *Record) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Record) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Record) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *Record) GetFinishCoeff() float64 {
	if x != nil {
		return x.FinishCoeff
	}
	return 0
}

func (x *Record) GetFairness() *Fairness {
	if x != nil {
		return x.Fairness
	}
	return nil
}

func (x *Record) GetBetAmount() float64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *Record) GetWin() float64 {
	if x != nil {
		return x.Win
	}
	return 0
}

func (x *Record) GetWithdrawCoeff() float64 {
	if x != nil {
		return x.WithdrawCoeff
	}
	return 0
}

func (x *Record) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *Record) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Record) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Record) GetGameMeta() *GameMeta {
	if x != nil {
		return x.GameMeta
	}
	return nil
}

type Fairness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Decimal          string `protobuf:"bytes,1,opt,name=decimal,proto3" json:"decimal,omitempty"`
	ClientSeed       string `protobuf:"bytes,2,opt,name=clientSeed,proto3" json:"clientSeed,omitempty"`
	ServerSeed       string `protobuf:"bytes,3,opt,name=serverSeed,proto3" json:"serverSeed,omitempty"`
	CombinedHash     string `protobuf:"bytes,4,opt,name=combinedHash,proto3" json:"combinedHash,omitempty"`
	HashedServerSeed string `protobuf:"bytes,5,opt,name=hashedServerSeed,proto3" json:"hashedServerSeed,omitempty"`
}

func (x *Fairness) Reset() {
	*x = Fairness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chickenroad2_srv_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fairness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fairness) ProtoMessage() {}

func (x *Fairness) ProtoReflect() protoreflect.Message {
	mi := &file_chickenroad2_srv_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fairness.ProtoReflect.Descriptor instead.
func (*Fairness) Descriptor() ([]byte, []int) {
	return file_chickenroad2_srv_proto_rawDescGZIP(), []int{10}
}

func (x *Fairness) GetDecimal() string {
	if x != nil {
		return x.Decimal
	}
	return ""
}

func (x *Fairness) GetClientSeed() string {
	if x != nil {
		return x.ClientSeed
	}
	return ""
}

func (x *Fairness) GetServerSeed() string {
	if x != nil {
		return x.ServerSeed
	}
	return ""
}

func (x *Fairness) GetCombinedHash() string {
	if x != nil {
		return x.CombinedHash
	}
	return ""
}

func (x *Fairness) GetHashedServerSeed() string {
	if x != nil {
		return x.HashedServerSeed
	}
	return ""
}

type GameMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coeff      string `protobuf:"bytes,1,opt,name=coeff,proto3" json:"coeff,omitempty"`
	Difficulty string `protobuf:"bytes,2,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
}

func (x *GameMeta) Reset() {
	*x = GameMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chickenroad2_srv_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMeta) ProtoMessage() {}

func (x *GameMeta) ProtoReflect() protoreflect.Message {
	mi := &file_chickenroad2_srv_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMeta.ProtoReflect.Descriptor instead.
func (*GameMeta) Descriptor() ([]byte, []int) {
	return file_chickenroad2_srv_proto_rawDescGZIP(), []int{11}
}

func (x *GameMeta) GetCoeff() string {
	if x != nil {
		return x.Coeff
	}
	return ""
}

func (x *GameMeta) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

type ChickenRoad2Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentId           int64   `protobuf:"varint,1,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	SubId              int64   `protobuf:"varint,2,opt,name=SubId,proto3" json:"SubId,omitempty"`
	IsFinished         bool    `protobuf:"varint,3,opt,name=IsFinished,proto3" json:"IsFinished,omitempty"`
	IsWin              bool    `protobuf:"varint,4,opt,name=IsWin,proto3" json:"IsWin,omitempty"`
	Currency           string  `protobuf:"bytes,5,opt,name=Currency,proto3" json:"Currency,omitempty"`
	BetAmount          float64 `protobuf:"fixed64,6,opt,name=BetAmount,proto3" json:"BetAmount,omitempty"`
	Coefficients       float64 `protobuf:"fixed64,7,opt,name=Coefficients,proto3" json:"Coefficients,omitempty"`
	WinAmount          float64 `protobuf:"fixed64,8,opt,name=WinAmount,proto3" json:"WinAmount,omitempty"`
	Difficulty         string  `protobuf:"bytes,9,opt,name=Difficulty,proto3" json:"Difficulty,omitempty"`
	LineNumber         int32   `protobuf:"varint,10,opt,name=LineNumber,proto3" json:"LineNumber,omitempty"`
	CollisionPositions []int32 `protobuf:"varint,11,rep,packed,name=CollisionPositions,proto3" json:"CollisionPositions,omitempty"`
	ClientSeed         string  `protobuf:"bytes,12,opt,name=ClientSeed,proto3" json:"ClientSeed,omitempty"`
	ServerSeed         string  `protobuf:"bytes,13,opt,name=ServerSeed,proto3" json:"ServerSeed,omitempty"`
	RoleId             string  `protobuf:"bytes,14,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
}

func (x *ChickenRoad2Role) Reset() {
	*x = ChickenRoad2Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chickenroad2_srv_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChickenRoad2Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChickenRoad2Role) ProtoMessage() {}

func (x *ChickenRoad2Role) ProtoReflect() protoreflect.Message {
	mi := &file_chickenroad2_srv_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChickenRoad2Role.ProtoReflect.Descriptor instead.
func (*ChickenRoad2Role) Descriptor() ([]byte, []int) {
	return file_chickenroad2_srv_proto_rawDescGZIP(), []int{12}
}

func (x *ChickenRoad2Role) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *ChickenRoad2Role) GetSubId() int64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *ChickenRoad2Role) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *ChickenRoad2Role) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

func (x *ChickenRoad2Role) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ChickenRoad2Role) GetBetAmount() float64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *ChickenRoad2Role) GetCoefficients() float64 {
	if x != nil {
		return x.Coefficients
	}
	return 0
}

func (x *ChickenRoad2Role) GetWinAmount() float64 {
	if x != nil {
		return x.WinAmount
	}
	return 0
}

func (x *ChickenRoad2Role) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *ChickenRoad2Role) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *ChickenRoad2Role) GetCollisionPositions() []int32 {
	if x != nil {
		return x.CollisionPositions
	}
	return nil
}

func (x *ChickenRoad2Role) GetClientSeed() string {
	if x != nil {
		return x.ClientSeed
	}
	return ""
}

func (x *ChickenRoad2Role) GetServerSeed() string {
	if x != nil {
		return x.ServerSeed
	}
	return ""
}

func (x *ChickenRoad2Role) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

// 单播请求：给一个用户发送一条业务事件
type ReceiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务侧用户唯一标识（如用户ID、账号ID）
	UserInfo *UserInfo `protobuf:"bytes,1,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	// 事件名，便于前后端约定解析
	Event string `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	// 二进制载荷；如使用JSON，可直接放入序列化后的字节
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	//游戏id
	GameId int32 `protobuf:"varint,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	//房间id
	RoomId string `protobuf:"bytes,5,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// 业务侧可选扩展信息（例如路由key、版本、平台等）
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReceiveRequest) Reset() {
	*x = ReceiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chickenroad2_srv_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveRequest) ProtoMessage() {}

func (x *ReceiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chickenroad2_srv_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveRequest.ProtoReflect.Descriptor instead.
func (*ReceiveRequest) Descriptor() ([]byte, []int) {
	return file_chickenroad2_srv_proto_rawDescGZIP(), []int{13}
}

func (x *ReceiveRequest) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *ReceiveRequest) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *ReceiveRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ReceiveRequest) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *ReceiveRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *ReceiveRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chickenroad2_srv_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chickenroad2_srv_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_chickenroad2_srv_proto_rawDescGZIP(), []int{14}
}

func (x *UserInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

var File_chickenroad2_srv_proto protoreflect.FileDescriptor

var file_chickenroad2_srv_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x72, 0x6f, 0x61, 0x64, 0x32, 0x5f, 0x73,
	0x72, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x70, 0x62, 0x5f, 0x63, 0x68, 0x69,
	0x63, 0x6b, 0x65, 0x6e, 0x72, 0x6f, 0x61, 0x64, 0x32, 0x22, 0x79, 0x0a, 0x11, 0x43, 0x68, 0x69,
	0x63, 0x6b, 0x65, 0x6e, 0x52, 0x6f, 0x61, 0x64, 0x32, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41,
	0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x70, 0x22, 0x2d, 0x0a, 0x15, 0x43, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x52,
	0x6f, 0x61, 0x64, 0x32, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x83, 0x01, 0x0a,
	0x0a, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x0c, 0x63,
	0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x72, 0x6f,
	0x61, 0x64, 0x32, 0x2e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x0c, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32,
	0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x62, 0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x72, 0x6f, 0x61, 0x64,
	0x32, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x57,
	0x69, 0x6e, 0x22, 0x6c, 0x0a, 0x0c, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x41, 0x53, 0x59, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x45, 0x41, 0x53, 0x59, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x12, 0x12,
	0x0a, 0x04, 0x48, 0x41, 0x52, 0x44, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x48, 0x41,
	0x52, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x41, 0x52, 0x45, 0x44, 0x45, 0x56, 0x49, 0x4c, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x44, 0x41, 0x52, 0x45, 0x44, 0x45, 0x56, 0x49, 0x4c,
	0x22, 0x99, 0x01, 0x0a, 0x07, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x5a, 0x0a, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x72, 0x6f, 0x61, 0x64,
	0x32, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x9e, 0x02, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x65, 0x66, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x63,
	0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x22, 0x88, 0x03, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x12, 0x35, 0x0a, 0x08, 0x66, 0x61,
	0x69, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x62, 0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x72, 0x6f, 0x61, 0x64, 0x32, 0x2e, 0x46,
	0x61, 0x69, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x08, 0x66, 0x61, 0x69, 0x72, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x77, 0x69,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x65,
	0x66, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x62, 0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x72, 0x6f, 0x61, 0x64, 0x32, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x22, 0xb4, 0x01, 0x0a, 0x08, 0x46, 0x61, 0x69, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a,
	0x10, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x22, 0x40, 0x0a, 0x08, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0xbe, 0x03, 0x0a, 0x10,
	0x43, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x52, 0x6f, 0x61, 0x64, 0x32, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x75, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x75, 0x62,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x57, 0x69, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xb2, 0x02, 0x0a,
	0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x72,
	0x6f, 0x61, 0x64, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x62,
	0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x72, 0x6f, 0x61, 0x64, 0x32, 0x2e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x38, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0xac, 0x01, 0x0a, 0x10,
	0x43, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x52, 0x6f, 0x61, 0x64, 0x32, 0x5f, 0x73, 0x72, 0x76,
	0x12, 0x54, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x5f, 0x63, 0x68,
	0x69, 0x63, 0x6b, 0x65, 0x6e, 0x72, 0x6f, 0x61, 0x64, 0x32, 0x2e, 0x43, 0x68, 0x69, 0x63, 0x6b,
	0x65, 0x6e, 0x52, 0x6f, 0x61, 0x64, 0x32, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x26, 0x2e, 0x70,
	0x62, 0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x72, 0x6f, 0x61, 0x64, 0x32, 0x2e, 0x43,
	0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x52, 0x6f, 0x61, 0x64, 0x32, 0x5f, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x72, 0x6f,
	0x61, 0x64, 0x32, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x72,
	0x6f, 0x61, 0x64, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x13, 0x5a, 0x11, 0x2e, 0x2f,
	0x70, 0x62, 0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x72, 0x6f, 0x61, 0x64, 0x32, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chickenroad2_srv_proto_rawDescOnce sync.Once
	file_chickenroad2_srv_proto_rawDescData = file_chickenroad2_srv_proto_rawDesc
)

func file_chickenroad2_srv_proto_rawDescGZIP() []byte {
	file_chickenroad2_srv_proto_rawDescOnce.Do(func() {
		file_chickenroad2_srv_proto_rawDescData = protoimpl.X.CompressGZIP(file_chickenroad2_srv_proto_rawDescData)
	})
	return file_chickenroad2_srv_proto_rawDescData
}

var file_chickenroad2_srv_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_chickenroad2_srv_proto_goTypes = []interface{}{
	(*ChickenRoad2_Auth)(nil),     // 0: pb_chickenroad2.ChickenRoad2_Auth
	(*ChickenRoad2_AuthResp)(nil), // 1: pb_chickenroad2.ChickenRoad2_AuthResp
	(*Empty)(nil),                 // 2: pb_chickenroad2.Empty
	(*GameConfig)(nil),            // 3: pb_chickenroad2.GameConfig
	(*Coefficients)(nil),          // 4: pb_chickenroad2.Coefficients
	(*LastWin)(nil),               // 5: pb_chickenroad2.LastWin
	(*Action)(nil),                // 6: pb_chickenroad2.Action
	(*ActionPayload)(nil),         // 7: pb_chickenroad2.ActionPayload
	(*GameStep)(nil),              // 8: pb_chickenroad2.GameStep
	(*Record)(nil),                // 9: pb_chickenroad2.Record
	(*Fairness)(nil),              // 10: pb_chickenroad2.Fairness
	(*GameMeta)(nil),              // 11: pb_chickenroad2.GameMeta
	(*ChickenRoad2Role)(nil),      // 12: pb_chickenroad2.ChickenRoad2Role
	(*ReceiveRequest)(nil),        // 13: pb_chickenroad2.ReceiveRequest
	(*UserInfo)(nil),              // 14: pb_chickenroad2.UserInfo
	nil,                           // 15: pb_chickenroad2.ReceiveRequest.MetadataEntry
}
var file_chickenroad2_srv_proto_depIdxs = []int32{
	4,  // 0: pb_chickenroad2.GameConfig.coefficients:type_name -> pb_chickenroad2.Coefficients
	5,  // 1: pb_chickenroad2.GameConfig.lastWin:type_name -> pb_chickenroad2.LastWin
	7,  // 2: pb_chickenroad2.Action.payload:type_name -> pb_chickenroad2.ActionPayload
	10, // 3: pb_chickenroad2.Record.fairness:type_name -> pb_chickenroad2.Fairness
	11, // 4: pb_chickenroad2.Record.gameMeta:type_name -> pb_chickenroad2.GameMeta
	14, // 5: pb_chickenroad2.ReceiveRequest.user_info:type_name -> pb_chickenroad2.UserInfo
	15, // 6: pb_chickenroad2.ReceiveRequest.metadata:type_name -> pb_chickenroad2.ReceiveRequest.MetadataEntry
	0,  // 7: pb_chickenroad2.ChickenRoad2_srv.Auth:input_type -> pb_chickenroad2.ChickenRoad2_Auth
	13, // 8: pb_chickenroad2.ChickenRoad2_srv.Receive:input_type -> pb_chickenroad2.ReceiveRequest
	1,  // 9: pb_chickenroad2.ChickenRoad2_srv.Auth:output_type -> pb_chickenroad2.ChickenRoad2_AuthResp
	2,  // 10: pb_chickenroad2.ChickenRoad2_srv.Receive:output_type -> pb_chickenroad2.Empty
	9,  // [9:11] is the sub-list for method output_type
	7,  // [7:9] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_chickenroad2_srv_proto_init() }
func file_chickenroad2_srv_proto_init() {
	if File_chickenroad2_srv_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chickenroad2_srv_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChickenRoad2_Auth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chickenroad2_srv_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChickenRoad2_AuthResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chickenroad2_srv_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chickenroad2_srv_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chickenroad2_srv_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coefficients); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chickenroad2_srv_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastWin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chickenroad2_srv_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chickenroad2_srv_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chickenroad2_srv_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chickenroad2_srv_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chickenroad2_srv_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fairness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chickenroad2_srv_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chickenroad2_srv_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChickenRoad2Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chickenroad2_srv_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chickenroad2_srv_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chickenroad2_srv_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chickenroad2_srv_proto_goTypes,
		DependencyIndexes: file_chickenroad2_srv_proto_depIdxs,
		MessageInfos:      file_chickenroad2_srv_proto_msgTypes,
	}.Build()
	File_chickenroad2_srv_proto = out.File
	file_chickenroad2_srv_proto_rawDesc = nil
	file_chickenroad2_srv_proto_goTypes = nil
	file_chickenroad2_srv_proto_depIdxs = nil
}
